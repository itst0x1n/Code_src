
Prerivanie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006340  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080064e0  080064e0  000074e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800659c  0800659c  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  0800659c  0800659c  0000759c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065a4  080065a4  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065a4  080065a4  000075a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080065a8  080065a8  000075a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080065ac  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c34  20000060  0800660c  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c94  0800660c  00008c94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000196dd  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039cc  00000000  00000000  0002176d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c8  00000000  00000000  00025140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001018  00000000  00000000  00026608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188ef  00000000  00000000  00027620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018da2  00000000  00000000  0003ff0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097a2e  00000000  00000000  00058cb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f06df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000596c  00000000  00000000  000f0724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  000f6090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080064c8 	.word	0x080064c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	080064c8 	.word	0x080064c8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004d4:	4a0c      	ldr	r2, [pc, #48]	@ (8000508 <MX_FREERTOS_Init+0x38>)
 80004d6:	2100      	movs	r1, #0
 80004d8:	480c      	ldr	r0, [pc, #48]	@ (800050c <MX_FREERTOS_Init+0x3c>)
 80004da:	f003 f9a9 	bl	8003830 <osThreadNew>
 80004de:	4603      	mov	r3, r0
 80004e0:	4a0b      	ldr	r2, [pc, #44]	@ (8000510 <MX_FREERTOS_Init+0x40>)
 80004e2:	6013      	str	r3, [r2, #0]

  /* creation of bitChecking */
  bitCheckingHandle = osThreadNew(StartBitChecking, NULL, &bitChecking_attributes);
 80004e4:	4a0b      	ldr	r2, [pc, #44]	@ (8000514 <MX_FREERTOS_Init+0x44>)
 80004e6:	2100      	movs	r1, #0
 80004e8:	480b      	ldr	r0, [pc, #44]	@ (8000518 <MX_FREERTOS_Init+0x48>)
 80004ea:	f003 f9a1 	bl	8003830 <osThreadNew>
 80004ee:	4603      	mov	r3, r0
 80004f0:	4a0a      	ldr	r2, [pc, #40]	@ (800051c <MX_FREERTOS_Init+0x4c>)
 80004f2:	6013      	str	r3, [r2, #0]

  /* creation of pwmSet */
  pwmSetHandle = osThreadNew(StartPWM_Set, NULL, &pwmSet_attributes);
 80004f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000520 <MX_FREERTOS_Init+0x50>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	480a      	ldr	r0, [pc, #40]	@ (8000524 <MX_FREERTOS_Init+0x54>)
 80004fa:	f003 f999 	bl	8003830 <osThreadNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a09      	ldr	r2, [pc, #36]	@ (8000528 <MX_FREERTOS_Init+0x58>)
 8000502:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}
 8000508:	08006518 	.word	0x08006518
 800050c:	0800052d 	.word	0x0800052d
 8000510:	20000084 	.word	0x20000084
 8000514:	0800653c 	.word	0x0800653c
 8000518:	08000555 	.word	0x08000555
 800051c:	20000088 	.word	0x20000088
 8000520:	08006560 	.word	0x08006560
 8000524:	080005a1 	.word	0x080005a1
 8000528:	2000008c 	.word	0x2000008c

0800052c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_UART_Receive(&huart1, &dataReceive, 3, 1);
 8000534:	2301      	movs	r3, #1
 8000536:	2203      	movs	r2, #3
 8000538:	4904      	ldr	r1, [pc, #16]	@ (800054c <StartDefaultTask+0x20>)
 800053a:	4805      	ldr	r0, [pc, #20]	@ (8000550 <StartDefaultTask+0x24>)
 800053c:	f002 f92c 	bl	8002798 <HAL_UART_Receive>
    osDelay(1);
 8000540:	2001      	movs	r0, #1
 8000542:	f003 fa07 	bl	8003954 <osDelay>
	HAL_UART_Receive(&huart1, &dataReceive, 3, 1);
 8000546:	bf00      	nop
 8000548:	e7f4      	b.n	8000534 <StartDefaultTask+0x8>
 800054a:	bf00      	nop
 800054c:	2000007c 	.word	0x2000007c
 8000550:	20000120 	.word	0x20000120

08000554 <StartBitChecking>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBitChecking */
void StartBitChecking(void *argument)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBitChecking */
	int count;
  /* Infinite loop */
  for(;;)
  {
	if(bitcheck(dataReceive, 7)){
 800055c:	4b0e      	ldr	r3, [pc, #56]	@ (8000598 <StartBitChecking+0x44>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	b25b      	sxtb	r3, r3
 8000562:	2b00      	cmp	r3, #0
 8000564:	da0a      	bge.n	800057c <StartBitChecking+0x28>
		count++;
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	3301      	adds	r3, #1
 800056a:	60fb      	str	r3, [r7, #12]
		data[count] = dataReceive;
 800056c:	4b0a      	ldr	r3, [pc, #40]	@ (8000598 <StartBitChecking+0x44>)
 800056e:	7819      	ldrb	r1, [r3, #0]
 8000570:	4a0a      	ldr	r2, [pc, #40]	@ (800059c <StartBitChecking+0x48>)
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	4413      	add	r3, r2
 8000576:	460a      	mov	r2, r1
 8000578:	701a      	strb	r2, [r3, #0]
 800057a:	e008      	b.n	800058e <StartBitChecking+0x3a>
	}
	else{
		count = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	60fb      	str	r3, [r7, #12]
		data[count] = dataReceive;
 8000580:	4b05      	ldr	r3, [pc, #20]	@ (8000598 <StartBitChecking+0x44>)
 8000582:	7819      	ldrb	r1, [r3, #0]
 8000584:	4a05      	ldr	r2, [pc, #20]	@ (800059c <StartBitChecking+0x48>)
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	4413      	add	r3, r2
 800058a:	460a      	mov	r2, r1
 800058c:	701a      	strb	r2, [r3, #0]
	}
    osDelay(1);
 800058e:	2001      	movs	r0, #1
 8000590:	f003 f9e0 	bl	8003954 <osDelay>
	if(bitcheck(dataReceive, 7)){
 8000594:	e7e2      	b.n	800055c <StartBitChecking+0x8>
 8000596:	bf00      	nop
 8000598:	2000007c 	.word	0x2000007c
 800059c:	20000080 	.word	0x20000080

080005a0 <StartPWM_Set>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPWM_Set */
void StartPWM_Set(void *argument)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPWM_Set */
  /* Infinite loop */
  for(;;)
  {
	if(bitcheck(data[0]<<1, 7)){
 80005a8:	4b0b      	ldr	r3, [pc, #44]	@ (80005d8 <StartPWM_Set+0x38>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d004      	beq.n	80005c0 <StartPWM_Set+0x20>
		pwm = data[1]&255;
 80005b6:	4b08      	ldr	r3, [pc, #32]	@ (80005d8 <StartPWM_Set+0x38>)
 80005b8:	785a      	ldrb	r2, [r3, #1]
 80005ba:	4b08      	ldr	r3, [pc, #32]	@ (80005dc <StartPWM_Set+0x3c>)
 80005bc:	701a      	strb	r2, [r3, #0]
 80005be:	e006      	b.n	80005ce <StartPWM_Set+0x2e>
	}
	else{
		pwm = data[1]&127;
 80005c0:	4b05      	ldr	r3, [pc, #20]	@ (80005d8 <StartPWM_Set+0x38>)
 80005c2:	785b      	ldrb	r3, [r3, #1]
 80005c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80005c8:	b2da      	uxtb	r2, r3
 80005ca:	4b04      	ldr	r3, [pc, #16]	@ (80005dc <StartPWM_Set+0x3c>)
 80005cc:	701a      	strb	r2, [r3, #0]
	}
    osDelay(1);
 80005ce:	2001      	movs	r0, #1
 80005d0:	f003 f9c0 	bl	8003954 <osDelay>
	if(bitcheck(data[0]<<1, 7)){
 80005d4:	e7e8      	b.n	80005a8 <StartPWM_Set+0x8>
 80005d6:	bf00      	nop
 80005d8:	20000080 	.word	0x20000080
 80005dc:	20000083 	.word	0x20000083

080005e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08a      	sub	sp, #40	@ 0x28
 80005e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	613b      	str	r3, [r7, #16]
 80005fa:	4b2d      	ldr	r3, [pc, #180]	@ (80006b0 <MX_GPIO_Init+0xd0>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fe:	4a2c      	ldr	r2, [pc, #176]	@ (80006b0 <MX_GPIO_Init+0xd0>)
 8000600:	f043 0304 	orr.w	r3, r3, #4
 8000604:	6313      	str	r3, [r2, #48]	@ 0x30
 8000606:	4b2a      	ldr	r3, [pc, #168]	@ (80006b0 <MX_GPIO_Init+0xd0>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	f003 0304 	and.w	r3, r3, #4
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	4b26      	ldr	r3, [pc, #152]	@ (80006b0 <MX_GPIO_Init+0xd0>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	4a25      	ldr	r2, [pc, #148]	@ (80006b0 <MX_GPIO_Init+0xd0>)
 800061c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000620:	6313      	str	r3, [r2, #48]	@ 0x30
 8000622:	4b23      	ldr	r3, [pc, #140]	@ (80006b0 <MX_GPIO_Init+0xd0>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	4b1f      	ldr	r3, [pc, #124]	@ (80006b0 <MX_GPIO_Init+0xd0>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	4a1e      	ldr	r2, [pc, #120]	@ (80006b0 <MX_GPIO_Init+0xd0>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6313      	str	r3, [r2, #48]	@ 0x30
 800063e:	4b1c      	ldr	r3, [pc, #112]	@ (80006b0 <MX_GPIO_Init+0xd0>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	4b18      	ldr	r3, [pc, #96]	@ (80006b0 <MX_GPIO_Init+0xd0>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	4a17      	ldr	r2, [pc, #92]	@ (80006b0 <MX_GPIO_Init+0xd0>)
 8000654:	f043 0302 	orr.w	r3, r3, #2
 8000658:	6313      	str	r3, [r2, #48]	@ 0x30
 800065a:	4b15      	ldr	r3, [pc, #84]	@ (80006b0 <MX_GPIO_Init+0xd0>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065e:	f003 0302 	and.w	r3, r3, #2
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_GPIO_Port, LD_Pin, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	2120      	movs	r1, #32
 800066a:	4812      	ldr	r0, [pc, #72]	@ (80006b4 <MX_GPIO_Init+0xd4>)
 800066c:	f000 fe20 	bl	80012b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000670:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000676:	2300      	movs	r3, #0
 8000678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	4619      	mov	r1, r3
 8000684:	480c      	ldr	r0, [pc, #48]	@ (80006b8 <MX_GPIO_Init+0xd8>)
 8000686:	f000 fc8f 	bl	8000fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_Pin;
 800068a:	2320      	movs	r3, #32
 800068c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068e:	2301      	movs	r3, #1
 8000690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000696:	2300      	movs	r3, #0
 8000698:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	4619      	mov	r1, r3
 80006a0:	4804      	ldr	r0, [pc, #16]	@ (80006b4 <MX_GPIO_Init+0xd4>)
 80006a2:	f000 fc81 	bl	8000fa8 <HAL_GPIO_Init>

}
 80006a6:	bf00      	nop
 80006a8:	3728      	adds	r7, #40	@ 0x28
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40020000 	.word	0x40020000
 80006b8:	40020800 	.word	0x40020800

080006bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c0:	f000 fabc 	bl	8000c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c4:	f000 f80e 	bl	80006e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c8:	f7ff ff8a 	bl	80005e0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006cc:	f000 fa12 	bl	8000af4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80006d0:	f000 f960 	bl	8000994 <MX_TIM2_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006d4:	f003 f862 	bl	800379c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80006d8:	f7ff fefa 	bl	80004d0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80006dc:	f003 f882 	bl	80037e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e0:	bf00      	nop
 80006e2:	e7fd      	b.n	80006e0 <main+0x24>

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b094      	sub	sp, #80	@ 0x50
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	f107 0320 	add.w	r3, r7, #32
 80006ee:	2230      	movs	r2, #48	@ 0x30
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f005 fe00 	bl	80062f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000708:	2300      	movs	r3, #0
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	4b23      	ldr	r3, [pc, #140]	@ (800079c <SystemClock_Config+0xb8>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000710:	4a22      	ldr	r2, [pc, #136]	@ (800079c <SystemClock_Config+0xb8>)
 8000712:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000716:	6413      	str	r3, [r2, #64]	@ 0x40
 8000718:	4b20      	ldr	r3, [pc, #128]	@ (800079c <SystemClock_Config+0xb8>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000724:	2300      	movs	r3, #0
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	4b1d      	ldr	r3, [pc, #116]	@ (80007a0 <SystemClock_Config+0xbc>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000730:	4a1b      	ldr	r2, [pc, #108]	@ (80007a0 <SystemClock_Config+0xbc>)
 8000732:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000736:	6013      	str	r3, [r2, #0]
 8000738:	4b19      	ldr	r3, [pc, #100]	@ (80007a0 <SystemClock_Config+0xbc>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000744:	2302      	movs	r3, #2
 8000746:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000748:	2301      	movs	r3, #1
 800074a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074c:	2310      	movs	r3, #16
 800074e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000750:	2300      	movs	r3, #0
 8000752:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000754:	f107 0320 	add.w	r3, r7, #32
 8000758:	4618      	mov	r0, r3
 800075a:	f000 fdc3 	bl	80012e4 <HAL_RCC_OscConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000764:	f000 f830 	bl	80007c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000768:	230f      	movs	r3, #15
 800076a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800076c:	2300      	movs	r3, #0
 800076e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f001 f826 	bl	80017d4 <HAL_RCC_ClockConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800078e:	f000 f81b 	bl	80007c8 <Error_Handler>
  }
}
 8000792:	bf00      	nop
 8000794:	3750      	adds	r7, #80	@ 0x50
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800
 80007a0:	40007000 	.word	0x40007000

080007a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a04      	ldr	r2, [pc, #16]	@ (80007c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d101      	bne.n	80007ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007b6:	f000 fa63 	bl	8000c80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40014400 	.word	0x40014400

080007c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007cc:	b672      	cpsid	i
}
 80007ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <Error_Handler+0x8>

080007d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b12      	ldr	r3, [pc, #72]	@ (8000828 <HAL_MspInit+0x54>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007e2:	4a11      	ldr	r2, [pc, #68]	@ (8000828 <HAL_MspInit+0x54>)
 80007e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80007ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <HAL_MspInit+0x54>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000828 <HAL_MspInit+0x54>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000828 <HAL_MspInit+0x54>)
 8000800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000804:	6413      	str	r3, [r2, #64]	@ 0x40
 8000806:	4b08      	ldr	r3, [pc, #32]	@ (8000828 <HAL_MspInit+0x54>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	210f      	movs	r1, #15
 8000816:	f06f 0001 	mvn.w	r0, #1
 800081a:	f000 fb09 	bl	8000e30 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800

0800082c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08c      	sub	sp, #48	@ 0x30
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000834:	2300      	movs	r3, #0
 8000836:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 800083c:	2300      	movs	r3, #0
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	4b2e      	ldr	r3, [pc, #184]	@ (80008fc <HAL_InitTick+0xd0>)
 8000842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000844:	4a2d      	ldr	r2, [pc, #180]	@ (80008fc <HAL_InitTick+0xd0>)
 8000846:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800084a:	6453      	str	r3, [r2, #68]	@ 0x44
 800084c:	4b2b      	ldr	r3, [pc, #172]	@ (80008fc <HAL_InitTick+0xd0>)
 800084e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000850:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000858:	f107 020c 	add.w	r2, r7, #12
 800085c:	f107 0310 	add.w	r3, r7, #16
 8000860:	4611      	mov	r1, r2
 8000862:	4618      	mov	r0, r3
 8000864:	f001 f996 	bl	8001b94 <HAL_RCC_GetClockConfig>
  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000868:	f001 f980 	bl	8001b6c <HAL_RCC_GetPCLK2Freq>
 800086c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800086e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000870:	4a23      	ldr	r2, [pc, #140]	@ (8000900 <HAL_InitTick+0xd4>)
 8000872:	fba2 2303 	umull	r2, r3, r2, r3
 8000876:	0c9b      	lsrs	r3, r3, #18
 8000878:	3b01      	subs	r3, #1
 800087a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 800087c:	4b21      	ldr	r3, [pc, #132]	@ (8000904 <HAL_InitTick+0xd8>)
 800087e:	4a22      	ldr	r2, [pc, #136]	@ (8000908 <HAL_InitTick+0xdc>)
 8000880:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000882:	4b20      	ldr	r3, [pc, #128]	@ (8000904 <HAL_InitTick+0xd8>)
 8000884:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000888:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800088a:	4a1e      	ldr	r2, [pc, #120]	@ (8000904 <HAL_InitTick+0xd8>)
 800088c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800088e:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000890:	4b1c      	ldr	r3, [pc, #112]	@ (8000904 <HAL_InitTick+0xd8>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000896:	4b1b      	ldr	r3, [pc, #108]	@ (8000904 <HAL_InitTick+0xd8>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800089c:	4b19      	ldr	r3, [pc, #100]	@ (8000904 <HAL_InitTick+0xd8>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 80008a2:	4818      	ldr	r0, [pc, #96]	@ (8000904 <HAL_InitTick+0xd8>)
 80008a4:	f001 f9a8 	bl	8001bf8 <HAL_TIM_Base_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80008ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d11b      	bne.n	80008ee <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 80008b6:	4813      	ldr	r0, [pc, #76]	@ (8000904 <HAL_InitTick+0xd8>)
 80008b8:	f001 f9f8 	bl	8001cac <HAL_TIM_Base_Start_IT>
 80008bc:	4603      	mov	r3, r0
 80008be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80008c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d111      	bne.n	80008ee <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80008ca:	2019      	movs	r0, #25
 80008cc:	f000 facc 	bl	8000e68 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2b0f      	cmp	r3, #15
 80008d4:	d808      	bhi.n	80008e8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80008d6:	2200      	movs	r2, #0
 80008d8:	6879      	ldr	r1, [r7, #4]
 80008da:	2019      	movs	r0, #25
 80008dc:	f000 faa8 	bl	8000e30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008e0:	4a0a      	ldr	r2, [pc, #40]	@ (800090c <HAL_InitTick+0xe0>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6013      	str	r3, [r2, #0]
 80008e6:	e002      	b.n	80008ee <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80008e8:	2301      	movs	r3, #1
 80008ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80008ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3730      	adds	r7, #48	@ 0x30
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800
 8000900:	431bde83 	.word	0x431bde83
 8000904:	20000090 	.word	0x20000090
 8000908:	40014400 	.word	0x40014400
 800090c:	20000004 	.word	0x20000004

08000910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <NMI_Handler+0x4>

08000918 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <HardFault_Handler+0x4>

08000920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <MemManage_Handler+0x4>

08000928 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <BusFault_Handler+0x4>

08000930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <UsageFault_Handler+0x4>

08000938 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
	...

08000948 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800094c:	4802      	ldr	r0, [pc, #8]	@ (8000958 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800094e:	f001 fa5e 	bl	8001e0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000090 	.word	0x20000090

0800095c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000960:	4802      	ldr	r0, [pc, #8]	@ (800096c <USART1_IRQHandler+0x10>)
 8000962:	f001 ffb1 	bl	80028c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000120 	.word	0x20000120

08000970 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000974:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <SystemInit+0x20>)
 8000976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800097a:	4a05      	ldr	r2, [pc, #20]	@ (8000990 <SystemInit+0x20>)
 800097c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000980:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	@ 0x28
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800099a:	f107 0320 	add.w	r3, r7, #32
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]
 80009b2:	615a      	str	r2, [r3, #20]
 80009b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009b6:	4b22      	ldr	r3, [pc, #136]	@ (8000a40 <MX_TIM2_Init+0xac>)
 80009b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 62-1;
 80009be:	4b20      	ldr	r3, [pc, #128]	@ (8000a40 <MX_TIM2_Init+0xac>)
 80009c0:	223d      	movs	r2, #61	@ 0x3d
 80009c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a40 <MX_TIM2_Init+0xac>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255-1;
 80009ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000a40 <MX_TIM2_Init+0xac>)
 80009cc:	22fe      	movs	r2, #254	@ 0xfe
 80009ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a40 <MX_TIM2_Init+0xac>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a40 <MX_TIM2_Init+0xac>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009dc:	4818      	ldr	r0, [pc, #96]	@ (8000a40 <MX_TIM2_Init+0xac>)
 80009de:	f001 f9c7 	bl	8001d70 <HAL_TIM_PWM_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80009e8:	f7ff feee 	bl	80007c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ec:	2300      	movs	r3, #0
 80009ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009f4:	f107 0320 	add.w	r3, r7, #32
 80009f8:	4619      	mov	r1, r3
 80009fa:	4811      	ldr	r0, [pc, #68]	@ (8000a40 <MX_TIM2_Init+0xac>)
 80009fc:	f001 fdfa 	bl	80025f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8000a06:	f7ff fedf 	bl	80007c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a0a:	2360      	movs	r3, #96	@ 0x60
 8000a0c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	2208      	movs	r2, #8
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4807      	ldr	r0, [pc, #28]	@ (8000a40 <MX_TIM2_Init+0xac>)
 8000a22:	f001 fae5 	bl	8001ff0 <HAL_TIM_PWM_ConfigChannel>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000a2c:	f7ff fecc 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a30:	4803      	ldr	r0, [pc, #12]	@ (8000a40 <MX_TIM2_Init+0xac>)
 8000a32:	f000 f827 	bl	8000a84 <HAL_TIM_MspPostInit>

}
 8000a36:	bf00      	nop
 8000a38:	3728      	adds	r7, #40	@ 0x28
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200000d8 	.word	0x200000d8

08000a44 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a54:	d10d      	bne.n	8000a72 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5e:	4a08      	ldr	r2, [pc, #32]	@ (8000a80 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a66:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000a72:	bf00      	nop
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800

08000a84 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000aa4:	d11d      	bne.n	8000ae2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60bb      	str	r3, [r7, #8]
 8000aaa:	4b10      	ldr	r3, [pc, #64]	@ (8000aec <HAL_TIM_MspPostInit+0x68>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	4a0f      	ldr	r2, [pc, #60]	@ (8000aec <HAL_TIM_MspPostInit+0x68>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8000aec <HAL_TIM_MspPostInit+0x68>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ac2:	2304      	movs	r3, #4
 8000ac4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad6:	f107 030c 	add.w	r3, r7, #12
 8000ada:	4619      	mov	r1, r3
 8000adc:	4804      	ldr	r0, [pc, #16]	@ (8000af0 <HAL_TIM_MspPostInit+0x6c>)
 8000ade:	f000 fa63 	bl	8000fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ae2:	bf00      	nop
 8000ae4:	3720      	adds	r7, #32
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40020000 	.word	0x40020000

08000af4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000af8:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <MX_USART1_UART_Init+0x4c>)
 8000afa:	4a12      	ldr	r2, [pc, #72]	@ (8000b44 <MX_USART1_UART_Init+0x50>)
 8000afc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000afe:	4b10      	ldr	r3, [pc, #64]	@ (8000b40 <MX_USART1_UART_Init+0x4c>)
 8000b00:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000b04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	@ (8000b40 <MX_USART1_UART_Init+0x4c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b40 <MX_USART1_UART_Init+0x4c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	@ (8000b40 <MX_USART1_UART_Init+0x4c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b18:	4b09      	ldr	r3, [pc, #36]	@ (8000b40 <MX_USART1_UART_Init+0x4c>)
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1e:	4b08      	ldr	r3, [pc, #32]	@ (8000b40 <MX_USART1_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b24:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <MX_USART1_UART_Init+0x4c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b2a:	4805      	ldr	r0, [pc, #20]	@ (8000b40 <MX_USART1_UART_Init+0x4c>)
 8000b2c:	f001 fde4 	bl	80026f8 <HAL_UART_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b36:	f7ff fe47 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000120 	.word	0x20000120
 8000b44:	40011000 	.word	0x40011000

08000b48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	@ 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a1d      	ldr	r2, [pc, #116]	@ (8000bdc <HAL_UART_MspInit+0x94>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d134      	bne.n	8000bd4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000be0 <HAL_UART_MspInit+0x98>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b72:	4a1b      	ldr	r2, [pc, #108]	@ (8000be0 <HAL_UART_MspInit+0x98>)
 8000b74:	f043 0310 	orr.w	r3, r3, #16
 8000b78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b7a:	4b19      	ldr	r3, [pc, #100]	@ (8000be0 <HAL_UART_MspInit+0x98>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b7e:	f003 0310 	and.w	r3, r3, #16
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b15      	ldr	r3, [pc, #84]	@ (8000be0 <HAL_UART_MspInit+0x98>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	4a14      	ldr	r2, [pc, #80]	@ (8000be0 <HAL_UART_MspInit+0x98>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b96:	4b12      	ldr	r3, [pc, #72]	@ (8000be0 <HAL_UART_MspInit+0x98>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ba2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bb4:	2307      	movs	r3, #7
 8000bb6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4809      	ldr	r0, [pc, #36]	@ (8000be4 <HAL_UART_MspInit+0x9c>)
 8000bc0:	f000 f9f2 	bl	8000fa8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2105      	movs	r1, #5
 8000bc8:	2025      	movs	r0, #37	@ 0x25
 8000bca:	f000 f931 	bl	8000e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bce:	2025      	movs	r0, #37	@ 0x25
 8000bd0:	f000 f94a 	bl	8000e68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000bd4:	bf00      	nop
 8000bd6:	3728      	adds	r7, #40	@ 0x28
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40011000 	.word	0x40011000
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40020000 	.word	0x40020000

08000be8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000be8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c20 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bec:	f7ff fec0 	bl	8000970 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bf0:	480c      	ldr	r0, [pc, #48]	@ (8000c24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bf2:	490d      	ldr	r1, [pc, #52]	@ (8000c28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf8:	e002      	b.n	8000c00 <LoopCopyDataInit>

08000bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfe:	3304      	adds	r3, #4

08000c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c04:	d3f9      	bcc.n	8000bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c06:	4a0a      	ldr	r2, [pc, #40]	@ (8000c30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c08:	4c0a      	ldr	r4, [pc, #40]	@ (8000c34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c0c:	e001      	b.n	8000c12 <LoopFillZerobss>

08000c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c10:	3204      	adds	r2, #4

08000c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c14:	d3fb      	bcc.n	8000c0e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000c16:	f005 fbcd 	bl	80063b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c1a:	f7ff fd4f 	bl	80006bc <main>
  bx  lr    
 8000c1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c20:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c28:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c2c:	080065ac 	.word	0x080065ac
  ldr r2, =_sbss
 8000c30:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c34:	20004c94 	.word	0x20004c94

08000c38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c38:	e7fe      	b.n	8000c38 <ADC_IRQHandler>
	...

08000c3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c40:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <HAL_Init+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0d      	ldr	r2, [pc, #52]	@ (8000c7c <HAL_Init+0x40>)
 8000c46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c7c <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a0a      	ldr	r2, [pc, #40]	@ (8000c7c <HAL_Init+0x40>)
 8000c52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c58:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <HAL_Init+0x40>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a07      	ldr	r2, [pc, #28]	@ (8000c7c <HAL_Init+0x40>)
 8000c5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c64:	2003      	movs	r0, #3
 8000c66:	f000 f8d8 	bl	8000e1a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c6a:	200f      	movs	r0, #15
 8000c6c:	f7ff fdde 	bl	800082c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c70:	f7ff fdb0 	bl	80007d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40023c00 	.word	0x40023c00

08000c80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c84:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <HAL_IncTick+0x20>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <HAL_IncTick+0x24>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4413      	add	r3, r2
 8000c90:	4a04      	ldr	r2, [pc, #16]	@ (8000ca4 <HAL_IncTick+0x24>)
 8000c92:	6013      	str	r3, [r2, #0]
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	20000168 	.word	0x20000168

08000ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cac:	4b03      	ldr	r3, [pc, #12]	@ (8000cbc <HAL_GetTick+0x14>)
 8000cae:	681b      	ldr	r3, [r3, #0]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000168 	.word	0x20000168

08000cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf2:	4a04      	ldr	r2, [pc, #16]	@ (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	60d3      	str	r3, [r2, #12]
}
 8000cf8:	bf00      	nop
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d0c:	4b04      	ldr	r3, [pc, #16]	@ (8000d20 <__NVIC_GetPriorityGrouping+0x18>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	0a1b      	lsrs	r3, r3, #8
 8000d12:	f003 0307 	and.w	r3, r3, #7
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	db0b      	blt.n	8000d4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	f003 021f 	and.w	r2, r3, #31
 8000d3c:	4907      	ldr	r1, [pc, #28]	@ (8000d5c <__NVIC_EnableIRQ+0x38>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	095b      	lsrs	r3, r3, #5
 8000d44:	2001      	movs	r0, #1
 8000d46:	fa00 f202 	lsl.w	r2, r0, r2
 8000d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000e100 	.word	0xe000e100

08000d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	db0a      	blt.n	8000d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	490c      	ldr	r1, [pc, #48]	@ (8000dac <__NVIC_SetPriority+0x4c>)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	0112      	lsls	r2, r2, #4
 8000d80:	b2d2      	uxtb	r2, r2
 8000d82:	440b      	add	r3, r1
 8000d84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d88:	e00a      	b.n	8000da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4908      	ldr	r1, [pc, #32]	@ (8000db0 <__NVIC_SetPriority+0x50>)
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	f003 030f 	and.w	r3, r3, #15
 8000d96:	3b04      	subs	r3, #4
 8000d98:	0112      	lsls	r2, r2, #4
 8000d9a:	b2d2      	uxtb	r2, r2
 8000d9c:	440b      	add	r3, r1
 8000d9e:	761a      	strb	r2, [r3, #24]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000e100 	.word	0xe000e100
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b089      	sub	sp, #36	@ 0x24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f1c3 0307 	rsb	r3, r3, #7
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	bf28      	it	cs
 8000dd2:	2304      	movcs	r3, #4
 8000dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3304      	adds	r3, #4
 8000dda:	2b06      	cmp	r3, #6
 8000ddc:	d902      	bls.n	8000de4 <NVIC_EncodePriority+0x30>
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3b03      	subs	r3, #3
 8000de2:	e000      	b.n	8000de6 <NVIC_EncodePriority+0x32>
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43da      	mvns	r2, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	401a      	ands	r2, r3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	fa01 f303 	lsl.w	r3, r1, r3
 8000e06:	43d9      	mvns	r1, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	4313      	orrs	r3, r2
         );
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3724      	adds	r7, #36	@ 0x24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff ff4c 	bl	8000cc0 <__NVIC_SetPriorityGrouping>
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
 8000e3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e42:	f7ff ff61 	bl	8000d08 <__NVIC_GetPriorityGrouping>
 8000e46:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	68b9      	ldr	r1, [r7, #8]
 8000e4c:	6978      	ldr	r0, [r7, #20]
 8000e4e:	f7ff ffb1 	bl	8000db4 <NVIC_EncodePriority>
 8000e52:	4602      	mov	r2, r0
 8000e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e58:	4611      	mov	r1, r2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff ff80 	bl	8000d60 <__NVIC_SetPriority>
}
 8000e60:	bf00      	nop
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff ff54 	bl	8000d24 <__NVIC_EnableIRQ>
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e90:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e92:	f7ff ff09 	bl	8000ca8 <HAL_GetTick>
 8000e96:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d008      	beq.n	8000eb6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2280      	movs	r2, #128	@ 0x80
 8000ea8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e052      	b.n	8000f5c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f022 0216 	bic.w	r2, r2, #22
 8000ec4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	695a      	ldr	r2, [r3, #20]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000ed4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d103      	bne.n	8000ee6 <HAL_DMA_Abort+0x62>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d007      	beq.n	8000ef6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f022 0208 	bic.w	r2, r2, #8
 8000ef4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f022 0201 	bic.w	r2, r2, #1
 8000f04:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f06:	e013      	b.n	8000f30 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f08:	f7ff fece 	bl	8000ca8 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	2b05      	cmp	r3, #5
 8000f14:	d90c      	bls.n	8000f30 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2220      	movs	r2, #32
 8000f1a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2203      	movs	r2, #3
 8000f20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e015      	b.n	8000f5c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d1e4      	bne.n	8000f08 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f42:	223f      	movs	r2, #63	@ 0x3f
 8000f44:	409a      	lsls	r2, r3
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000f5a:	2300      	movs	r3, #0
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d004      	beq.n	8000f82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2280      	movs	r2, #128	@ 0x80
 8000f7c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e00c      	b.n	8000f9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2205      	movs	r2, #5
 8000f86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f022 0201 	bic.w	r2, r2, #1
 8000f98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b089      	sub	sp, #36	@ 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
 8000fc2:	e159      	b.n	8001278 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	f040 8148 	bne.w	8001272 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d005      	beq.n	8000ffa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d130      	bne.n	800105c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	2203      	movs	r2, #3
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43db      	mvns	r3, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4013      	ands	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	68da      	ldr	r2, [r3, #12]
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4313      	orrs	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001030:	2201      	movs	r2, #1
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	091b      	lsrs	r3, r3, #4
 8001046:	f003 0201 	and.w	r2, r3, #1
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	2b03      	cmp	r3, #3
 8001066:	d017      	beq.n	8001098 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	2203      	movs	r2, #3
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	689a      	ldr	r2, [r3, #8]
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d123      	bne.n	80010ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	08da      	lsrs	r2, r3, #3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3208      	adds	r2, #8
 80010ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	f003 0307 	and.w	r3, r3, #7
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	220f      	movs	r2, #15
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	691a      	ldr	r2, [r3, #16]
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	08da      	lsrs	r2, r3, #3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3208      	adds	r2, #8
 80010e6:	69b9      	ldr	r1, [r7, #24]
 80010e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	2203      	movs	r2, #3
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 0203 	and.w	r2, r3, #3
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001128:	2b00      	cmp	r3, #0
 800112a:	f000 80a2 	beq.w	8001272 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	4b57      	ldr	r3, [pc, #348]	@ (8001290 <HAL_GPIO_Init+0x2e8>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001136:	4a56      	ldr	r2, [pc, #344]	@ (8001290 <HAL_GPIO_Init+0x2e8>)
 8001138:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800113c:	6453      	str	r3, [r2, #68]	@ 0x44
 800113e:	4b54      	ldr	r3, [pc, #336]	@ (8001290 <HAL_GPIO_Init+0x2e8>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001142:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800114a:	4a52      	ldr	r2, [pc, #328]	@ (8001294 <HAL_GPIO_Init+0x2ec>)
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	089b      	lsrs	r3, r3, #2
 8001150:	3302      	adds	r3, #2
 8001152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	f003 0303 	and.w	r3, r3, #3
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	220f      	movs	r2, #15
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4013      	ands	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a49      	ldr	r2, [pc, #292]	@ (8001298 <HAL_GPIO_Init+0x2f0>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d019      	beq.n	80011aa <HAL_GPIO_Init+0x202>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a48      	ldr	r2, [pc, #288]	@ (800129c <HAL_GPIO_Init+0x2f4>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d013      	beq.n	80011a6 <HAL_GPIO_Init+0x1fe>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a47      	ldr	r2, [pc, #284]	@ (80012a0 <HAL_GPIO_Init+0x2f8>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d00d      	beq.n	80011a2 <HAL_GPIO_Init+0x1fa>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a46      	ldr	r2, [pc, #280]	@ (80012a4 <HAL_GPIO_Init+0x2fc>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d007      	beq.n	800119e <HAL_GPIO_Init+0x1f6>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a45      	ldr	r2, [pc, #276]	@ (80012a8 <HAL_GPIO_Init+0x300>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d101      	bne.n	800119a <HAL_GPIO_Init+0x1f2>
 8001196:	2304      	movs	r3, #4
 8001198:	e008      	b.n	80011ac <HAL_GPIO_Init+0x204>
 800119a:	2307      	movs	r3, #7
 800119c:	e006      	b.n	80011ac <HAL_GPIO_Init+0x204>
 800119e:	2303      	movs	r3, #3
 80011a0:	e004      	b.n	80011ac <HAL_GPIO_Init+0x204>
 80011a2:	2302      	movs	r3, #2
 80011a4:	e002      	b.n	80011ac <HAL_GPIO_Init+0x204>
 80011a6:	2301      	movs	r3, #1
 80011a8:	e000      	b.n	80011ac <HAL_GPIO_Init+0x204>
 80011aa:	2300      	movs	r3, #0
 80011ac:	69fa      	ldr	r2, [r7, #28]
 80011ae:	f002 0203 	and.w	r2, r2, #3
 80011b2:	0092      	lsls	r2, r2, #2
 80011b4:	4093      	lsls	r3, r2
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011bc:	4935      	ldr	r1, [pc, #212]	@ (8001294 <HAL_GPIO_Init+0x2ec>)
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	089b      	lsrs	r3, r3, #2
 80011c2:	3302      	adds	r3, #2
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ca:	4b38      	ldr	r3, [pc, #224]	@ (80012ac <HAL_GPIO_Init+0x304>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ee:	4a2f      	ldr	r2, [pc, #188]	@ (80012ac <HAL_GPIO_Init+0x304>)
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011f4:	4b2d      	ldr	r3, [pc, #180]	@ (80012ac <HAL_GPIO_Init+0x304>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001218:	4a24      	ldr	r2, [pc, #144]	@ (80012ac <HAL_GPIO_Init+0x304>)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800121e:	4b23      	ldr	r3, [pc, #140]	@ (80012ac <HAL_GPIO_Init+0x304>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	43db      	mvns	r3, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4013      	ands	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001242:	4a1a      	ldr	r2, [pc, #104]	@ (80012ac <HAL_GPIO_Init+0x304>)
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001248:	4b18      	ldr	r3, [pc, #96]	@ (80012ac <HAL_GPIO_Init+0x304>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d003      	beq.n	800126c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800126c:	4a0f      	ldr	r2, [pc, #60]	@ (80012ac <HAL_GPIO_Init+0x304>)
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3301      	adds	r3, #1
 8001276:	61fb      	str	r3, [r7, #28]
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	2b0f      	cmp	r3, #15
 800127c:	f67f aea2 	bls.w	8000fc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001280:	bf00      	nop
 8001282:	bf00      	nop
 8001284:	3724      	adds	r7, #36	@ 0x24
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	40023800 	.word	0x40023800
 8001294:	40013800 	.word	0x40013800
 8001298:	40020000 	.word	0x40020000
 800129c:	40020400 	.word	0x40020400
 80012a0:	40020800 	.word	0x40020800
 80012a4:	40020c00 	.word	0x40020c00
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40013c00 	.word	0x40013c00

080012b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	807b      	strh	r3, [r7, #2]
 80012bc:	4613      	mov	r3, r2
 80012be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012c0:	787b      	ldrb	r3, [r7, #1]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012c6:	887a      	ldrh	r2, [r7, #2]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012cc:	e003      	b.n	80012d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ce:	887b      	ldrh	r3, [r7, #2]
 80012d0:	041a      	lsls	r2, r3, #16
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	619a      	str	r2, [r3, #24]
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
	...

080012e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e267      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d075      	beq.n	80013ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001302:	4b88      	ldr	r3, [pc, #544]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f003 030c 	and.w	r3, r3, #12
 800130a:	2b04      	cmp	r3, #4
 800130c:	d00c      	beq.n	8001328 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800130e:	4b85      	ldr	r3, [pc, #532]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001316:	2b08      	cmp	r3, #8
 8001318:	d112      	bne.n	8001340 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800131a:	4b82      	ldr	r3, [pc, #520]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001322:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001326:	d10b      	bne.n	8001340 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001328:	4b7e      	ldr	r3, [pc, #504]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d05b      	beq.n	80013ec <HAL_RCC_OscConfig+0x108>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d157      	bne.n	80013ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e242      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001348:	d106      	bne.n	8001358 <HAL_RCC_OscConfig+0x74>
 800134a:	4b76      	ldr	r3, [pc, #472]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a75      	ldr	r2, [pc, #468]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 8001350:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	e01d      	b.n	8001394 <HAL_RCC_OscConfig+0xb0>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001360:	d10c      	bne.n	800137c <HAL_RCC_OscConfig+0x98>
 8001362:	4b70      	ldr	r3, [pc, #448]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a6f      	ldr	r2, [pc, #444]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 8001368:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	4b6d      	ldr	r3, [pc, #436]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a6c      	ldr	r2, [pc, #432]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 8001374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001378:	6013      	str	r3, [r2, #0]
 800137a:	e00b      	b.n	8001394 <HAL_RCC_OscConfig+0xb0>
 800137c:	4b69      	ldr	r3, [pc, #420]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a68      	ldr	r2, [pc, #416]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 8001382:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001386:	6013      	str	r3, [r2, #0]
 8001388:	4b66      	ldr	r3, [pc, #408]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a65      	ldr	r2, [pc, #404]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 800138e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d013      	beq.n	80013c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139c:	f7ff fc84 	bl	8000ca8 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a4:	f7ff fc80 	bl	8000ca8 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b64      	cmp	r3, #100	@ 0x64
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e207      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b6:	4b5b      	ldr	r3, [pc, #364]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0f0      	beq.n	80013a4 <HAL_RCC_OscConfig+0xc0>
 80013c2:	e014      	b.n	80013ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c4:	f7ff fc70 	bl	8000ca8 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013cc:	f7ff fc6c 	bl	8000ca8 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b64      	cmp	r3, #100	@ 0x64
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e1f3      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013de:	4b51      	ldr	r3, [pc, #324]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1f0      	bne.n	80013cc <HAL_RCC_OscConfig+0xe8>
 80013ea:	e000      	b.n	80013ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d063      	beq.n	80014c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013fa:	4b4a      	ldr	r3, [pc, #296]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 030c 	and.w	r3, r3, #12
 8001402:	2b00      	cmp	r3, #0
 8001404:	d00b      	beq.n	800141e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001406:	4b47      	ldr	r3, [pc, #284]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800140e:	2b08      	cmp	r3, #8
 8001410:	d11c      	bne.n	800144c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001412:	4b44      	ldr	r3, [pc, #272]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d116      	bne.n	800144c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800141e:	4b41      	ldr	r3, [pc, #260]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d005      	beq.n	8001436 <HAL_RCC_OscConfig+0x152>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d001      	beq.n	8001436 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e1c7      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001436:	4b3b      	ldr	r3, [pc, #236]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	4937      	ldr	r1, [pc, #220]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 8001446:	4313      	orrs	r3, r2
 8001448:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800144a:	e03a      	b.n	80014c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d020      	beq.n	8001496 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001454:	4b34      	ldr	r3, [pc, #208]	@ (8001528 <HAL_RCC_OscConfig+0x244>)
 8001456:	2201      	movs	r2, #1
 8001458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145a:	f7ff fc25 	bl	8000ca8 <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001460:	e008      	b.n	8001474 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001462:	f7ff fc21 	bl	8000ca8 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d901      	bls.n	8001474 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e1a8      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001474:	4b2b      	ldr	r3, [pc, #172]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d0f0      	beq.n	8001462 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001480:	4b28      	ldr	r3, [pc, #160]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	4925      	ldr	r1, [pc, #148]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 8001490:	4313      	orrs	r3, r2
 8001492:	600b      	str	r3, [r1, #0]
 8001494:	e015      	b.n	80014c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001496:	4b24      	ldr	r3, [pc, #144]	@ (8001528 <HAL_RCC_OscConfig+0x244>)
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149c:	f7ff fc04 	bl	8000ca8 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014a4:	f7ff fc00 	bl	8000ca8 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e187      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1f0      	bne.n	80014a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0308 	and.w	r3, r3, #8
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d036      	beq.n	800153c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d016      	beq.n	8001504 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014d6:	4b15      	ldr	r3, [pc, #84]	@ (800152c <HAL_RCC_OscConfig+0x248>)
 80014d8:	2201      	movs	r2, #1
 80014da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014dc:	f7ff fbe4 	bl	8000ca8 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014e4:	f7ff fbe0 	bl	8000ca8 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e167      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 80014f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d0f0      	beq.n	80014e4 <HAL_RCC_OscConfig+0x200>
 8001502:	e01b      	b.n	800153c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001504:	4b09      	ldr	r3, [pc, #36]	@ (800152c <HAL_RCC_OscConfig+0x248>)
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800150a:	f7ff fbcd 	bl	8000ca8 <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001510:	e00e      	b.n	8001530 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001512:	f7ff fbc9 	bl	8000ca8 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d907      	bls.n	8001530 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e150      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
 8001524:	40023800 	.word	0x40023800
 8001528:	42470000 	.word	0x42470000
 800152c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001530:	4b88      	ldr	r3, [pc, #544]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 8001532:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1ea      	bne.n	8001512 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	2b00      	cmp	r3, #0
 8001546:	f000 8097 	beq.w	8001678 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800154a:	2300      	movs	r3, #0
 800154c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800154e:	4b81      	ldr	r3, [pc, #516]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d10f      	bne.n	800157a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	4b7d      	ldr	r3, [pc, #500]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001562:	4a7c      	ldr	r2, [pc, #496]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 8001564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001568:	6413      	str	r3, [r2, #64]	@ 0x40
 800156a:	4b7a      	ldr	r3, [pc, #488]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001576:	2301      	movs	r3, #1
 8001578:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157a:	4b77      	ldr	r3, [pc, #476]	@ (8001758 <HAL_RCC_OscConfig+0x474>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001582:	2b00      	cmp	r3, #0
 8001584:	d118      	bne.n	80015b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001586:	4b74      	ldr	r3, [pc, #464]	@ (8001758 <HAL_RCC_OscConfig+0x474>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a73      	ldr	r2, [pc, #460]	@ (8001758 <HAL_RCC_OscConfig+0x474>)
 800158c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001592:	f7ff fb89 	bl	8000ca8 <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800159a:	f7ff fb85 	bl	8000ca8 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e10c      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ac:	4b6a      	ldr	r3, [pc, #424]	@ (8001758 <HAL_RCC_OscConfig+0x474>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0f0      	beq.n	800159a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d106      	bne.n	80015ce <HAL_RCC_OscConfig+0x2ea>
 80015c0:	4b64      	ldr	r3, [pc, #400]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 80015c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015c4:	4a63      	ldr	r2, [pc, #396]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80015cc:	e01c      	b.n	8001608 <HAL_RCC_OscConfig+0x324>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	2b05      	cmp	r3, #5
 80015d4:	d10c      	bne.n	80015f0 <HAL_RCC_OscConfig+0x30c>
 80015d6:	4b5f      	ldr	r3, [pc, #380]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 80015d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015da:	4a5e      	ldr	r2, [pc, #376]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 80015dc:	f043 0304 	orr.w	r3, r3, #4
 80015e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80015e2:	4b5c      	ldr	r3, [pc, #368]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 80015e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015e6:	4a5b      	ldr	r2, [pc, #364]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80015ee:	e00b      	b.n	8001608 <HAL_RCC_OscConfig+0x324>
 80015f0:	4b58      	ldr	r3, [pc, #352]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 80015f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015f4:	4a57      	ldr	r2, [pc, #348]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 80015f6:	f023 0301 	bic.w	r3, r3, #1
 80015fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80015fc:	4b55      	ldr	r3, [pc, #340]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 80015fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001600:	4a54      	ldr	r2, [pc, #336]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 8001602:	f023 0304 	bic.w	r3, r3, #4
 8001606:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d015      	beq.n	800163c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001610:	f7ff fb4a 	bl	8000ca8 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001616:	e00a      	b.n	800162e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001618:	f7ff fb46 	bl	8000ca8 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001626:	4293      	cmp	r3, r2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e0cb      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800162e:	4b49      	ldr	r3, [pc, #292]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 8001630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0ee      	beq.n	8001618 <HAL_RCC_OscConfig+0x334>
 800163a:	e014      	b.n	8001666 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163c:	f7ff fb34 	bl	8000ca8 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001642:	e00a      	b.n	800165a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001644:	f7ff fb30 	bl	8000ca8 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001652:	4293      	cmp	r3, r2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e0b5      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800165a:	4b3e      	ldr	r3, [pc, #248]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 800165c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1ee      	bne.n	8001644 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001666:	7dfb      	ldrb	r3, [r7, #23]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d105      	bne.n	8001678 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800166c:	4b39      	ldr	r3, [pc, #228]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 800166e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001670:	4a38      	ldr	r2, [pc, #224]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 8001672:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001676:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 80a1 	beq.w	80017c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001682:	4b34      	ldr	r3, [pc, #208]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 030c 	and.w	r3, r3, #12
 800168a:	2b08      	cmp	r3, #8
 800168c:	d05c      	beq.n	8001748 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	2b02      	cmp	r3, #2
 8001694:	d141      	bne.n	800171a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001696:	4b31      	ldr	r3, [pc, #196]	@ (800175c <HAL_RCC_OscConfig+0x478>)
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169c:	f7ff fb04 	bl	8000ca8 <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a4:	f7ff fb00 	bl	8000ca8 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e087      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b6:	4b27      	ldr	r3, [pc, #156]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1f0      	bne.n	80016a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69da      	ldr	r2, [r3, #28]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a1b      	ldr	r3, [r3, #32]
 80016ca:	431a      	orrs	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d0:	019b      	lsls	r3, r3, #6
 80016d2:	431a      	orrs	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016d8:	085b      	lsrs	r3, r3, #1
 80016da:	3b01      	subs	r3, #1
 80016dc:	041b      	lsls	r3, r3, #16
 80016de:	431a      	orrs	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016e4:	061b      	lsls	r3, r3, #24
 80016e6:	491b      	ldr	r1, [pc, #108]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ec:	4b1b      	ldr	r3, [pc, #108]	@ (800175c <HAL_RCC_OscConfig+0x478>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f2:	f7ff fad9 	bl	8000ca8 <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016fa:	f7ff fad5 	bl	8000ca8 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e05c      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800170c:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0f0      	beq.n	80016fa <HAL_RCC_OscConfig+0x416>
 8001718:	e054      	b.n	80017c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800171a:	4b10      	ldr	r3, [pc, #64]	@ (800175c <HAL_RCC_OscConfig+0x478>)
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001720:	f7ff fac2 	bl	8000ca8 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001728:	f7ff fabe 	bl	8000ca8 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e045      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800173a:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f0      	bne.n	8001728 <HAL_RCC_OscConfig+0x444>
 8001746:	e03d      	b.n	80017c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d107      	bne.n	8001760 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e038      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
 8001754:	40023800 	.word	0x40023800
 8001758:	40007000 	.word	0x40007000
 800175c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001760:	4b1b      	ldr	r3, [pc, #108]	@ (80017d0 <HAL_RCC_OscConfig+0x4ec>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d028      	beq.n	80017c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001778:	429a      	cmp	r2, r3
 800177a:	d121      	bne.n	80017c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001786:	429a      	cmp	r2, r3
 8001788:	d11a      	bne.n	80017c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001790:	4013      	ands	r3, r2
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001796:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001798:	4293      	cmp	r3, r2
 800179a:	d111      	bne.n	80017c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a6:	085b      	lsrs	r3, r3, #1
 80017a8:	3b01      	subs	r3, #1
 80017aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d107      	bne.n	80017c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017bc:	429a      	cmp	r2, r3
 80017be:	d001      	beq.n	80017c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e000      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40023800 	.word	0x40023800

080017d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0cc      	b.n	8001982 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017e8:	4b68      	ldr	r3, [pc, #416]	@ (800198c <HAL_RCC_ClockConfig+0x1b8>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d90c      	bls.n	8001810 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f6:	4b65      	ldr	r3, [pc, #404]	@ (800198c <HAL_RCC_ClockConfig+0x1b8>)
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fe:	4b63      	ldr	r3, [pc, #396]	@ (800198c <HAL_RCC_ClockConfig+0x1b8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d001      	beq.n	8001810 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e0b8      	b.n	8001982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d020      	beq.n	800185e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	2b00      	cmp	r3, #0
 8001826:	d005      	beq.n	8001834 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001828:	4b59      	ldr	r3, [pc, #356]	@ (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	4a58      	ldr	r2, [pc, #352]	@ (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001832:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0308 	and.w	r3, r3, #8
 800183c:	2b00      	cmp	r3, #0
 800183e:	d005      	beq.n	800184c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001840:	4b53      	ldr	r3, [pc, #332]	@ (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	4a52      	ldr	r2, [pc, #328]	@ (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800184a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800184c:	4b50      	ldr	r3, [pc, #320]	@ (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	494d      	ldr	r1, [pc, #308]	@ (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	4313      	orrs	r3, r2
 800185c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	2b00      	cmp	r3, #0
 8001868:	d044      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d107      	bne.n	8001882 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001872:	4b47      	ldr	r3, [pc, #284]	@ (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d119      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e07f      	b.n	8001982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b02      	cmp	r3, #2
 8001888:	d003      	beq.n	8001892 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800188e:	2b03      	cmp	r3, #3
 8001890:	d107      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001892:	4b3f      	ldr	r3, [pc, #252]	@ (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d109      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e06f      	b.n	8001982 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e067      	b.n	8001982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018b2:	4b37      	ldr	r3, [pc, #220]	@ (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f023 0203 	bic.w	r2, r3, #3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	4934      	ldr	r1, [pc, #208]	@ (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018c4:	f7ff f9f0 	bl	8000ca8 <HAL_GetTick>
 80018c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ca:	e00a      	b.n	80018e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018cc:	f7ff f9ec 	bl	8000ca8 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018da:	4293      	cmp	r3, r2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e04f      	b.n	8001982 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 020c 	and.w	r2, r3, #12
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d1eb      	bne.n	80018cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018f4:	4b25      	ldr	r3, [pc, #148]	@ (800198c <HAL_RCC_ClockConfig+0x1b8>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d20c      	bcs.n	800191c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001902:	4b22      	ldr	r3, [pc, #136]	@ (800198c <HAL_RCC_ClockConfig+0x1b8>)
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800190a:	4b20      	ldr	r3, [pc, #128]	@ (800198c <HAL_RCC_ClockConfig+0x1b8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	429a      	cmp	r2, r3
 8001916:	d001      	beq.n	800191c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e032      	b.n	8001982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	d008      	beq.n	800193a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001928:	4b19      	ldr	r3, [pc, #100]	@ (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	4916      	ldr	r1, [pc, #88]	@ (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	4313      	orrs	r3, r2
 8001938:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0308 	and.w	r3, r3, #8
 8001942:	2b00      	cmp	r3, #0
 8001944:	d009      	beq.n	800195a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001946:	4b12      	ldr	r3, [pc, #72]	@ (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	490e      	ldr	r1, [pc, #56]	@ (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	4313      	orrs	r3, r2
 8001958:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800195a:	f000 f821 	bl	80019a0 <HAL_RCC_GetSysClockFreq>
 800195e:	4602      	mov	r2, r0
 8001960:	4b0b      	ldr	r3, [pc, #44]	@ (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	091b      	lsrs	r3, r3, #4
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	490a      	ldr	r1, [pc, #40]	@ (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 800196c:	5ccb      	ldrb	r3, [r1, r3]
 800196e:	fa22 f303 	lsr.w	r3, r2, r3
 8001972:	4a09      	ldr	r2, [pc, #36]	@ (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001976:	4b09      	ldr	r3, [pc, #36]	@ (800199c <HAL_RCC_ClockConfig+0x1c8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f7fe ff56 	bl	800082c <HAL_InitTick>

  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40023c00 	.word	0x40023c00
 8001990:	40023800 	.word	0x40023800
 8001994:	08006584 	.word	0x08006584
 8001998:	20000000 	.word	0x20000000
 800199c:	20000004 	.word	0x20000004

080019a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019a4:	b090      	sub	sp, #64	@ 0x40
 80019a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80019ac:	2300      	movs	r3, #0
 80019ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019b0:	2300      	movs	r3, #0
 80019b2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019b8:	4b59      	ldr	r3, [pc, #356]	@ (8001b20 <HAL_RCC_GetSysClockFreq+0x180>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f003 030c 	and.w	r3, r3, #12
 80019c0:	2b08      	cmp	r3, #8
 80019c2:	d00d      	beq.n	80019e0 <HAL_RCC_GetSysClockFreq+0x40>
 80019c4:	2b08      	cmp	r3, #8
 80019c6:	f200 80a1 	bhi.w	8001b0c <HAL_RCC_GetSysClockFreq+0x16c>
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d002      	beq.n	80019d4 <HAL_RCC_GetSysClockFreq+0x34>
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	d003      	beq.n	80019da <HAL_RCC_GetSysClockFreq+0x3a>
 80019d2:	e09b      	b.n	8001b0c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019d4:	4b53      	ldr	r3, [pc, #332]	@ (8001b24 <HAL_RCC_GetSysClockFreq+0x184>)
 80019d6:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80019d8:	e09b      	b.n	8001b12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019da:	4b53      	ldr	r3, [pc, #332]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x188>)
 80019dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80019de:	e098      	b.n	8001b12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019e0:	4b4f      	ldr	r3, [pc, #316]	@ (8001b20 <HAL_RCC_GetSysClockFreq+0x180>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019e8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ea:	4b4d      	ldr	r3, [pc, #308]	@ (8001b20 <HAL_RCC_GetSysClockFreq+0x180>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d028      	beq.n	8001a48 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019f6:	4b4a      	ldr	r3, [pc, #296]	@ (8001b20 <HAL_RCC_GetSysClockFreq+0x180>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	099b      	lsrs	r3, r3, #6
 80019fc:	2200      	movs	r2, #0
 80019fe:	623b      	str	r3, [r7, #32]
 8001a00:	627a      	str	r2, [r7, #36]	@ 0x24
 8001a02:	6a3b      	ldr	r3, [r7, #32]
 8001a04:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4b47      	ldr	r3, [pc, #284]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a0c:	fb03 f201 	mul.w	r2, r3, r1
 8001a10:	2300      	movs	r3, #0
 8001a12:	fb00 f303 	mul.w	r3, r0, r3
 8001a16:	4413      	add	r3, r2
 8001a18:	4a43      	ldr	r2, [pc, #268]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a1a:	fba0 1202 	umull	r1, r2, r0, r2
 8001a1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a20:	460a      	mov	r2, r1
 8001a22:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001a24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a26:	4413      	add	r3, r2
 8001a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	61bb      	str	r3, [r7, #24]
 8001a30:	61fa      	str	r2, [r7, #28]
 8001a32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a36:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001a3a:	f7fe fbd1 	bl	80001e0 <__aeabi_uldivmod>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4613      	mov	r3, r2
 8001a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a46:	e053      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a48:	4b35      	ldr	r3, [pc, #212]	@ (8001b20 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	099b      	lsrs	r3, r3, #6
 8001a4e:	2200      	movs	r2, #0
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	617a      	str	r2, [r7, #20]
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001a5a:	f04f 0b00 	mov.w	fp, #0
 8001a5e:	4652      	mov	r2, sl
 8001a60:	465b      	mov	r3, fp
 8001a62:	f04f 0000 	mov.w	r0, #0
 8001a66:	f04f 0100 	mov.w	r1, #0
 8001a6a:	0159      	lsls	r1, r3, #5
 8001a6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a70:	0150      	lsls	r0, r2, #5
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	ebb2 080a 	subs.w	r8, r2, sl
 8001a7a:	eb63 090b 	sbc.w	r9, r3, fp
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	f04f 0300 	mov.w	r3, #0
 8001a86:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a8a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a8e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a92:	ebb2 0408 	subs.w	r4, r2, r8
 8001a96:	eb63 0509 	sbc.w	r5, r3, r9
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	f04f 0300 	mov.w	r3, #0
 8001aa2:	00eb      	lsls	r3, r5, #3
 8001aa4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001aa8:	00e2      	lsls	r2, r4, #3
 8001aaa:	4614      	mov	r4, r2
 8001aac:	461d      	mov	r5, r3
 8001aae:	eb14 030a 	adds.w	r3, r4, sl
 8001ab2:	603b      	str	r3, [r7, #0]
 8001ab4:	eb45 030b 	adc.w	r3, r5, fp
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	f04f 0300 	mov.w	r3, #0
 8001ac2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ac6:	4629      	mov	r1, r5
 8001ac8:	028b      	lsls	r3, r1, #10
 8001aca:	4621      	mov	r1, r4
 8001acc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ad0:	4621      	mov	r1, r4
 8001ad2:	028a      	lsls	r2, r1, #10
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ada:	2200      	movs	r2, #0
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	60fa      	str	r2, [r7, #12]
 8001ae0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ae4:	f7fe fb7c 	bl	80001e0 <__aeabi_uldivmod>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4613      	mov	r3, r2
 8001aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001af0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b20 <HAL_RCC_GetSysClockFreq+0x180>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	0c1b      	lsrs	r3, r3, #16
 8001af6:	f003 0303 	and.w	r3, r3, #3
 8001afa:	3301      	adds	r3, #1
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8001b00:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b08:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b0a:	e002      	b.n	8001b12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b0c:	4b05      	ldr	r3, [pc, #20]	@ (8001b24 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b0e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3740      	adds	r7, #64	@ 0x40
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b1e:	bf00      	nop
 8001b20:	40023800 	.word	0x40023800
 8001b24:	00f42400 	.word	0x00f42400
 8001b28:	017d7840 	.word	0x017d7840

08001b2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b30:	4b03      	ldr	r3, [pc, #12]	@ (8001b40 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b32:	681b      	ldr	r3, [r3, #0]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	20000000 	.word	0x20000000

08001b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b48:	f7ff fff0 	bl	8001b2c <HAL_RCC_GetHCLKFreq>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	4b05      	ldr	r3, [pc, #20]	@ (8001b64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	0a9b      	lsrs	r3, r3, #10
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	4903      	ldr	r1, [pc, #12]	@ (8001b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b5a:	5ccb      	ldrb	r3, [r1, r3]
 8001b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40023800 	.word	0x40023800
 8001b68:	08006594 	.word	0x08006594

08001b6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b70:	f7ff ffdc 	bl	8001b2c <HAL_RCC_GetHCLKFreq>
 8001b74:	4602      	mov	r2, r0
 8001b76:	4b05      	ldr	r3, [pc, #20]	@ (8001b8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	0b5b      	lsrs	r3, r3, #13
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	4903      	ldr	r1, [pc, #12]	@ (8001b90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b82:	5ccb      	ldrb	r3, [r1, r3]
 8001b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	08006594 	.word	0x08006594

08001b94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	220f      	movs	r2, #15
 8001ba2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ba4:	4b12      	ldr	r3, [pc, #72]	@ (8001bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 0203 	and.w	r2, r3, #3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bc8:	4b09      	ldr	r3, [pc, #36]	@ (8001bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	08db      	lsrs	r3, r3, #3
 8001bce:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bd6:	4b07      	ldr	r3, [pc, #28]	@ (8001bf4 <HAL_RCC_GetClockConfig+0x60>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0207 	and.w	r2, r3, #7
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	601a      	str	r2, [r3, #0]
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40023c00 	.word	0x40023c00

08001bf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e041      	b.n	8001c8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d106      	bne.n	8001c24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f839 	bl	8001c96 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2202      	movs	r2, #2
 8001c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3304      	adds	r3, #4
 8001c34:	4619      	mov	r1, r3
 8001c36:	4610      	mov	r0, r2
 8001c38:	f000 fac4 	bl	80021c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d001      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e044      	b.n	8001d4e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f042 0201 	orr.w	r2, r2, #1
 8001cda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a1e      	ldr	r2, [pc, #120]	@ (8001d5c <HAL_TIM_Base_Start_IT+0xb0>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d018      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x6c>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cee:	d013      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x6c>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a1a      	ldr	r2, [pc, #104]	@ (8001d60 <HAL_TIM_Base_Start_IT+0xb4>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d00e      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x6c>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a19      	ldr	r2, [pc, #100]	@ (8001d64 <HAL_TIM_Base_Start_IT+0xb8>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d009      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x6c>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a17      	ldr	r2, [pc, #92]	@ (8001d68 <HAL_TIM_Base_Start_IT+0xbc>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d004      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x6c>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a16      	ldr	r2, [pc, #88]	@ (8001d6c <HAL_TIM_Base_Start_IT+0xc0>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d111      	bne.n	8001d3c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2b06      	cmp	r3, #6
 8001d28:	d010      	beq.n	8001d4c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f042 0201 	orr.w	r2, r2, #1
 8001d38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d3a:	e007      	b.n	8001d4c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 0201 	orr.w	r2, r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40010000 	.word	0x40010000
 8001d60:	40000400 	.word	0x40000400
 8001d64:	40000800 	.word	0x40000800
 8001d68:	40000c00 	.word	0x40000c00
 8001d6c:	40014000 	.word	0x40014000

08001d70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e041      	b.n	8001e06 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d106      	bne.n	8001d9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7fe fe54 	bl	8000a44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2202      	movs	r2, #2
 8001da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3304      	adds	r3, #4
 8001dac:	4619      	mov	r1, r3
 8001dae:	4610      	mov	r0, r2
 8001db0:	f000 fa08 	bl	80021c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b084      	sub	sp, #16
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d020      	beq.n	8001e72 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d01b      	beq.n	8001e72 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f06f 0202 	mvn.w	r2, #2
 8001e42:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d003      	beq.n	8001e60 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f995 	bl	8002188 <HAL_TIM_IC_CaptureCallback>
 8001e5e:	e005      	b.n	8001e6c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 f987 	bl	8002174 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f998 	bl	800219c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d020      	beq.n	8001ebe <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f003 0304 	and.w	r3, r3, #4
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d01b      	beq.n	8001ebe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f06f 0204 	mvn.w	r2, #4
 8001e8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2202      	movs	r2, #2
 8001e94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 f96f 	bl	8002188 <HAL_TIM_IC_CaptureCallback>
 8001eaa:	e005      	b.n	8001eb8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f961 	bl	8002174 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f972 	bl	800219c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	f003 0308 	and.w	r3, r3, #8
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d020      	beq.n	8001f0a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d01b      	beq.n	8001f0a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f06f 0208 	mvn.w	r2, #8
 8001eda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2204      	movs	r2, #4
 8001ee0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	f003 0303 	and.w	r3, r3, #3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f949 	bl	8002188 <HAL_TIM_IC_CaptureCallback>
 8001ef6:	e005      	b.n	8001f04 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 f93b 	bl	8002174 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f94c 	bl	800219c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	f003 0310 	and.w	r3, r3, #16
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d020      	beq.n	8001f56 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f003 0310 	and.w	r3, r3, #16
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d01b      	beq.n	8001f56 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f06f 0210 	mvn.w	r2, #16
 8001f26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2208      	movs	r2, #8
 8001f2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 f923 	bl	8002188 <HAL_TIM_IC_CaptureCallback>
 8001f42:	e005      	b.n	8001f50 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f915 	bl	8002174 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f926 	bl	800219c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00c      	beq.n	8001f7a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d007      	beq.n	8001f7a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f06f 0201 	mvn.w	r2, #1
 8001f72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7fe fc15 	bl	80007a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00c      	beq.n	8001f9e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d007      	beq.n	8001f9e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 fba3 	bl	80026e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00c      	beq.n	8001fc2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d007      	beq.n	8001fc2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001fba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f8f7 	bl	80021b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	f003 0320 	and.w	r3, r3, #32
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00c      	beq.n	8001fe6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 0320 	and.w	r3, r3, #32
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d007      	beq.n	8001fe6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f06f 0220 	mvn.w	r2, #32
 8001fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 fb75 	bl	80026d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fe6:	bf00      	nop
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002006:	2b01      	cmp	r3, #1
 8002008:	d101      	bne.n	800200e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800200a:	2302      	movs	r3, #2
 800200c:	e0ae      	b.n	800216c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b0c      	cmp	r3, #12
 800201a:	f200 809f 	bhi.w	800215c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800201e:	a201      	add	r2, pc, #4	@ (adr r2, 8002024 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002024:	08002059 	.word	0x08002059
 8002028:	0800215d 	.word	0x0800215d
 800202c:	0800215d 	.word	0x0800215d
 8002030:	0800215d 	.word	0x0800215d
 8002034:	08002099 	.word	0x08002099
 8002038:	0800215d 	.word	0x0800215d
 800203c:	0800215d 	.word	0x0800215d
 8002040:	0800215d 	.word	0x0800215d
 8002044:	080020db 	.word	0x080020db
 8002048:	0800215d 	.word	0x0800215d
 800204c:	0800215d 	.word	0x0800215d
 8002050:	0800215d 	.word	0x0800215d
 8002054:	0800211b 	.word	0x0800211b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68b9      	ldr	r1, [r7, #8]
 800205e:	4618      	mov	r0, r3
 8002060:	f000 f93c 	bl	80022dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	699a      	ldr	r2, [r3, #24]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f042 0208 	orr.w	r2, r2, #8
 8002072:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	699a      	ldr	r2, [r3, #24]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0204 	bic.w	r2, r2, #4
 8002082:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6999      	ldr	r1, [r3, #24]
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	691a      	ldr	r2, [r3, #16]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	619a      	str	r2, [r3, #24]
      break;
 8002096:	e064      	b.n	8002162 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68b9      	ldr	r1, [r7, #8]
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 f982 	bl	80023a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	699a      	ldr	r2, [r3, #24]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	699a      	ldr	r2, [r3, #24]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6999      	ldr	r1, [r3, #24]
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	021a      	lsls	r2, r3, #8
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	619a      	str	r2, [r3, #24]
      break;
 80020d8:	e043      	b.n	8002162 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68b9      	ldr	r1, [r7, #8]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f000 f9cd 	bl	8002480 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	69da      	ldr	r2, [r3, #28]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f042 0208 	orr.w	r2, r2, #8
 80020f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	69da      	ldr	r2, [r3, #28]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 0204 	bic.w	r2, r2, #4
 8002104:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	69d9      	ldr	r1, [r3, #28]
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	691a      	ldr	r2, [r3, #16]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	61da      	str	r2, [r3, #28]
      break;
 8002118:	e023      	b.n	8002162 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68b9      	ldr	r1, [r7, #8]
 8002120:	4618      	mov	r0, r3
 8002122:	f000 fa17 	bl	8002554 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	69da      	ldr	r2, [r3, #28]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002134:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	69da      	ldr	r2, [r3, #28]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002144:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	69d9      	ldr	r1, [r3, #28]
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	021a      	lsls	r2, r3, #8
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	61da      	str	r2, [r3, #28]
      break;
 800215a:	e002      	b.n	8002162 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	75fb      	strb	r3, [r7, #23]
      break;
 8002160:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800216a:	7dfb      	ldrb	r3, [r7, #23]
}
 800216c:	4618      	mov	r0, r3
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a3a      	ldr	r2, [pc, #232]	@ (80022c0 <TIM_Base_SetConfig+0xfc>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d00f      	beq.n	80021fc <TIM_Base_SetConfig+0x38>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021e2:	d00b      	beq.n	80021fc <TIM_Base_SetConfig+0x38>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a37      	ldr	r2, [pc, #220]	@ (80022c4 <TIM_Base_SetConfig+0x100>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d007      	beq.n	80021fc <TIM_Base_SetConfig+0x38>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a36      	ldr	r2, [pc, #216]	@ (80022c8 <TIM_Base_SetConfig+0x104>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d003      	beq.n	80021fc <TIM_Base_SetConfig+0x38>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a35      	ldr	r2, [pc, #212]	@ (80022cc <TIM_Base_SetConfig+0x108>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d108      	bne.n	800220e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002202:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	4313      	orrs	r3, r2
 800220c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a2b      	ldr	r2, [pc, #172]	@ (80022c0 <TIM_Base_SetConfig+0xfc>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d01b      	beq.n	800224e <TIM_Base_SetConfig+0x8a>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800221c:	d017      	beq.n	800224e <TIM_Base_SetConfig+0x8a>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a28      	ldr	r2, [pc, #160]	@ (80022c4 <TIM_Base_SetConfig+0x100>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d013      	beq.n	800224e <TIM_Base_SetConfig+0x8a>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a27      	ldr	r2, [pc, #156]	@ (80022c8 <TIM_Base_SetConfig+0x104>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d00f      	beq.n	800224e <TIM_Base_SetConfig+0x8a>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a26      	ldr	r2, [pc, #152]	@ (80022cc <TIM_Base_SetConfig+0x108>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d00b      	beq.n	800224e <TIM_Base_SetConfig+0x8a>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a25      	ldr	r2, [pc, #148]	@ (80022d0 <TIM_Base_SetConfig+0x10c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d007      	beq.n	800224e <TIM_Base_SetConfig+0x8a>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a24      	ldr	r2, [pc, #144]	@ (80022d4 <TIM_Base_SetConfig+0x110>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d003      	beq.n	800224e <TIM_Base_SetConfig+0x8a>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a23      	ldr	r2, [pc, #140]	@ (80022d8 <TIM_Base_SetConfig+0x114>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d108      	bne.n	8002260 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002254:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	4313      	orrs	r3, r2
 800225e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	4313      	orrs	r3, r2
 800226c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a0e      	ldr	r2, [pc, #56]	@ (80022c0 <TIM_Base_SetConfig+0xfc>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d103      	bne.n	8002294 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d105      	bne.n	80022b2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	f023 0201 	bic.w	r2, r3, #1
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	611a      	str	r2, [r3, #16]
  }
}
 80022b2:	bf00      	nop
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40010000 	.word	0x40010000
 80022c4:	40000400 	.word	0x40000400
 80022c8:	40000800 	.word	0x40000800
 80022cc:	40000c00 	.word	0x40000c00
 80022d0:	40014000 	.word	0x40014000
 80022d4:	40014400 	.word	0x40014400
 80022d8:	40014800 	.word	0x40014800

080022dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022dc:	b480      	push	{r7}
 80022de:	b087      	sub	sp, #28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	f023 0201 	bic.w	r2, r3, #1
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800230a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f023 0303 	bic.w	r3, r3, #3
 8002312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	4313      	orrs	r3, r2
 800231c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f023 0302 	bic.w	r3, r3, #2
 8002324:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	4313      	orrs	r3, r2
 800232e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a1c      	ldr	r2, [pc, #112]	@ (80023a4 <TIM_OC1_SetConfig+0xc8>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d10c      	bne.n	8002352 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f023 0308 	bic.w	r3, r3, #8
 800233e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	4313      	orrs	r3, r2
 8002348:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	f023 0304 	bic.w	r3, r3, #4
 8002350:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a13      	ldr	r2, [pc, #76]	@ (80023a4 <TIM_OC1_SetConfig+0xc8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d111      	bne.n	800237e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002360:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002368:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	4313      	orrs	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	621a      	str	r2, [r3, #32]
}
 8002398:	bf00      	nop
 800239a:	371c      	adds	r7, #28
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	40010000 	.word	0x40010000

080023a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b087      	sub	sp, #28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	f023 0210 	bic.w	r2, r3, #16
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80023d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	021b      	lsls	r3, r3, #8
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	f023 0320 	bic.w	r3, r3, #32
 80023f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a1e      	ldr	r2, [pc, #120]	@ (800247c <TIM_OC2_SetConfig+0xd4>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d10d      	bne.n	8002424 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800240e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	4313      	orrs	r3, r2
 800241a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002422:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a15      	ldr	r2, [pc, #84]	@ (800247c <TIM_OC2_SetConfig+0xd4>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d113      	bne.n	8002454 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002432:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800243a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	621a      	str	r2, [r3, #32]
}
 800246e:	bf00      	nop
 8002470:	371c      	adds	r7, #28
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	40010000 	.word	0x40010000

08002480 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002480:	b480      	push	{r7}
 8002482:	b087      	sub	sp, #28
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f023 0303 	bic.w	r3, r3, #3
 80024b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	4313      	orrs	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80024c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	021b      	lsls	r3, r3, #8
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002550 <TIM_OC3_SetConfig+0xd0>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d10d      	bne.n	80024fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80024e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	021b      	lsls	r3, r3, #8
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80024f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a14      	ldr	r2, [pc, #80]	@ (8002550 <TIM_OC3_SetConfig+0xd0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d113      	bne.n	800252a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	4313      	orrs	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4313      	orrs	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	621a      	str	r2, [r3, #32]
}
 8002544:	bf00      	nop
 8002546:	371c      	adds	r7, #28
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	40010000 	.word	0x40010000

08002554 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002554:	b480      	push	{r7}
 8002556:	b087      	sub	sp, #28
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800258a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	021b      	lsls	r3, r3, #8
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	4313      	orrs	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800259e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	031b      	lsls	r3, r3, #12
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a10      	ldr	r2, [pc, #64]	@ (80025f0 <TIM_OC4_SetConfig+0x9c>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d109      	bne.n	80025c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80025ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	019b      	lsls	r3, r3, #6
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	621a      	str	r2, [r3, #32]
}
 80025e2:	bf00      	nop
 80025e4:	371c      	adds	r7, #28
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40010000 	.word	0x40010000

080025f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002604:	2b01      	cmp	r3, #1
 8002606:	d101      	bne.n	800260c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002608:	2302      	movs	r3, #2
 800260a:	e050      	b.n	80026ae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2202      	movs	r2, #2
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002632:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	4313      	orrs	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a1c      	ldr	r2, [pc, #112]	@ (80026bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d018      	beq.n	8002682 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002658:	d013      	beq.n	8002682 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a18      	ldr	r2, [pc, #96]	@ (80026c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d00e      	beq.n	8002682 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a16      	ldr	r2, [pc, #88]	@ (80026c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d009      	beq.n	8002682 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a15      	ldr	r2, [pc, #84]	@ (80026c8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d004      	beq.n	8002682 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a13      	ldr	r2, [pc, #76]	@ (80026cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d10c      	bne.n	800269c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002688:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	4313      	orrs	r3, r2
 8002692:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40010000 	.word	0x40010000
 80026c0:	40000400 	.word	0x40000400
 80026c4:	40000800 	.word	0x40000800
 80026c8:	40000c00 	.word	0x40000c00
 80026cc:	40014000 	.word	0x40014000

080026d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e042      	b.n	8002790 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d106      	bne.n	8002724 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7fe fa12 	bl	8000b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2224      	movs	r2, #36	@ 0x24
 8002728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68da      	ldr	r2, [r3, #12]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800273a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 fd75 	bl	800322c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	691a      	ldr	r2, [r3, #16]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002750:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695a      	ldr	r2, [r3, #20]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002760:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68da      	ldr	r2, [r3, #12]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002770:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2220      	movs	r2, #32
 800277c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2220      	movs	r2, #32
 8002784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08a      	sub	sp, #40	@ 0x28
 800279c:	af02      	add	r7, sp, #8
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	4613      	mov	r3, r2
 80027a6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b20      	cmp	r3, #32
 80027b6:	f040 8081 	bne.w	80028bc <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <HAL_UART_Receive+0x2e>
 80027c0:	88fb      	ldrh	r3, [r7, #6]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e079      	b.n	80028be <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2222      	movs	r2, #34	@ 0x22
 80027d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027de:	f7fe fa63 	bl	8000ca8 <HAL_GetTick>
 80027e2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	88fa      	ldrh	r2, [r7, #6]
 80027e8:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	88fa      	ldrh	r2, [r7, #6]
 80027ee:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027f8:	d108      	bne.n	800280c <HAL_UART_Receive+0x74>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d104      	bne.n	800280c <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	61bb      	str	r3, [r7, #24]
 800280a:	e003      	b.n	8002814 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002810:	2300      	movs	r3, #0
 8002812:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002814:	e047      	b.n	80028a6 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	2200      	movs	r2, #0
 800281e:	2120      	movs	r1, #32
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 fb0d 	bl	8002e40 <UART_WaitOnFlagUntilTimeout>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d005      	beq.n	8002838 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2220      	movs	r2, #32
 8002830:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e042      	b.n	80028be <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10c      	bne.n	8002858 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	b29b      	uxth	r3, r3
 8002846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800284a:	b29a      	uxth	r2, r3
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	3302      	adds	r3, #2
 8002854:	61bb      	str	r3, [r7, #24]
 8002856:	e01f      	b.n	8002898 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002860:	d007      	beq.n	8002872 <HAL_UART_Receive+0xda>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10a      	bne.n	8002880 <HAL_UART_Receive+0xe8>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d106      	bne.n	8002880 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	b2da      	uxtb	r2, r3
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	701a      	strb	r2, [r3, #0]
 800287e:	e008      	b.n	8002892 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	b2db      	uxtb	r3, r3
 8002888:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800288c:	b2da      	uxtb	r2, r3
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	3301      	adds	r3, #1
 8002896:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800289c:	b29b      	uxth	r3, r3
 800289e:	3b01      	subs	r3, #1
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1b2      	bne.n	8002816 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2220      	movs	r2, #32
 80028b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80028b8:	2300      	movs	r3, #0
 80028ba:	e000      	b.n	80028be <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80028bc:	2302      	movs	r3, #2
  }
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3720      	adds	r7, #32
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
	...

080028c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b0ba      	sub	sp, #232	@ 0xe8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80028fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002906:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10f      	bne.n	800292e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800290e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002912:	f003 0320 	and.w	r3, r3, #32
 8002916:	2b00      	cmp	r3, #0
 8002918:	d009      	beq.n	800292e <HAL_UART_IRQHandler+0x66>
 800291a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 fbc2 	bl	80030b0 <UART_Receive_IT>
      return;
 800292c:	e25b      	b.n	8002de6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800292e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 80de 	beq.w	8002af4 <HAL_UART_IRQHandler+0x22c>
 8002938:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	2b00      	cmp	r3, #0
 8002942:	d106      	bne.n	8002952 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002948:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 80d1 	beq.w	8002af4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00b      	beq.n	8002976 <HAL_UART_IRQHandler+0xae>
 800295e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002966:	2b00      	cmp	r3, #0
 8002968:	d005      	beq.n	8002976 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800296e:	f043 0201 	orr.w	r2, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800297a:	f003 0304 	and.w	r3, r3, #4
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00b      	beq.n	800299a <HAL_UART_IRQHandler+0xd2>
 8002982:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d005      	beq.n	800299a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002992:	f043 0202 	orr.w	r2, r3, #2
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800299a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00b      	beq.n	80029be <HAL_UART_IRQHandler+0xf6>
 80029a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d005      	beq.n	80029be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b6:	f043 0204 	orr.w	r2, r3, #4
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80029be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d011      	beq.n	80029ee <HAL_UART_IRQHandler+0x126>
 80029ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029ce:	f003 0320 	and.w	r3, r3, #32
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d105      	bne.n	80029e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80029d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d005      	beq.n	80029ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e6:	f043 0208 	orr.w	r2, r3, #8
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 81f2 	beq.w	8002ddc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d008      	beq.n	8002a16 <HAL_UART_IRQHandler+0x14e>
 8002a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a08:	f003 0320 	and.w	r3, r3, #32
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d002      	beq.n	8002a16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 fb4d 	bl	80030b0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a20:	2b40      	cmp	r3, #64	@ 0x40
 8002a22:	bf0c      	ite	eq
 8002a24:	2301      	moveq	r3, #1
 8002a26:	2300      	movne	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d103      	bne.n	8002a42 <HAL_UART_IRQHandler+0x17a>
 8002a3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d04f      	beq.n	8002ae2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 fa55 	bl	8002ef2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a52:	2b40      	cmp	r3, #64	@ 0x40
 8002a54:	d141      	bne.n	8002ada <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	3314      	adds	r3, #20
 8002a5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a64:	e853 3f00 	ldrex	r3, [r3]
 8002a68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002a6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	3314      	adds	r3, #20
 8002a7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002a82:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002a86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002a8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002a92:	e841 2300 	strex	r3, r2, [r1]
 8002a96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002a9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1d9      	bne.n	8002a56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d013      	beq.n	8002ad2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aae:	4a7e      	ldr	r2, [pc, #504]	@ (8002ca8 <HAL_UART_IRQHandler+0x3e0>)
 8002ab0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fe fa54 	bl	8000f64 <HAL_DMA_Abort_IT>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d016      	beq.n	8002af0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002acc:	4610      	mov	r0, r2
 8002ace:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ad0:	e00e      	b.n	8002af0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f99e 	bl	8002e14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ad8:	e00a      	b.n	8002af0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f99a 	bl	8002e14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae0:	e006      	b.n	8002af0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f996 	bl	8002e14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002aee:	e175      	b.n	8002ddc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002af0:	bf00      	nop
    return;
 8002af2:	e173      	b.n	8002ddc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	f040 814f 	bne.w	8002d9c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b02:	f003 0310 	and.w	r3, r3, #16
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 8148 	beq.w	8002d9c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b10:	f003 0310 	and.w	r3, r3, #16
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 8141 	beq.w	8002d9c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60bb      	str	r3, [r7, #8]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	60bb      	str	r3, [r7, #8]
 8002b2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b3a:	2b40      	cmp	r3, #64	@ 0x40
 8002b3c:	f040 80b6 	bne.w	8002cac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 8145 	beq.w	8002de0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002b5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	f080 813e 	bcs.w	8002de0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b6a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b76:	f000 8088 	beq.w	8002c8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	330c      	adds	r3, #12
 8002b80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b88:	e853 3f00 	ldrex	r3, [r3]
 8002b8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002b90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	330c      	adds	r3, #12
 8002ba2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002ba6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002baa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002bb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002bb6:	e841 2300 	strex	r3, r2, [r1]
 8002bba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002bbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1d9      	bne.n	8002b7a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	3314      	adds	r3, #20
 8002bcc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bd0:	e853 3f00 	ldrex	r3, [r3]
 8002bd4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002bd6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bd8:	f023 0301 	bic.w	r3, r3, #1
 8002bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	3314      	adds	r3, #20
 8002be6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002bea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002bee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002bf2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002bf6:	e841 2300 	strex	r3, r2, [r1]
 8002bfa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002bfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1e1      	bne.n	8002bc6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	3314      	adds	r3, #20
 8002c08:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c0c:	e853 3f00 	ldrex	r3, [r3]
 8002c10:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002c12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	3314      	adds	r3, #20
 8002c22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002c26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002c28:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c2a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002c2c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002c2e:	e841 2300 	strex	r3, r2, [r1]
 8002c32:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002c34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1e3      	bne.n	8002c02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	330c      	adds	r3, #12
 8002c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c52:	e853 3f00 	ldrex	r3, [r3]
 8002c56:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002c58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c5a:	f023 0310 	bic.w	r3, r3, #16
 8002c5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	330c      	adds	r3, #12
 8002c68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002c6c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002c6e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c70:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c72:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c74:	e841 2300 	strex	r3, r2, [r1]
 8002c78:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002c7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1e3      	bne.n	8002c48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7fe f8fd 	bl	8000e84 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 f8c1 	bl	8002e28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ca6:	e09b      	b.n	8002de0 <HAL_UART_IRQHandler+0x518>
 8002ca8:	08002fb9 	.word	0x08002fb9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 808e 	beq.w	8002de4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002cc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 8089 	beq.w	8002de4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	330c      	adds	r3, #12
 8002cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cdc:	e853 3f00 	ldrex	r3, [r3]
 8002ce0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ce4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ce8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	330c      	adds	r3, #12
 8002cf2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002cf6:	647a      	str	r2, [r7, #68]	@ 0x44
 8002cf8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cfa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002cfc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002cfe:	e841 2300 	strex	r3, r2, [r1]
 8002d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002d04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1e3      	bne.n	8002cd2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	3314      	adds	r3, #20
 8002d10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d14:	e853 3f00 	ldrex	r3, [r3]
 8002d18:	623b      	str	r3, [r7, #32]
   return(result);
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	f023 0301 	bic.w	r3, r3, #1
 8002d20:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	3314      	adds	r3, #20
 8002d2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002d2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d36:	e841 2300 	strex	r3, r2, [r1]
 8002d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1e3      	bne.n	8002d0a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2220      	movs	r2, #32
 8002d46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	330c      	adds	r3, #12
 8002d56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	e853 3f00 	ldrex	r3, [r3]
 8002d5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f023 0310 	bic.w	r3, r3, #16
 8002d66:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	330c      	adds	r3, #12
 8002d70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002d74:	61fa      	str	r2, [r7, #28]
 8002d76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d78:	69b9      	ldr	r1, [r7, #24]
 8002d7a:	69fa      	ldr	r2, [r7, #28]
 8002d7c:	e841 2300 	strex	r3, r2, [r1]
 8002d80:	617b      	str	r3, [r7, #20]
   return(result);
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1e3      	bne.n	8002d50 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002d92:	4619      	mov	r1, r3
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 f847 	bl	8002e28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d9a:	e023      	b.n	8002de4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002da0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d009      	beq.n	8002dbc <HAL_UART_IRQHandler+0x4f4>
 8002da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d003      	beq.n	8002dbc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 f913 	bl	8002fe0 <UART_Transmit_IT>
    return;
 8002dba:	e014      	b.n	8002de6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00e      	beq.n	8002de6 <HAL_UART_IRQHandler+0x51e>
 8002dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d008      	beq.n	8002de6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 f953 	bl	8003080 <UART_EndTransmit_IT>
    return;
 8002dda:	e004      	b.n	8002de6 <HAL_UART_IRQHandler+0x51e>
    return;
 8002ddc:	bf00      	nop
 8002dde:	e002      	b.n	8002de6 <HAL_UART_IRQHandler+0x51e>
      return;
 8002de0:	bf00      	nop
 8002de2:	e000      	b.n	8002de6 <HAL_UART_IRQHandler+0x51e>
      return;
 8002de4:	bf00      	nop
  }
}
 8002de6:	37e8      	adds	r7, #232	@ 0xe8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	603b      	str	r3, [r7, #0]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e50:	e03b      	b.n	8002eca <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e58:	d037      	beq.n	8002eca <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e5a:	f7fd ff25 	bl	8000ca8 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	6a3a      	ldr	r2, [r7, #32]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d302      	bcc.n	8002e70 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e03a      	b.n	8002eea <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f003 0304 	and.w	r3, r3, #4
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d023      	beq.n	8002eca <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	2b80      	cmp	r3, #128	@ 0x80
 8002e86:	d020      	beq.n	8002eca <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2b40      	cmp	r3, #64	@ 0x40
 8002e8c:	d01d      	beq.n	8002eca <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0308 	and.w	r3, r3, #8
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d116      	bne.n	8002eca <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	617b      	str	r3, [r7, #20]
 8002eb0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 f81d 	bl	8002ef2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2208      	movs	r2, #8
 8002ebc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e00f      	b.n	8002eea <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	bf0c      	ite	eq
 8002eda:	2301      	moveq	r3, #1
 8002edc:	2300      	movne	r3, #0
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	79fb      	ldrb	r3, [r7, #7]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d0b4      	beq.n	8002e52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3718      	adds	r7, #24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b095      	sub	sp, #84	@ 0x54
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	330c      	adds	r3, #12
 8002f00:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f04:	e853 3f00 	ldrex	r3, [r3]
 8002f08:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	330c      	adds	r3, #12
 8002f18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f1a:	643a      	str	r2, [r7, #64]	@ 0x40
 8002f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f22:	e841 2300 	strex	r3, r2, [r1]
 8002f26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1e5      	bne.n	8002efa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	3314      	adds	r3, #20
 8002f34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f36:	6a3b      	ldr	r3, [r7, #32]
 8002f38:	e853 3f00 	ldrex	r3, [r3]
 8002f3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	f023 0301 	bic.w	r3, r3, #1
 8002f44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	3314      	adds	r3, #20
 8002f4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f50:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f56:	e841 2300 	strex	r3, r2, [r1]
 8002f5a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1e5      	bne.n	8002f2e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d119      	bne.n	8002f9e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	330c      	adds	r3, #12
 8002f70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	e853 3f00 	ldrex	r3, [r3]
 8002f78:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	f023 0310 	bic.w	r3, r3, #16
 8002f80:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	330c      	adds	r3, #12
 8002f88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f8a:	61ba      	str	r2, [r7, #24]
 8002f8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8e:	6979      	ldr	r1, [r7, #20]
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	e841 2300 	strex	r3, r2, [r1]
 8002f96:	613b      	str	r3, [r7, #16]
   return(result);
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1e5      	bne.n	8002f6a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002fac:	bf00      	nop
 8002fae:	3754      	adds	r7, #84	@ 0x54
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f7ff ff1e 	bl	8002e14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fd8:	bf00      	nop
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b21      	cmp	r3, #33	@ 0x21
 8002ff2:	d13e      	bne.n	8003072 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ffc:	d114      	bne.n	8003028 <UART_Transmit_IT+0x48>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d110      	bne.n	8003028 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	881b      	ldrh	r3, [r3, #0]
 8003010:	461a      	mov	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800301a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	1c9a      	adds	r2, r3, #2
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	621a      	str	r2, [r3, #32]
 8003026:	e008      	b.n	800303a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	1c59      	adds	r1, r3, #1
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6211      	str	r1, [r2, #32]
 8003032:	781a      	ldrb	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800303e:	b29b      	uxth	r3, r3
 8003040:	3b01      	subs	r3, #1
 8003042:	b29b      	uxth	r3, r3
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	4619      	mov	r1, r3
 8003048:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10f      	bne.n	800306e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800305c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68da      	ldr	r2, [r3, #12]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800306c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800306e:	2300      	movs	r3, #0
 8003070:	e000      	b.n	8003074 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003072:	2302      	movs	r3, #2
  }
}
 8003074:	4618      	mov	r0, r3
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003096:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7ff fea3 	bl	8002dec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08c      	sub	sp, #48	@ 0x30
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b22      	cmp	r3, #34	@ 0x22
 80030c2:	f040 80ae 	bne.w	8003222 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030ce:	d117      	bne.n	8003100 <UART_Receive_IT+0x50>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d113      	bne.n	8003100 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80030d8:	2300      	movs	r3, #0
 80030da:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f8:	1c9a      	adds	r2, r3, #2
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	629a      	str	r2, [r3, #40]	@ 0x28
 80030fe:	e026      	b.n	800314e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003104:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003106:	2300      	movs	r3, #0
 8003108:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003112:	d007      	beq.n	8003124 <UART_Receive_IT+0x74>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10a      	bne.n	8003132 <UART_Receive_IT+0x82>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d106      	bne.n	8003132 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	b2da      	uxtb	r2, r3
 800312c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800312e:	701a      	strb	r2, [r3, #0]
 8003130:	e008      	b.n	8003144 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	b2db      	uxtb	r3, r3
 800313a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800313e:	b2da      	uxtb	r2, r3
 8003140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003142:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003148:	1c5a      	adds	r2, r3, #1
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003152:	b29b      	uxth	r3, r3
 8003154:	3b01      	subs	r3, #1
 8003156:	b29b      	uxth	r3, r3
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	4619      	mov	r1, r3
 800315c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800315e:	2b00      	cmp	r3, #0
 8003160:	d15d      	bne.n	800321e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0220 	bic.w	r2, r2, #32
 8003170:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003180:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695a      	ldr	r2, [r3, #20]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0201 	bic.w	r2, r2, #1
 8003190:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2220      	movs	r2, #32
 8003196:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d135      	bne.n	8003214 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	330c      	adds	r3, #12
 80031b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	e853 3f00 	ldrex	r3, [r3]
 80031bc:	613b      	str	r3, [r7, #16]
   return(result);
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f023 0310 	bic.w	r3, r3, #16
 80031c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	330c      	adds	r3, #12
 80031cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031ce:	623a      	str	r2, [r7, #32]
 80031d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d2:	69f9      	ldr	r1, [r7, #28]
 80031d4:	6a3a      	ldr	r2, [r7, #32]
 80031d6:	e841 2300 	strex	r3, r2, [r1]
 80031da:	61bb      	str	r3, [r7, #24]
   return(result);
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1e5      	bne.n	80031ae <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0310 	and.w	r3, r3, #16
 80031ec:	2b10      	cmp	r3, #16
 80031ee:	d10a      	bne.n	8003206 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031f0:	2300      	movs	r3, #0
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	60fb      	str	r3, [r7, #12]
 8003204:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800320a:	4619      	mov	r1, r3
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7ff fe0b 	bl	8002e28 <HAL_UARTEx_RxEventCallback>
 8003212:	e002      	b.n	800321a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7ff fdf3 	bl	8002e00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800321a:	2300      	movs	r3, #0
 800321c:	e002      	b.n	8003224 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800321e:	2300      	movs	r3, #0
 8003220:	e000      	b.n	8003224 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003222:	2302      	movs	r3, #2
  }
}
 8003224:	4618      	mov	r0, r3
 8003226:	3730      	adds	r7, #48	@ 0x30
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800322c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003230:	b0c0      	sub	sp, #256	@ 0x100
 8003232:	af00      	add	r7, sp, #0
 8003234:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003248:	68d9      	ldr	r1, [r3, #12]
 800324a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	ea40 0301 	orr.w	r3, r0, r1
 8003254:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	431a      	orrs	r2, r3
 8003264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	431a      	orrs	r2, r3
 800326c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	4313      	orrs	r3, r2
 8003274:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003284:	f021 010c 	bic.w	r1, r1, #12
 8003288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003292:	430b      	orrs	r3, r1
 8003294:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80032a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a6:	6999      	ldr	r1, [r3, #24]
 80032a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	ea40 0301 	orr.w	r3, r0, r1
 80032b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	4b8f      	ldr	r3, [pc, #572]	@ (80034f8 <UART_SetConfig+0x2cc>)
 80032bc:	429a      	cmp	r2, r3
 80032be:	d005      	beq.n	80032cc <UART_SetConfig+0xa0>
 80032c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	4b8d      	ldr	r3, [pc, #564]	@ (80034fc <UART_SetConfig+0x2d0>)
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d104      	bne.n	80032d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032cc:	f7fe fc4e 	bl	8001b6c <HAL_RCC_GetPCLK2Freq>
 80032d0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80032d4:	e003      	b.n	80032de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032d6:	f7fe fc35 	bl	8001b44 <HAL_RCC_GetPCLK1Freq>
 80032da:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032e8:	f040 810c 	bne.w	8003504 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032f0:	2200      	movs	r2, #0
 80032f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80032f6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80032fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80032fe:	4622      	mov	r2, r4
 8003300:	462b      	mov	r3, r5
 8003302:	1891      	adds	r1, r2, r2
 8003304:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003306:	415b      	adcs	r3, r3
 8003308:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800330a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800330e:	4621      	mov	r1, r4
 8003310:	eb12 0801 	adds.w	r8, r2, r1
 8003314:	4629      	mov	r1, r5
 8003316:	eb43 0901 	adc.w	r9, r3, r1
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	f04f 0300 	mov.w	r3, #0
 8003322:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003326:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800332a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800332e:	4690      	mov	r8, r2
 8003330:	4699      	mov	r9, r3
 8003332:	4623      	mov	r3, r4
 8003334:	eb18 0303 	adds.w	r3, r8, r3
 8003338:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800333c:	462b      	mov	r3, r5
 800333e:	eb49 0303 	adc.w	r3, r9, r3
 8003342:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003352:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003356:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800335a:	460b      	mov	r3, r1
 800335c:	18db      	adds	r3, r3, r3
 800335e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003360:	4613      	mov	r3, r2
 8003362:	eb42 0303 	adc.w	r3, r2, r3
 8003366:	657b      	str	r3, [r7, #84]	@ 0x54
 8003368:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800336c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003370:	f7fc ff36 	bl	80001e0 <__aeabi_uldivmod>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4b61      	ldr	r3, [pc, #388]	@ (8003500 <UART_SetConfig+0x2d4>)
 800337a:	fba3 2302 	umull	r2, r3, r3, r2
 800337e:	095b      	lsrs	r3, r3, #5
 8003380:	011c      	lsls	r4, r3, #4
 8003382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003386:	2200      	movs	r2, #0
 8003388:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800338c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003390:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003394:	4642      	mov	r2, r8
 8003396:	464b      	mov	r3, r9
 8003398:	1891      	adds	r1, r2, r2
 800339a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800339c:	415b      	adcs	r3, r3
 800339e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80033a4:	4641      	mov	r1, r8
 80033a6:	eb12 0a01 	adds.w	sl, r2, r1
 80033aa:	4649      	mov	r1, r9
 80033ac:	eb43 0b01 	adc.w	fp, r3, r1
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	f04f 0300 	mov.w	r3, #0
 80033b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033c4:	4692      	mov	sl, r2
 80033c6:	469b      	mov	fp, r3
 80033c8:	4643      	mov	r3, r8
 80033ca:	eb1a 0303 	adds.w	r3, sl, r3
 80033ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80033d2:	464b      	mov	r3, r9
 80033d4:	eb4b 0303 	adc.w	r3, fp, r3
 80033d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80033dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80033e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80033ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80033f0:	460b      	mov	r3, r1
 80033f2:	18db      	adds	r3, r3, r3
 80033f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80033f6:	4613      	mov	r3, r2
 80033f8:	eb42 0303 	adc.w	r3, r2, r3
 80033fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80033fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003402:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003406:	f7fc feeb 	bl	80001e0 <__aeabi_uldivmod>
 800340a:	4602      	mov	r2, r0
 800340c:	460b      	mov	r3, r1
 800340e:	4611      	mov	r1, r2
 8003410:	4b3b      	ldr	r3, [pc, #236]	@ (8003500 <UART_SetConfig+0x2d4>)
 8003412:	fba3 2301 	umull	r2, r3, r3, r1
 8003416:	095b      	lsrs	r3, r3, #5
 8003418:	2264      	movs	r2, #100	@ 0x64
 800341a:	fb02 f303 	mul.w	r3, r2, r3
 800341e:	1acb      	subs	r3, r1, r3
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003426:	4b36      	ldr	r3, [pc, #216]	@ (8003500 <UART_SetConfig+0x2d4>)
 8003428:	fba3 2302 	umull	r2, r3, r3, r2
 800342c:	095b      	lsrs	r3, r3, #5
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003434:	441c      	add	r4, r3
 8003436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800343a:	2200      	movs	r2, #0
 800343c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003440:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003444:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003448:	4642      	mov	r2, r8
 800344a:	464b      	mov	r3, r9
 800344c:	1891      	adds	r1, r2, r2
 800344e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003450:	415b      	adcs	r3, r3
 8003452:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003454:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003458:	4641      	mov	r1, r8
 800345a:	1851      	adds	r1, r2, r1
 800345c:	6339      	str	r1, [r7, #48]	@ 0x30
 800345e:	4649      	mov	r1, r9
 8003460:	414b      	adcs	r3, r1
 8003462:	637b      	str	r3, [r7, #52]	@ 0x34
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	f04f 0300 	mov.w	r3, #0
 800346c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003470:	4659      	mov	r1, fp
 8003472:	00cb      	lsls	r3, r1, #3
 8003474:	4651      	mov	r1, sl
 8003476:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800347a:	4651      	mov	r1, sl
 800347c:	00ca      	lsls	r2, r1, #3
 800347e:	4610      	mov	r0, r2
 8003480:	4619      	mov	r1, r3
 8003482:	4603      	mov	r3, r0
 8003484:	4642      	mov	r2, r8
 8003486:	189b      	adds	r3, r3, r2
 8003488:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800348c:	464b      	mov	r3, r9
 800348e:	460a      	mov	r2, r1
 8003490:	eb42 0303 	adc.w	r3, r2, r3
 8003494:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80034a4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80034a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80034ac:	460b      	mov	r3, r1
 80034ae:	18db      	adds	r3, r3, r3
 80034b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034b2:	4613      	mov	r3, r2
 80034b4:	eb42 0303 	adc.w	r3, r2, r3
 80034b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80034be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80034c2:	f7fc fe8d 	bl	80001e0 <__aeabi_uldivmod>
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003500 <UART_SetConfig+0x2d4>)
 80034cc:	fba3 1302 	umull	r1, r3, r3, r2
 80034d0:	095b      	lsrs	r3, r3, #5
 80034d2:	2164      	movs	r1, #100	@ 0x64
 80034d4:	fb01 f303 	mul.w	r3, r1, r3
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	3332      	adds	r3, #50	@ 0x32
 80034de:	4a08      	ldr	r2, [pc, #32]	@ (8003500 <UART_SetConfig+0x2d4>)
 80034e0:	fba2 2303 	umull	r2, r3, r2, r3
 80034e4:	095b      	lsrs	r3, r3, #5
 80034e6:	f003 0207 	and.w	r2, r3, #7
 80034ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4422      	add	r2, r4
 80034f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80034f4:	e106      	b.n	8003704 <UART_SetConfig+0x4d8>
 80034f6:	bf00      	nop
 80034f8:	40011000 	.word	0x40011000
 80034fc:	40011400 	.word	0x40011400
 8003500:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003504:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003508:	2200      	movs	r2, #0
 800350a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800350e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003512:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003516:	4642      	mov	r2, r8
 8003518:	464b      	mov	r3, r9
 800351a:	1891      	adds	r1, r2, r2
 800351c:	6239      	str	r1, [r7, #32]
 800351e:	415b      	adcs	r3, r3
 8003520:	627b      	str	r3, [r7, #36]	@ 0x24
 8003522:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003526:	4641      	mov	r1, r8
 8003528:	1854      	adds	r4, r2, r1
 800352a:	4649      	mov	r1, r9
 800352c:	eb43 0501 	adc.w	r5, r3, r1
 8003530:	f04f 0200 	mov.w	r2, #0
 8003534:	f04f 0300 	mov.w	r3, #0
 8003538:	00eb      	lsls	r3, r5, #3
 800353a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800353e:	00e2      	lsls	r2, r4, #3
 8003540:	4614      	mov	r4, r2
 8003542:	461d      	mov	r5, r3
 8003544:	4643      	mov	r3, r8
 8003546:	18e3      	adds	r3, r4, r3
 8003548:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800354c:	464b      	mov	r3, r9
 800354e:	eb45 0303 	adc.w	r3, r5, r3
 8003552:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003562:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003566:	f04f 0200 	mov.w	r2, #0
 800356a:	f04f 0300 	mov.w	r3, #0
 800356e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003572:	4629      	mov	r1, r5
 8003574:	008b      	lsls	r3, r1, #2
 8003576:	4621      	mov	r1, r4
 8003578:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800357c:	4621      	mov	r1, r4
 800357e:	008a      	lsls	r2, r1, #2
 8003580:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003584:	f7fc fe2c 	bl	80001e0 <__aeabi_uldivmod>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	4b60      	ldr	r3, [pc, #384]	@ (8003710 <UART_SetConfig+0x4e4>)
 800358e:	fba3 2302 	umull	r2, r3, r3, r2
 8003592:	095b      	lsrs	r3, r3, #5
 8003594:	011c      	lsls	r4, r3, #4
 8003596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800359a:	2200      	movs	r2, #0
 800359c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80035a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80035a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80035a8:	4642      	mov	r2, r8
 80035aa:	464b      	mov	r3, r9
 80035ac:	1891      	adds	r1, r2, r2
 80035ae:	61b9      	str	r1, [r7, #24]
 80035b0:	415b      	adcs	r3, r3
 80035b2:	61fb      	str	r3, [r7, #28]
 80035b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035b8:	4641      	mov	r1, r8
 80035ba:	1851      	adds	r1, r2, r1
 80035bc:	6139      	str	r1, [r7, #16]
 80035be:	4649      	mov	r1, r9
 80035c0:	414b      	adcs	r3, r1
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035d0:	4659      	mov	r1, fp
 80035d2:	00cb      	lsls	r3, r1, #3
 80035d4:	4651      	mov	r1, sl
 80035d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035da:	4651      	mov	r1, sl
 80035dc:	00ca      	lsls	r2, r1, #3
 80035de:	4610      	mov	r0, r2
 80035e0:	4619      	mov	r1, r3
 80035e2:	4603      	mov	r3, r0
 80035e4:	4642      	mov	r2, r8
 80035e6:	189b      	adds	r3, r3, r2
 80035e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80035ec:	464b      	mov	r3, r9
 80035ee:	460a      	mov	r2, r1
 80035f0:	eb42 0303 	adc.w	r3, r2, r3
 80035f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80035f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003602:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003604:	f04f 0200 	mov.w	r2, #0
 8003608:	f04f 0300 	mov.w	r3, #0
 800360c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003610:	4649      	mov	r1, r9
 8003612:	008b      	lsls	r3, r1, #2
 8003614:	4641      	mov	r1, r8
 8003616:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800361a:	4641      	mov	r1, r8
 800361c:	008a      	lsls	r2, r1, #2
 800361e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003622:	f7fc fddd 	bl	80001e0 <__aeabi_uldivmod>
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	4611      	mov	r1, r2
 800362c:	4b38      	ldr	r3, [pc, #224]	@ (8003710 <UART_SetConfig+0x4e4>)
 800362e:	fba3 2301 	umull	r2, r3, r3, r1
 8003632:	095b      	lsrs	r3, r3, #5
 8003634:	2264      	movs	r2, #100	@ 0x64
 8003636:	fb02 f303 	mul.w	r3, r2, r3
 800363a:	1acb      	subs	r3, r1, r3
 800363c:	011b      	lsls	r3, r3, #4
 800363e:	3332      	adds	r3, #50	@ 0x32
 8003640:	4a33      	ldr	r2, [pc, #204]	@ (8003710 <UART_SetConfig+0x4e4>)
 8003642:	fba2 2303 	umull	r2, r3, r2, r3
 8003646:	095b      	lsrs	r3, r3, #5
 8003648:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800364c:	441c      	add	r4, r3
 800364e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003652:	2200      	movs	r2, #0
 8003654:	673b      	str	r3, [r7, #112]	@ 0x70
 8003656:	677a      	str	r2, [r7, #116]	@ 0x74
 8003658:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800365c:	4642      	mov	r2, r8
 800365e:	464b      	mov	r3, r9
 8003660:	1891      	adds	r1, r2, r2
 8003662:	60b9      	str	r1, [r7, #8]
 8003664:	415b      	adcs	r3, r3
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800366c:	4641      	mov	r1, r8
 800366e:	1851      	adds	r1, r2, r1
 8003670:	6039      	str	r1, [r7, #0]
 8003672:	4649      	mov	r1, r9
 8003674:	414b      	adcs	r3, r1
 8003676:	607b      	str	r3, [r7, #4]
 8003678:	f04f 0200 	mov.w	r2, #0
 800367c:	f04f 0300 	mov.w	r3, #0
 8003680:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003684:	4659      	mov	r1, fp
 8003686:	00cb      	lsls	r3, r1, #3
 8003688:	4651      	mov	r1, sl
 800368a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800368e:	4651      	mov	r1, sl
 8003690:	00ca      	lsls	r2, r1, #3
 8003692:	4610      	mov	r0, r2
 8003694:	4619      	mov	r1, r3
 8003696:	4603      	mov	r3, r0
 8003698:	4642      	mov	r2, r8
 800369a:	189b      	adds	r3, r3, r2
 800369c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800369e:	464b      	mov	r3, r9
 80036a0:	460a      	mov	r2, r1
 80036a2:	eb42 0303 	adc.w	r3, r2, r3
 80036a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80036a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80036b2:	667a      	str	r2, [r7, #100]	@ 0x64
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	f04f 0300 	mov.w	r3, #0
 80036bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80036c0:	4649      	mov	r1, r9
 80036c2:	008b      	lsls	r3, r1, #2
 80036c4:	4641      	mov	r1, r8
 80036c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036ca:	4641      	mov	r1, r8
 80036cc:	008a      	lsls	r2, r1, #2
 80036ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80036d2:	f7fc fd85 	bl	80001e0 <__aeabi_uldivmod>
 80036d6:	4602      	mov	r2, r0
 80036d8:	460b      	mov	r3, r1
 80036da:	4b0d      	ldr	r3, [pc, #52]	@ (8003710 <UART_SetConfig+0x4e4>)
 80036dc:	fba3 1302 	umull	r1, r3, r3, r2
 80036e0:	095b      	lsrs	r3, r3, #5
 80036e2:	2164      	movs	r1, #100	@ 0x64
 80036e4:	fb01 f303 	mul.w	r3, r1, r3
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	011b      	lsls	r3, r3, #4
 80036ec:	3332      	adds	r3, #50	@ 0x32
 80036ee:	4a08      	ldr	r2, [pc, #32]	@ (8003710 <UART_SetConfig+0x4e4>)
 80036f0:	fba2 2303 	umull	r2, r3, r2, r3
 80036f4:	095b      	lsrs	r3, r3, #5
 80036f6:	f003 020f 	and.w	r2, r3, #15
 80036fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4422      	add	r2, r4
 8003702:	609a      	str	r2, [r3, #8]
}
 8003704:	bf00      	nop
 8003706:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800370a:	46bd      	mov	sp, r7
 800370c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003710:	51eb851f 	.word	0x51eb851f

08003714 <__NVIC_SetPriority>:
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	4603      	mov	r3, r0
 800371c:	6039      	str	r1, [r7, #0]
 800371e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003724:	2b00      	cmp	r3, #0
 8003726:	db0a      	blt.n	800373e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	b2da      	uxtb	r2, r3
 800372c:	490c      	ldr	r1, [pc, #48]	@ (8003760 <__NVIC_SetPriority+0x4c>)
 800372e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003732:	0112      	lsls	r2, r2, #4
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	440b      	add	r3, r1
 8003738:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800373c:	e00a      	b.n	8003754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	b2da      	uxtb	r2, r3
 8003742:	4908      	ldr	r1, [pc, #32]	@ (8003764 <__NVIC_SetPriority+0x50>)
 8003744:	79fb      	ldrb	r3, [r7, #7]
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	3b04      	subs	r3, #4
 800374c:	0112      	lsls	r2, r2, #4
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	440b      	add	r3, r1
 8003752:	761a      	strb	r2, [r3, #24]
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr
 8003760:	e000e100 	.word	0xe000e100
 8003764:	e000ed00 	.word	0xe000ed00

08003768 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800376c:	4b05      	ldr	r3, [pc, #20]	@ (8003784 <SysTick_Handler+0x1c>)
 800376e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003770:	f001 fd46 	bl	8005200 <xTaskGetSchedulerState>
 8003774:	4603      	mov	r3, r0
 8003776:	2b01      	cmp	r3, #1
 8003778:	d001      	beq.n	800377e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800377a:	f002 fb3d 	bl	8005df8 <xPortSysTickHandler>
  }
}
 800377e:	bf00      	nop
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	e000e010 	.word	0xe000e010

08003788 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800378c:	2100      	movs	r1, #0
 800378e:	f06f 0004 	mvn.w	r0, #4
 8003792:	f7ff ffbf 	bl	8003714 <__NVIC_SetPriority>
#endif
}
 8003796:	bf00      	nop
 8003798:	bd80      	pop	{r7, pc}
	...

0800379c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037a2:	f3ef 8305 	mrs	r3, IPSR
 80037a6:	603b      	str	r3, [r7, #0]
  return(result);
 80037a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80037ae:	f06f 0305 	mvn.w	r3, #5
 80037b2:	607b      	str	r3, [r7, #4]
 80037b4:	e00c      	b.n	80037d0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80037b6:	4b0a      	ldr	r3, [pc, #40]	@ (80037e0 <osKernelInitialize+0x44>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d105      	bne.n	80037ca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80037be:	4b08      	ldr	r3, [pc, #32]	@ (80037e0 <osKernelInitialize+0x44>)
 80037c0:	2201      	movs	r2, #1
 80037c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80037c4:	2300      	movs	r3, #0
 80037c6:	607b      	str	r3, [r7, #4]
 80037c8:	e002      	b.n	80037d0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80037ca:	f04f 33ff 	mov.w	r3, #4294967295
 80037ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80037d0:	687b      	ldr	r3, [r7, #4]
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	2000016c 	.word	0x2000016c

080037e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037ea:	f3ef 8305 	mrs	r3, IPSR
 80037ee:	603b      	str	r3, [r7, #0]
  return(result);
 80037f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <osKernelStart+0x1a>
    stat = osErrorISR;
 80037f6:	f06f 0305 	mvn.w	r3, #5
 80037fa:	607b      	str	r3, [r7, #4]
 80037fc:	e010      	b.n	8003820 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80037fe:	4b0b      	ldr	r3, [pc, #44]	@ (800382c <osKernelStart+0x48>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d109      	bne.n	800381a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003806:	f7ff ffbf 	bl	8003788 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800380a:	4b08      	ldr	r3, [pc, #32]	@ (800382c <osKernelStart+0x48>)
 800380c:	2202      	movs	r2, #2
 800380e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003810:	f001 f892 	bl	8004938 <vTaskStartScheduler>
      stat = osOK;
 8003814:	2300      	movs	r3, #0
 8003816:	607b      	str	r3, [r7, #4]
 8003818:	e002      	b.n	8003820 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800381a:	f04f 33ff 	mov.w	r3, #4294967295
 800381e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003820:	687b      	ldr	r3, [r7, #4]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	2000016c 	.word	0x2000016c

08003830 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003830:	b580      	push	{r7, lr}
 8003832:	b08e      	sub	sp, #56	@ 0x38
 8003834:	af04      	add	r7, sp, #16
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800383c:	2300      	movs	r3, #0
 800383e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003840:	f3ef 8305 	mrs	r3, IPSR
 8003844:	617b      	str	r3, [r7, #20]
  return(result);
 8003846:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003848:	2b00      	cmp	r3, #0
 800384a:	d17e      	bne.n	800394a <osThreadNew+0x11a>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d07b      	beq.n	800394a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003852:	2380      	movs	r3, #128	@ 0x80
 8003854:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003856:	2318      	movs	r3, #24
 8003858:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800385a:	2300      	movs	r3, #0
 800385c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800385e:	f04f 33ff 	mov.w	r3, #4294967295
 8003862:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d045      	beq.n	80038f6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d002      	beq.n	8003878 <osThreadNew+0x48>
        name = attr->name;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d002      	beq.n	8003886 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d008      	beq.n	800389e <osThreadNew+0x6e>
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	2b38      	cmp	r3, #56	@ 0x38
 8003890:	d805      	bhi.n	800389e <osThreadNew+0x6e>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <osThreadNew+0x72>
        return (NULL);
 800389e:	2300      	movs	r3, #0
 80038a0:	e054      	b.n	800394c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	089b      	lsrs	r3, r3, #2
 80038b0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00e      	beq.n	80038d8 <osThreadNew+0xa8>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	2ba7      	cmp	r3, #167	@ 0xa7
 80038c0:	d90a      	bls.n	80038d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d006      	beq.n	80038d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d002      	beq.n	80038d8 <osThreadNew+0xa8>
        mem = 1;
 80038d2:	2301      	movs	r3, #1
 80038d4:	61bb      	str	r3, [r7, #24]
 80038d6:	e010      	b.n	80038fa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10c      	bne.n	80038fa <osThreadNew+0xca>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d108      	bne.n	80038fa <osThreadNew+0xca>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d104      	bne.n	80038fa <osThreadNew+0xca>
          mem = 0;
 80038f0:	2300      	movs	r3, #0
 80038f2:	61bb      	str	r3, [r7, #24]
 80038f4:	e001      	b.n	80038fa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80038f6:	2300      	movs	r3, #0
 80038f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d110      	bne.n	8003922 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003908:	9202      	str	r2, [sp, #8]
 800390a:	9301      	str	r3, [sp, #4]
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	6a3a      	ldr	r2, [r7, #32]
 8003914:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 fe1a 	bl	8004550 <xTaskCreateStatic>
 800391c:	4603      	mov	r3, r0
 800391e:	613b      	str	r3, [r7, #16]
 8003920:	e013      	b.n	800394a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d110      	bne.n	800394a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003928:	6a3b      	ldr	r3, [r7, #32]
 800392a:	b29a      	uxth	r2, r3
 800392c:	f107 0310 	add.w	r3, r7, #16
 8003930:	9301      	str	r3, [sp, #4]
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f000 fe68 	bl	8004610 <xTaskCreate>
 8003940:	4603      	mov	r3, r0
 8003942:	2b01      	cmp	r3, #1
 8003944:	d001      	beq.n	800394a <osThreadNew+0x11a>
            hTask = NULL;
 8003946:	2300      	movs	r3, #0
 8003948:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800394a:	693b      	ldr	r3, [r7, #16]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3728      	adds	r7, #40	@ 0x28
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800395c:	f3ef 8305 	mrs	r3, IPSR
 8003960:	60bb      	str	r3, [r7, #8]
  return(result);
 8003962:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003964:	2b00      	cmp	r3, #0
 8003966:	d003      	beq.n	8003970 <osDelay+0x1c>
    stat = osErrorISR;
 8003968:	f06f 0305 	mvn.w	r3, #5
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	e007      	b.n	8003980 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003970:	2300      	movs	r3, #0
 8003972:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d002      	beq.n	8003980 <osDelay+0x2c>
      vTaskDelay(ticks);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 ffa6 	bl	80048cc <vTaskDelay>
    }
  }

  return (stat);
 8003980:	68fb      	ldr	r3, [r7, #12]
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
	...

0800398c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	4a07      	ldr	r2, [pc, #28]	@ (80039b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800399c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	4a06      	ldr	r2, [pc, #24]	@ (80039bc <vApplicationGetIdleTaskMemory+0x30>)
 80039a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2280      	movs	r2, #128	@ 0x80
 80039a8:	601a      	str	r2, [r3, #0]
}
 80039aa:	bf00      	nop
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	20000170 	.word	0x20000170
 80039bc:	20000218 	.word	0x20000218

080039c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4a07      	ldr	r2, [pc, #28]	@ (80039ec <vApplicationGetTimerTaskMemory+0x2c>)
 80039d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	4a06      	ldr	r2, [pc, #24]	@ (80039f0 <vApplicationGetTimerTaskMemory+0x30>)
 80039d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039de:	601a      	str	r2, [r3, #0]
}
 80039e0:	bf00      	nop
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	20000418 	.word	0x20000418
 80039f0:	200004c0 	.word	0x200004c0

080039f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f103 0208 	add.w	r2, r3, #8
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f04f 32ff 	mov.w	r2, #4294967295
 8003a0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f103 0208 	add.w	r2, r3, #8
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f103 0208 	add.w	r2, r3, #8
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b085      	sub	sp, #20
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
 8003a56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	601a      	str	r2, [r3, #0]
}
 8003a8a:	bf00      	nop
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a96:	b480      	push	{r7}
 8003a98:	b085      	sub	sp, #20
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aac:	d103      	bne.n	8003ab6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	e00c      	b.n	8003ad0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	3308      	adds	r3, #8
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	e002      	b.n	8003ac4 <vListInsert+0x2e>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d2f6      	bcs.n	8003abe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	601a      	str	r2, [r3, #0]
}
 8003afc:	bf00      	nop
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6892      	ldr	r2, [r2, #8]
 8003b1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6852      	ldr	r2, [r2, #4]
 8003b28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d103      	bne.n	8003b3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	1e5a      	subs	r2, r3, #1
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10b      	bne.n	8003b88 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b74:	f383 8811 	msr	BASEPRI, r3
 8003b78:	f3bf 8f6f 	isb	sy
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003b82:	bf00      	nop
 8003b84:	bf00      	nop
 8003b86:	e7fd      	b.n	8003b84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003b88:	f002 f8a6 	bl	8005cd8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b94:	68f9      	ldr	r1, [r7, #12]
 8003b96:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003b98:	fb01 f303 	mul.w	r3, r1, r3
 8003b9c:	441a      	add	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	68f9      	ldr	r1, [r7, #12]
 8003bbc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003bbe:	fb01 f303 	mul.w	r3, r1, r3
 8003bc2:	441a      	add	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	22ff      	movs	r2, #255	@ 0xff
 8003bcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	22ff      	movs	r2, #255	@ 0xff
 8003bd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d114      	bne.n	8003c08 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d01a      	beq.n	8003c1c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	3310      	adds	r3, #16
 8003bea:	4618      	mov	r0, r3
 8003bec:	f001 f942 	bl	8004e74 <xTaskRemoveFromEventList>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d012      	beq.n	8003c1c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8003c2c <xQueueGenericReset+0xd0>)
 8003bf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	f3bf 8f4f 	dsb	sy
 8003c02:	f3bf 8f6f 	isb	sy
 8003c06:	e009      	b.n	8003c1c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	3310      	adds	r3, #16
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff fef1 	bl	80039f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	3324      	adds	r3, #36	@ 0x24
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7ff feec 	bl	80039f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003c1c:	f002 f88e 	bl	8005d3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003c20:	2301      	movs	r3, #1
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	e000ed04 	.word	0xe000ed04

08003c30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b08e      	sub	sp, #56	@ 0x38
 8003c34:	af02      	add	r7, sp, #8
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
 8003c3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10b      	bne.n	8003c5c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c48:	f383 8811 	msr	BASEPRI, r3
 8003c4c:	f3bf 8f6f 	isb	sy
 8003c50:	f3bf 8f4f 	dsb	sy
 8003c54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003c56:	bf00      	nop
 8003c58:	bf00      	nop
 8003c5a:	e7fd      	b.n	8003c58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10b      	bne.n	8003c7a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c66:	f383 8811 	msr	BASEPRI, r3
 8003c6a:	f3bf 8f6f 	isb	sy
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003c74:	bf00      	nop
 8003c76:	bf00      	nop
 8003c78:	e7fd      	b.n	8003c76 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <xQueueGenericCreateStatic+0x56>
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <xQueueGenericCreateStatic+0x5a>
 8003c86:	2301      	movs	r3, #1
 8003c88:	e000      	b.n	8003c8c <xQueueGenericCreateStatic+0x5c>
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10b      	bne.n	8003ca8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c94:	f383 8811 	msr	BASEPRI, r3
 8003c98:	f3bf 8f6f 	isb	sy
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	623b      	str	r3, [r7, #32]
}
 8003ca2:	bf00      	nop
 8003ca4:	bf00      	nop
 8003ca6:	e7fd      	b.n	8003ca4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d102      	bne.n	8003cb4 <xQueueGenericCreateStatic+0x84>
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <xQueueGenericCreateStatic+0x88>
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e000      	b.n	8003cba <xQueueGenericCreateStatic+0x8a>
 8003cb8:	2300      	movs	r3, #0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10b      	bne.n	8003cd6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cc2:	f383 8811 	msr	BASEPRI, r3
 8003cc6:	f3bf 8f6f 	isb	sy
 8003cca:	f3bf 8f4f 	dsb	sy
 8003cce:	61fb      	str	r3, [r7, #28]
}
 8003cd0:	bf00      	nop
 8003cd2:	bf00      	nop
 8003cd4:	e7fd      	b.n	8003cd2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003cd6:	2350      	movs	r3, #80	@ 0x50
 8003cd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	2b50      	cmp	r3, #80	@ 0x50
 8003cde:	d00b      	beq.n	8003cf8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ce4:	f383 8811 	msr	BASEPRI, r3
 8003ce8:	f3bf 8f6f 	isb	sy
 8003cec:	f3bf 8f4f 	dsb	sy
 8003cf0:	61bb      	str	r3, [r7, #24]
}
 8003cf2:	bf00      	nop
 8003cf4:	bf00      	nop
 8003cf6:	e7fd      	b.n	8003cf4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003cf8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00d      	beq.n	8003d20 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d0c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	4613      	mov	r3, r2
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	68b9      	ldr	r1, [r7, #8]
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 f805 	bl	8003d2a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3730      	adds	r7, #48	@ 0x30
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b084      	sub	sp, #16
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	60f8      	str	r0, [r7, #12]
 8003d32:	60b9      	str	r1, [r7, #8]
 8003d34:	607a      	str	r2, [r7, #4]
 8003d36:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d103      	bne.n	8003d46 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	e002      	b.n	8003d4c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d58:	2101      	movs	r1, #1
 8003d5a:	69b8      	ldr	r0, [r7, #24]
 8003d5c:	f7ff fefe 	bl	8003b5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	78fa      	ldrb	r2, [r7, #3]
 8003d64:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003d68:	bf00      	nop
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b08e      	sub	sp, #56	@ 0x38
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
 8003d7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10b      	bne.n	8003da4 <xQueueGenericSend+0x34>
	__asm volatile
 8003d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d90:	f383 8811 	msr	BASEPRI, r3
 8003d94:	f3bf 8f6f 	isb	sy
 8003d98:	f3bf 8f4f 	dsb	sy
 8003d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003d9e:	bf00      	nop
 8003da0:	bf00      	nop
 8003da2:	e7fd      	b.n	8003da0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d103      	bne.n	8003db2 <xQueueGenericSend+0x42>
 8003daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <xQueueGenericSend+0x46>
 8003db2:	2301      	movs	r3, #1
 8003db4:	e000      	b.n	8003db8 <xQueueGenericSend+0x48>
 8003db6:	2300      	movs	r3, #0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10b      	bne.n	8003dd4 <xQueueGenericSend+0x64>
	__asm volatile
 8003dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dc0:	f383 8811 	msr	BASEPRI, r3
 8003dc4:	f3bf 8f6f 	isb	sy
 8003dc8:	f3bf 8f4f 	dsb	sy
 8003dcc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003dce:	bf00      	nop
 8003dd0:	bf00      	nop
 8003dd2:	e7fd      	b.n	8003dd0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d103      	bne.n	8003de2 <xQueueGenericSend+0x72>
 8003dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d101      	bne.n	8003de6 <xQueueGenericSend+0x76>
 8003de2:	2301      	movs	r3, #1
 8003de4:	e000      	b.n	8003de8 <xQueueGenericSend+0x78>
 8003de6:	2300      	movs	r3, #0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10b      	bne.n	8003e04 <xQueueGenericSend+0x94>
	__asm volatile
 8003dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df0:	f383 8811 	msr	BASEPRI, r3
 8003df4:	f3bf 8f6f 	isb	sy
 8003df8:	f3bf 8f4f 	dsb	sy
 8003dfc:	623b      	str	r3, [r7, #32]
}
 8003dfe:	bf00      	nop
 8003e00:	bf00      	nop
 8003e02:	e7fd      	b.n	8003e00 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e04:	f001 f9fc 	bl	8005200 <xTaskGetSchedulerState>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d102      	bne.n	8003e14 <xQueueGenericSend+0xa4>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <xQueueGenericSend+0xa8>
 8003e14:	2301      	movs	r3, #1
 8003e16:	e000      	b.n	8003e1a <xQueueGenericSend+0xaa>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10b      	bne.n	8003e36 <xQueueGenericSend+0xc6>
	__asm volatile
 8003e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e22:	f383 8811 	msr	BASEPRI, r3
 8003e26:	f3bf 8f6f 	isb	sy
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	61fb      	str	r3, [r7, #28]
}
 8003e30:	bf00      	nop
 8003e32:	bf00      	nop
 8003e34:	e7fd      	b.n	8003e32 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e36:	f001 ff4f 	bl	8005cd8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d302      	bcc.n	8003e4c <xQueueGenericSend+0xdc>
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d129      	bne.n	8003ea0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	68b9      	ldr	r1, [r7, #8]
 8003e50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e52:	f000 fa0f 	bl	8004274 <prvCopyDataToQueue>
 8003e56:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d010      	beq.n	8003e82 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e62:	3324      	adds	r3, #36	@ 0x24
 8003e64:	4618      	mov	r0, r3
 8003e66:	f001 f805 	bl	8004e74 <xTaskRemoveFromEventList>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d013      	beq.n	8003e98 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003e70:	4b3f      	ldr	r3, [pc, #252]	@ (8003f70 <xQueueGenericSend+0x200>)
 8003e72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	f3bf 8f4f 	dsb	sy
 8003e7c:	f3bf 8f6f 	isb	sy
 8003e80:	e00a      	b.n	8003e98 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d007      	beq.n	8003e98 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003e88:	4b39      	ldr	r3, [pc, #228]	@ (8003f70 <xQueueGenericSend+0x200>)
 8003e8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	f3bf 8f4f 	dsb	sy
 8003e94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003e98:	f001 ff50 	bl	8005d3c <vPortExitCritical>
				return pdPASS;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e063      	b.n	8003f68 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d103      	bne.n	8003eae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ea6:	f001 ff49 	bl	8005d3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	e05c      	b.n	8003f68 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d106      	bne.n	8003ec2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003eb4:	f107 0314 	add.w	r3, r7, #20
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f001 f83f 	bl	8004f3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ec2:	f001 ff3b 	bl	8005d3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ec6:	f000 fda7 	bl	8004a18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003eca:	f001 ff05 	bl	8005cd8 <vPortEnterCritical>
 8003ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ed4:	b25b      	sxtb	r3, r3
 8003ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eda:	d103      	bne.n	8003ee4 <xQueueGenericSend+0x174>
 8003edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003eea:	b25b      	sxtb	r3, r3
 8003eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef0:	d103      	bne.n	8003efa <xQueueGenericSend+0x18a>
 8003ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003efa:	f001 ff1f 	bl	8005d3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003efe:	1d3a      	adds	r2, r7, #4
 8003f00:	f107 0314 	add.w	r3, r7, #20
 8003f04:	4611      	mov	r1, r2
 8003f06:	4618      	mov	r0, r3
 8003f08:	f001 f82e 	bl	8004f68 <xTaskCheckForTimeOut>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d124      	bne.n	8003f5c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003f12:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f14:	f000 faa6 	bl	8004464 <prvIsQueueFull>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d018      	beq.n	8003f50 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f20:	3310      	adds	r3, #16
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	4611      	mov	r1, r2
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 ff52 	bl	8004dd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003f2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f2e:	f000 fa31 	bl	8004394 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003f32:	f000 fd7f 	bl	8004a34 <xTaskResumeAll>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f47f af7c 	bne.w	8003e36 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8003f70 <xQueueGenericSend+0x200>)
 8003f40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	f3bf 8f4f 	dsb	sy
 8003f4a:	f3bf 8f6f 	isb	sy
 8003f4e:	e772      	b.n	8003e36 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003f50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f52:	f000 fa1f 	bl	8004394 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f56:	f000 fd6d 	bl	8004a34 <xTaskResumeAll>
 8003f5a:	e76c      	b.n	8003e36 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003f5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f5e:	f000 fa19 	bl	8004394 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f62:	f000 fd67 	bl	8004a34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003f66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3738      	adds	r7, #56	@ 0x38
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	e000ed04 	.word	0xe000ed04

08003f74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b090      	sub	sp, #64	@ 0x40
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
 8003f80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10b      	bne.n	8003fa4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f90:	f383 8811 	msr	BASEPRI, r3
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	f3bf 8f4f 	dsb	sy
 8003f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003f9e:	bf00      	nop
 8003fa0:	bf00      	nop
 8003fa2:	e7fd      	b.n	8003fa0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d103      	bne.n	8003fb2 <xQueueGenericSendFromISR+0x3e>
 8003faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <xQueueGenericSendFromISR+0x42>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e000      	b.n	8003fb8 <xQueueGenericSendFromISR+0x44>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10b      	bne.n	8003fd4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc0:	f383 8811 	msr	BASEPRI, r3
 8003fc4:	f3bf 8f6f 	isb	sy
 8003fc8:	f3bf 8f4f 	dsb	sy
 8003fcc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003fce:	bf00      	nop
 8003fd0:	bf00      	nop
 8003fd2:	e7fd      	b.n	8003fd0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d103      	bne.n	8003fe2 <xQueueGenericSendFromISR+0x6e>
 8003fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d101      	bne.n	8003fe6 <xQueueGenericSendFromISR+0x72>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e000      	b.n	8003fe8 <xQueueGenericSendFromISR+0x74>
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10b      	bne.n	8004004 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ff0:	f383 8811 	msr	BASEPRI, r3
 8003ff4:	f3bf 8f6f 	isb	sy
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	623b      	str	r3, [r7, #32]
}
 8003ffe:	bf00      	nop
 8004000:	bf00      	nop
 8004002:	e7fd      	b.n	8004000 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004004:	f001 ff48 	bl	8005e98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004008:	f3ef 8211 	mrs	r2, BASEPRI
 800400c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004010:	f383 8811 	msr	BASEPRI, r3
 8004014:	f3bf 8f6f 	isb	sy
 8004018:	f3bf 8f4f 	dsb	sy
 800401c:	61fa      	str	r2, [r7, #28]
 800401e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004020:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004022:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004026:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800402a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800402c:	429a      	cmp	r2, r3
 800402e:	d302      	bcc.n	8004036 <xQueueGenericSendFromISR+0xc2>
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	2b02      	cmp	r3, #2
 8004034:	d12f      	bne.n	8004096 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004038:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800403c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004044:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	68b9      	ldr	r1, [r7, #8]
 800404a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800404c:	f000 f912 	bl	8004274 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004050:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004058:	d112      	bne.n	8004080 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800405a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800405c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405e:	2b00      	cmp	r3, #0
 8004060:	d016      	beq.n	8004090 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004064:	3324      	adds	r3, #36	@ 0x24
 8004066:	4618      	mov	r0, r3
 8004068:	f000 ff04 	bl	8004e74 <xTaskRemoveFromEventList>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00e      	beq.n	8004090 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00b      	beq.n	8004090 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	e007      	b.n	8004090 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004080:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004084:	3301      	adds	r3, #1
 8004086:	b2db      	uxtb	r3, r3
 8004088:	b25a      	sxtb	r2, r3
 800408a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800408c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004090:	2301      	movs	r3, #1
 8004092:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004094:	e001      	b.n	800409a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004096:	2300      	movs	r3, #0
 8004098:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800409a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800409c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80040a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80040a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3740      	adds	r7, #64	@ 0x40
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b08c      	sub	sp, #48	@ 0x30
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80040bc:	2300      	movs	r3, #0
 80040be:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80040c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10b      	bne.n	80040e2 <xQueueReceive+0x32>
	__asm volatile
 80040ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ce:	f383 8811 	msr	BASEPRI, r3
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	f3bf 8f4f 	dsb	sy
 80040da:	623b      	str	r3, [r7, #32]
}
 80040dc:	bf00      	nop
 80040de:	bf00      	nop
 80040e0:	e7fd      	b.n	80040de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d103      	bne.n	80040f0 <xQueueReceive+0x40>
 80040e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <xQueueReceive+0x44>
 80040f0:	2301      	movs	r3, #1
 80040f2:	e000      	b.n	80040f6 <xQueueReceive+0x46>
 80040f4:	2300      	movs	r3, #0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10b      	bne.n	8004112 <xQueueReceive+0x62>
	__asm volatile
 80040fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040fe:	f383 8811 	msr	BASEPRI, r3
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	f3bf 8f4f 	dsb	sy
 800410a:	61fb      	str	r3, [r7, #28]
}
 800410c:	bf00      	nop
 800410e:	bf00      	nop
 8004110:	e7fd      	b.n	800410e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004112:	f001 f875 	bl	8005200 <xTaskGetSchedulerState>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d102      	bne.n	8004122 <xQueueReceive+0x72>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <xQueueReceive+0x76>
 8004122:	2301      	movs	r3, #1
 8004124:	e000      	b.n	8004128 <xQueueReceive+0x78>
 8004126:	2300      	movs	r3, #0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10b      	bne.n	8004144 <xQueueReceive+0x94>
	__asm volatile
 800412c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004130:	f383 8811 	msr	BASEPRI, r3
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	61bb      	str	r3, [r7, #24]
}
 800413e:	bf00      	nop
 8004140:	bf00      	nop
 8004142:	e7fd      	b.n	8004140 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004144:	f001 fdc8 	bl	8005cd8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800414a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800414c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800414e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004150:	2b00      	cmp	r3, #0
 8004152:	d01f      	beq.n	8004194 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004154:	68b9      	ldr	r1, [r7, #8]
 8004156:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004158:	f000 f8f6 	bl	8004348 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800415c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415e:	1e5a      	subs	r2, r3, #1
 8004160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004162:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00f      	beq.n	800418c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800416c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800416e:	3310      	adds	r3, #16
 8004170:	4618      	mov	r0, r3
 8004172:	f000 fe7f 	bl	8004e74 <xTaskRemoveFromEventList>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d007      	beq.n	800418c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800417c:	4b3c      	ldr	r3, [pc, #240]	@ (8004270 <xQueueReceive+0x1c0>)
 800417e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	f3bf 8f4f 	dsb	sy
 8004188:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800418c:	f001 fdd6 	bl	8005d3c <vPortExitCritical>
				return pdPASS;
 8004190:	2301      	movs	r3, #1
 8004192:	e069      	b.n	8004268 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d103      	bne.n	80041a2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800419a:	f001 fdcf 	bl	8005d3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800419e:	2300      	movs	r3, #0
 80041a0:	e062      	b.n	8004268 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d106      	bne.n	80041b6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041a8:	f107 0310 	add.w	r3, r7, #16
 80041ac:	4618      	mov	r0, r3
 80041ae:	f000 fec5 	bl	8004f3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041b2:	2301      	movs	r3, #1
 80041b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041b6:	f001 fdc1 	bl	8005d3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041ba:	f000 fc2d 	bl	8004a18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041be:	f001 fd8b 	bl	8005cd8 <vPortEnterCritical>
 80041c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80041c8:	b25b      	sxtb	r3, r3
 80041ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ce:	d103      	bne.n	80041d8 <xQueueReceive+0x128>
 80041d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041de:	b25b      	sxtb	r3, r3
 80041e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e4:	d103      	bne.n	80041ee <xQueueReceive+0x13e>
 80041e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041ee:	f001 fda5 	bl	8005d3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041f2:	1d3a      	adds	r2, r7, #4
 80041f4:	f107 0310 	add.w	r3, r7, #16
 80041f8:	4611      	mov	r1, r2
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 feb4 	bl	8004f68 <xTaskCheckForTimeOut>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d123      	bne.n	800424e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004206:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004208:	f000 f916 	bl	8004438 <prvIsQueueEmpty>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d017      	beq.n	8004242 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004214:	3324      	adds	r3, #36	@ 0x24
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	4611      	mov	r1, r2
 800421a:	4618      	mov	r0, r3
 800421c:	f000 fdd8 	bl	8004dd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004220:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004222:	f000 f8b7 	bl	8004394 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004226:	f000 fc05 	bl	8004a34 <xTaskResumeAll>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d189      	bne.n	8004144 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004230:	4b0f      	ldr	r3, [pc, #60]	@ (8004270 <xQueueReceive+0x1c0>)
 8004232:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	f3bf 8f4f 	dsb	sy
 800423c:	f3bf 8f6f 	isb	sy
 8004240:	e780      	b.n	8004144 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004242:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004244:	f000 f8a6 	bl	8004394 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004248:	f000 fbf4 	bl	8004a34 <xTaskResumeAll>
 800424c:	e77a      	b.n	8004144 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800424e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004250:	f000 f8a0 	bl	8004394 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004254:	f000 fbee 	bl	8004a34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004258:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800425a:	f000 f8ed 	bl	8004438 <prvIsQueueEmpty>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	f43f af6f 	beq.w	8004144 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004266:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004268:	4618      	mov	r0, r3
 800426a:	3730      	adds	r7, #48	@ 0x30
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	e000ed04 	.word	0xe000ed04

08004274 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004280:	2300      	movs	r3, #0
 8004282:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004288:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10d      	bne.n	80042ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d14d      	bne.n	8004336 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 ffcc 	bl	800523c <xTaskPriorityDisinherit>
 80042a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	609a      	str	r2, [r3, #8]
 80042ac:	e043      	b.n	8004336 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d119      	bne.n	80042e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6858      	ldr	r0, [r3, #4]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042bc:	461a      	mov	r2, r3
 80042be:	68b9      	ldr	r1, [r7, #8]
 80042c0:	f002 f89e 	bl	8006400 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042cc:	441a      	add	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d32b      	bcc.n	8004336 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	605a      	str	r2, [r3, #4]
 80042e6:	e026      	b.n	8004336 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	68d8      	ldr	r0, [r3, #12]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f0:	461a      	mov	r2, r3
 80042f2:	68b9      	ldr	r1, [r7, #8]
 80042f4:	f002 f884 	bl	8006400 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	68da      	ldr	r2, [r3, #12]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004300:	425b      	negs	r3, r3
 8004302:	441a      	add	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	68da      	ldr	r2, [r3, #12]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	429a      	cmp	r2, r3
 8004312:	d207      	bcs.n	8004324 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431c:	425b      	negs	r3, r3
 800431e:	441a      	add	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b02      	cmp	r3, #2
 8004328:	d105      	bne.n	8004336 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	3b01      	subs	r3, #1
 8004334:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1c5a      	adds	r2, r3, #1
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800433e:	697b      	ldr	r3, [r7, #20]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3718      	adds	r7, #24
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004356:	2b00      	cmp	r3, #0
 8004358:	d018      	beq.n	800438c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68da      	ldr	r2, [r3, #12]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004362:	441a      	add	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68da      	ldr	r2, [r3, #12]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	429a      	cmp	r2, r3
 8004372:	d303      	bcc.n	800437c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68d9      	ldr	r1, [r3, #12]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004384:	461a      	mov	r2, r3
 8004386:	6838      	ldr	r0, [r7, #0]
 8004388:	f002 f83a 	bl	8006400 <memcpy>
	}
}
 800438c:	bf00      	nop
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800439c:	f001 fc9c 	bl	8005cd8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80043a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80043a8:	e011      	b.n	80043ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d012      	beq.n	80043d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	3324      	adds	r3, #36	@ 0x24
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 fd5c 	bl	8004e74 <xTaskRemoveFromEventList>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80043c2:	f000 fe35 	bl	8005030 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80043c6:	7bfb      	ldrb	r3, [r7, #15]
 80043c8:	3b01      	subs	r3, #1
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80043ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	dce9      	bgt.n	80043aa <prvUnlockQueue+0x16>
 80043d6:	e000      	b.n	80043da <prvUnlockQueue+0x46>
					break;
 80043d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	22ff      	movs	r2, #255	@ 0xff
 80043de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80043e2:	f001 fcab 	bl	8005d3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80043e6:	f001 fc77 	bl	8005cd8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80043f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80043f2:	e011      	b.n	8004418 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d012      	beq.n	8004422 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	3310      	adds	r3, #16
 8004400:	4618      	mov	r0, r3
 8004402:	f000 fd37 	bl	8004e74 <xTaskRemoveFromEventList>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800440c:	f000 fe10 	bl	8005030 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004410:	7bbb      	ldrb	r3, [r7, #14]
 8004412:	3b01      	subs	r3, #1
 8004414:	b2db      	uxtb	r3, r3
 8004416:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004418:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800441c:	2b00      	cmp	r3, #0
 800441e:	dce9      	bgt.n	80043f4 <prvUnlockQueue+0x60>
 8004420:	e000      	b.n	8004424 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004422:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	22ff      	movs	r2, #255	@ 0xff
 8004428:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800442c:	f001 fc86 	bl	8005d3c <vPortExitCritical>
}
 8004430:	bf00      	nop
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004440:	f001 fc4a 	bl	8005cd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004448:	2b00      	cmp	r3, #0
 800444a:	d102      	bne.n	8004452 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800444c:	2301      	movs	r3, #1
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	e001      	b.n	8004456 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004452:	2300      	movs	r3, #0
 8004454:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004456:	f001 fc71 	bl	8005d3c <vPortExitCritical>

	return xReturn;
 800445a:	68fb      	ldr	r3, [r7, #12]
}
 800445c:	4618      	mov	r0, r3
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800446c:	f001 fc34 	bl	8005cd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004478:	429a      	cmp	r2, r3
 800447a:	d102      	bne.n	8004482 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800447c:	2301      	movs	r3, #1
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	e001      	b.n	8004486 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004482:	2300      	movs	r3, #0
 8004484:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004486:	f001 fc59 	bl	8005d3c <vPortExitCritical>

	return xReturn;
 800448a:	68fb      	ldr	r3, [r7, #12]
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800449e:	2300      	movs	r3, #0
 80044a0:	60fb      	str	r3, [r7, #12]
 80044a2:	e014      	b.n	80044ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80044a4:	4a0f      	ldr	r2, [pc, #60]	@ (80044e4 <vQueueAddToRegistry+0x50>)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10b      	bne.n	80044c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80044b0:	490c      	ldr	r1, [pc, #48]	@ (80044e4 <vQueueAddToRegistry+0x50>)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80044ba:	4a0a      	ldr	r2, [pc, #40]	@ (80044e4 <vQueueAddToRegistry+0x50>)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	4413      	add	r3, r2
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80044c6:	e006      	b.n	80044d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	3301      	adds	r3, #1
 80044cc:	60fb      	str	r3, [r7, #12]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2b07      	cmp	r3, #7
 80044d2:	d9e7      	bls.n	80044a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	200008c0 	.word	0x200008c0

080044e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80044f8:	f001 fbee 	bl	8005cd8 <vPortEnterCritical>
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004502:	b25b      	sxtb	r3, r3
 8004504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004508:	d103      	bne.n	8004512 <vQueueWaitForMessageRestricted+0x2a>
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004518:	b25b      	sxtb	r3, r3
 800451a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451e:	d103      	bne.n	8004528 <vQueueWaitForMessageRestricted+0x40>
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004528:	f001 fc08 	bl	8005d3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004530:	2b00      	cmp	r3, #0
 8004532:	d106      	bne.n	8004542 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	3324      	adds	r3, #36	@ 0x24
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	68b9      	ldr	r1, [r7, #8]
 800453c:	4618      	mov	r0, r3
 800453e:	f000 fc6d 	bl	8004e1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004542:	6978      	ldr	r0, [r7, #20]
 8004544:	f7ff ff26 	bl	8004394 <prvUnlockQueue>
	}
 8004548:	bf00      	nop
 800454a:	3718      	adds	r7, #24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004550:	b580      	push	{r7, lr}
 8004552:	b08e      	sub	sp, #56	@ 0x38
 8004554:	af04      	add	r7, sp, #16
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
 800455c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800455e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10b      	bne.n	800457c <xTaskCreateStatic+0x2c>
	__asm volatile
 8004564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004568:	f383 8811 	msr	BASEPRI, r3
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	623b      	str	r3, [r7, #32]
}
 8004576:	bf00      	nop
 8004578:	bf00      	nop
 800457a:	e7fd      	b.n	8004578 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800457c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10b      	bne.n	800459a <xTaskCreateStatic+0x4a>
	__asm volatile
 8004582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004586:	f383 8811 	msr	BASEPRI, r3
 800458a:	f3bf 8f6f 	isb	sy
 800458e:	f3bf 8f4f 	dsb	sy
 8004592:	61fb      	str	r3, [r7, #28]
}
 8004594:	bf00      	nop
 8004596:	bf00      	nop
 8004598:	e7fd      	b.n	8004596 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800459a:	23a8      	movs	r3, #168	@ 0xa8
 800459c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	2ba8      	cmp	r3, #168	@ 0xa8
 80045a2:	d00b      	beq.n	80045bc <xTaskCreateStatic+0x6c>
	__asm volatile
 80045a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a8:	f383 8811 	msr	BASEPRI, r3
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	61bb      	str	r3, [r7, #24]
}
 80045b6:	bf00      	nop
 80045b8:	bf00      	nop
 80045ba:	e7fd      	b.n	80045b8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80045bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80045be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d01e      	beq.n	8004602 <xTaskCreateStatic+0xb2>
 80045c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d01b      	beq.n	8004602 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80045ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045cc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80045ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80045d2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80045d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d6:	2202      	movs	r2, #2
 80045d8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80045dc:	2300      	movs	r3, #0
 80045de:	9303      	str	r3, [sp, #12]
 80045e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e2:	9302      	str	r3, [sp, #8]
 80045e4:	f107 0314 	add.w	r3, r7, #20
 80045e8:	9301      	str	r3, [sp, #4]
 80045ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	68b9      	ldr	r1, [r7, #8]
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 f851 	bl	800469c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80045fc:	f000 f8f6 	bl	80047ec <prvAddNewTaskToReadyList>
 8004600:	e001      	b.n	8004606 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004602:	2300      	movs	r3, #0
 8004604:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004606:	697b      	ldr	r3, [r7, #20]
	}
 8004608:	4618      	mov	r0, r3
 800460a:	3728      	adds	r7, #40	@ 0x28
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004610:	b580      	push	{r7, lr}
 8004612:	b08c      	sub	sp, #48	@ 0x30
 8004614:	af04      	add	r7, sp, #16
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	603b      	str	r3, [r7, #0]
 800461c:	4613      	mov	r3, r2
 800461e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004620:	88fb      	ldrh	r3, [r7, #6]
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4618      	mov	r0, r3
 8004626:	f001 fc79 	bl	8005f1c <pvPortMalloc>
 800462a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00e      	beq.n	8004650 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004632:	20a8      	movs	r0, #168	@ 0xa8
 8004634:	f001 fc72 	bl	8005f1c <pvPortMalloc>
 8004638:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d003      	beq.n	8004648 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	631a      	str	r2, [r3, #48]	@ 0x30
 8004646:	e005      	b.n	8004654 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004648:	6978      	ldr	r0, [r7, #20]
 800464a:	f001 fd35 	bl	80060b8 <vPortFree>
 800464e:	e001      	b.n	8004654 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004650:	2300      	movs	r3, #0
 8004652:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d017      	beq.n	800468a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004662:	88fa      	ldrh	r2, [r7, #6]
 8004664:	2300      	movs	r3, #0
 8004666:	9303      	str	r3, [sp, #12]
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	9302      	str	r3, [sp, #8]
 800466c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800466e:	9301      	str	r3, [sp, #4]
 8004670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004672:	9300      	str	r3, [sp, #0]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	68b9      	ldr	r1, [r7, #8]
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 f80f 	bl	800469c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800467e:	69f8      	ldr	r0, [r7, #28]
 8004680:	f000 f8b4 	bl	80047ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004684:	2301      	movs	r3, #1
 8004686:	61bb      	str	r3, [r7, #24]
 8004688:	e002      	b.n	8004690 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800468a:	f04f 33ff 	mov.w	r3, #4294967295
 800468e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004690:	69bb      	ldr	r3, [r7, #24]
	}
 8004692:	4618      	mov	r0, r3
 8004694:	3720      	adds	r7, #32
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
	...

0800469c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b088      	sub	sp, #32
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
 80046a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80046aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ac:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	461a      	mov	r2, r3
 80046b4:	21a5      	movs	r1, #165	@ 0xa5
 80046b6:	f001 fe1f 	bl	80062f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80046ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80046c4:	3b01      	subs	r3, #1
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	f023 0307 	bic.w	r3, r3, #7
 80046d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00b      	beq.n	80046f6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80046de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e2:	f383 8811 	msr	BASEPRI, r3
 80046e6:	f3bf 8f6f 	isb	sy
 80046ea:	f3bf 8f4f 	dsb	sy
 80046ee:	617b      	str	r3, [r7, #20]
}
 80046f0:	bf00      	nop
 80046f2:	bf00      	nop
 80046f4:	e7fd      	b.n	80046f2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d01f      	beq.n	800473c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046fc:	2300      	movs	r3, #0
 80046fe:	61fb      	str	r3, [r7, #28]
 8004700:	e012      	b.n	8004728 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	4413      	add	r3, r2
 8004708:	7819      	ldrb	r1, [r3, #0]
 800470a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	4413      	add	r3, r2
 8004710:	3334      	adds	r3, #52	@ 0x34
 8004712:	460a      	mov	r2, r1
 8004714:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	4413      	add	r3, r2
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d006      	beq.n	8004730 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	3301      	adds	r3, #1
 8004726:	61fb      	str	r3, [r7, #28]
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	2b0f      	cmp	r3, #15
 800472c:	d9e9      	bls.n	8004702 <prvInitialiseNewTask+0x66>
 800472e:	e000      	b.n	8004732 <prvInitialiseNewTask+0x96>
			{
				break;
 8004730:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800473a:	e003      	b.n	8004744 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800473c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004746:	2b37      	cmp	r3, #55	@ 0x37
 8004748:	d901      	bls.n	800474e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800474a:	2337      	movs	r3, #55	@ 0x37
 800474c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800474e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004750:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004752:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004756:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004758:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800475a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800475c:	2200      	movs	r2, #0
 800475e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004762:	3304      	adds	r3, #4
 8004764:	4618      	mov	r0, r3
 8004766:	f7ff f965 	bl	8003a34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800476a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476c:	3318      	adds	r3, #24
 800476e:	4618      	mov	r0, r3
 8004770:	f7ff f960 	bl	8003a34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004776:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004778:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800477a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800477c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004782:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004786:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004788:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800478a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800478c:	2200      	movs	r2, #0
 800478e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004794:	2200      	movs	r2, #0
 8004796:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800479a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800479c:	3354      	adds	r3, #84	@ 0x54
 800479e:	224c      	movs	r2, #76	@ 0x4c
 80047a0:	2100      	movs	r1, #0
 80047a2:	4618      	mov	r0, r3
 80047a4:	f001 fda8 	bl	80062f8 <memset>
 80047a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047aa:	4a0d      	ldr	r2, [pc, #52]	@ (80047e0 <prvInitialiseNewTask+0x144>)
 80047ac:	659a      	str	r2, [r3, #88]	@ 0x58
 80047ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b0:	4a0c      	ldr	r2, [pc, #48]	@ (80047e4 <prvInitialiseNewTask+0x148>)
 80047b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80047b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b6:	4a0c      	ldr	r2, [pc, #48]	@ (80047e8 <prvInitialiseNewTask+0x14c>)
 80047b8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	68f9      	ldr	r1, [r7, #12]
 80047be:	69b8      	ldr	r0, [r7, #24]
 80047c0:	f001 f95a 	bl	8005a78 <pxPortInitialiseStack>
 80047c4:	4602      	mov	r2, r0
 80047c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80047ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d002      	beq.n	80047d6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80047d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047d6:	bf00      	nop
 80047d8:	3720      	adds	r7, #32
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	20004b54 	.word	0x20004b54
 80047e4:	20004bbc 	.word	0x20004bbc
 80047e8:	20004c24 	.word	0x20004c24

080047ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80047f4:	f001 fa70 	bl	8005cd8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80047f8:	4b2d      	ldr	r3, [pc, #180]	@ (80048b0 <prvAddNewTaskToReadyList+0xc4>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	3301      	adds	r3, #1
 80047fe:	4a2c      	ldr	r2, [pc, #176]	@ (80048b0 <prvAddNewTaskToReadyList+0xc4>)
 8004800:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004802:	4b2c      	ldr	r3, [pc, #176]	@ (80048b4 <prvAddNewTaskToReadyList+0xc8>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d109      	bne.n	800481e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800480a:	4a2a      	ldr	r2, [pc, #168]	@ (80048b4 <prvAddNewTaskToReadyList+0xc8>)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004810:	4b27      	ldr	r3, [pc, #156]	@ (80048b0 <prvAddNewTaskToReadyList+0xc4>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d110      	bne.n	800483a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004818:	f000 fc2e 	bl	8005078 <prvInitialiseTaskLists>
 800481c:	e00d      	b.n	800483a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800481e:	4b26      	ldr	r3, [pc, #152]	@ (80048b8 <prvAddNewTaskToReadyList+0xcc>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d109      	bne.n	800483a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004826:	4b23      	ldr	r3, [pc, #140]	@ (80048b4 <prvAddNewTaskToReadyList+0xc8>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004830:	429a      	cmp	r2, r3
 8004832:	d802      	bhi.n	800483a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004834:	4a1f      	ldr	r2, [pc, #124]	@ (80048b4 <prvAddNewTaskToReadyList+0xc8>)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800483a:	4b20      	ldr	r3, [pc, #128]	@ (80048bc <prvAddNewTaskToReadyList+0xd0>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3301      	adds	r3, #1
 8004840:	4a1e      	ldr	r2, [pc, #120]	@ (80048bc <prvAddNewTaskToReadyList+0xd0>)
 8004842:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004844:	4b1d      	ldr	r3, [pc, #116]	@ (80048bc <prvAddNewTaskToReadyList+0xd0>)
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004850:	4b1b      	ldr	r3, [pc, #108]	@ (80048c0 <prvAddNewTaskToReadyList+0xd4>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	429a      	cmp	r2, r3
 8004856:	d903      	bls.n	8004860 <prvAddNewTaskToReadyList+0x74>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485c:	4a18      	ldr	r2, [pc, #96]	@ (80048c0 <prvAddNewTaskToReadyList+0xd4>)
 800485e:	6013      	str	r3, [r2, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004864:	4613      	mov	r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4413      	add	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4a15      	ldr	r2, [pc, #84]	@ (80048c4 <prvAddNewTaskToReadyList+0xd8>)
 800486e:	441a      	add	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	3304      	adds	r3, #4
 8004874:	4619      	mov	r1, r3
 8004876:	4610      	mov	r0, r2
 8004878:	f7ff f8e9 	bl	8003a4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800487c:	f001 fa5e 	bl	8005d3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004880:	4b0d      	ldr	r3, [pc, #52]	@ (80048b8 <prvAddNewTaskToReadyList+0xcc>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00e      	beq.n	80048a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004888:	4b0a      	ldr	r3, [pc, #40]	@ (80048b4 <prvAddNewTaskToReadyList+0xc8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004892:	429a      	cmp	r2, r3
 8004894:	d207      	bcs.n	80048a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004896:	4b0c      	ldr	r3, [pc, #48]	@ (80048c8 <prvAddNewTaskToReadyList+0xdc>)
 8004898:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048a6:	bf00      	nop
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	20000dd4 	.word	0x20000dd4
 80048b4:	20000900 	.word	0x20000900
 80048b8:	20000de0 	.word	0x20000de0
 80048bc:	20000df0 	.word	0x20000df0
 80048c0:	20000ddc 	.word	0x20000ddc
 80048c4:	20000904 	.word	0x20000904
 80048c8:	e000ed04 	.word	0xe000ed04

080048cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80048d4:	2300      	movs	r3, #0
 80048d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d018      	beq.n	8004910 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80048de:	4b14      	ldr	r3, [pc, #80]	@ (8004930 <vTaskDelay+0x64>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00b      	beq.n	80048fe <vTaskDelay+0x32>
	__asm volatile
 80048e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ea:	f383 8811 	msr	BASEPRI, r3
 80048ee:	f3bf 8f6f 	isb	sy
 80048f2:	f3bf 8f4f 	dsb	sy
 80048f6:	60bb      	str	r3, [r7, #8]
}
 80048f8:	bf00      	nop
 80048fa:	bf00      	nop
 80048fc:	e7fd      	b.n	80048fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80048fe:	f000 f88b 	bl	8004a18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004902:	2100      	movs	r1, #0
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 fd09 	bl	800531c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800490a:	f000 f893 	bl	8004a34 <xTaskResumeAll>
 800490e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d107      	bne.n	8004926 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004916:	4b07      	ldr	r3, [pc, #28]	@ (8004934 <vTaskDelay+0x68>)
 8004918:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800491c:	601a      	str	r2, [r3, #0]
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004926:	bf00      	nop
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	20000dfc 	.word	0x20000dfc
 8004934:	e000ed04 	.word	0xe000ed04

08004938 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b08a      	sub	sp, #40	@ 0x28
 800493c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800493e:	2300      	movs	r3, #0
 8004940:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004942:	2300      	movs	r3, #0
 8004944:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004946:	463a      	mov	r2, r7
 8004948:	1d39      	adds	r1, r7, #4
 800494a:	f107 0308 	add.w	r3, r7, #8
 800494e:	4618      	mov	r0, r3
 8004950:	f7ff f81c 	bl	800398c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004954:	6839      	ldr	r1, [r7, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	9202      	str	r2, [sp, #8]
 800495c:	9301      	str	r3, [sp, #4]
 800495e:	2300      	movs	r3, #0
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	2300      	movs	r3, #0
 8004964:	460a      	mov	r2, r1
 8004966:	4924      	ldr	r1, [pc, #144]	@ (80049f8 <vTaskStartScheduler+0xc0>)
 8004968:	4824      	ldr	r0, [pc, #144]	@ (80049fc <vTaskStartScheduler+0xc4>)
 800496a:	f7ff fdf1 	bl	8004550 <xTaskCreateStatic>
 800496e:	4603      	mov	r3, r0
 8004970:	4a23      	ldr	r2, [pc, #140]	@ (8004a00 <vTaskStartScheduler+0xc8>)
 8004972:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004974:	4b22      	ldr	r3, [pc, #136]	@ (8004a00 <vTaskStartScheduler+0xc8>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d002      	beq.n	8004982 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800497c:	2301      	movs	r3, #1
 800497e:	617b      	str	r3, [r7, #20]
 8004980:	e001      	b.n	8004986 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004982:	2300      	movs	r3, #0
 8004984:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d102      	bne.n	8004992 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800498c:	f000 fd1a 	bl	80053c4 <xTimerCreateTimerTask>
 8004990:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d11b      	bne.n	80049d0 <vTaskStartScheduler+0x98>
	__asm volatile
 8004998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800499c:	f383 8811 	msr	BASEPRI, r3
 80049a0:	f3bf 8f6f 	isb	sy
 80049a4:	f3bf 8f4f 	dsb	sy
 80049a8:	613b      	str	r3, [r7, #16]
}
 80049aa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80049ac:	4b15      	ldr	r3, [pc, #84]	@ (8004a04 <vTaskStartScheduler+0xcc>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	3354      	adds	r3, #84	@ 0x54
 80049b2:	4a15      	ldr	r2, [pc, #84]	@ (8004a08 <vTaskStartScheduler+0xd0>)
 80049b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80049b6:	4b15      	ldr	r3, [pc, #84]	@ (8004a0c <vTaskStartScheduler+0xd4>)
 80049b8:	f04f 32ff 	mov.w	r2, #4294967295
 80049bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80049be:	4b14      	ldr	r3, [pc, #80]	@ (8004a10 <vTaskStartScheduler+0xd8>)
 80049c0:	2201      	movs	r2, #1
 80049c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80049c4:	4b13      	ldr	r3, [pc, #76]	@ (8004a14 <vTaskStartScheduler+0xdc>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80049ca:	f001 f8e1 	bl	8005b90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80049ce:	e00f      	b.n	80049f0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d6:	d10b      	bne.n	80049f0 <vTaskStartScheduler+0xb8>
	__asm volatile
 80049d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049dc:	f383 8811 	msr	BASEPRI, r3
 80049e0:	f3bf 8f6f 	isb	sy
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	60fb      	str	r3, [r7, #12]
}
 80049ea:	bf00      	nop
 80049ec:	bf00      	nop
 80049ee:	e7fd      	b.n	80049ec <vTaskStartScheduler+0xb4>
}
 80049f0:	bf00      	nop
 80049f2:	3718      	adds	r7, #24
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	08006500 	.word	0x08006500
 80049fc:	08005049 	.word	0x08005049
 8004a00:	20000df8 	.word	0x20000df8
 8004a04:	20000900 	.word	0x20000900
 8004a08:	20000010 	.word	0x20000010
 8004a0c:	20000df4 	.word	0x20000df4
 8004a10:	20000de0 	.word	0x20000de0
 8004a14:	20000dd8 	.word	0x20000dd8

08004a18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a18:	b480      	push	{r7}
 8004a1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004a1c:	4b04      	ldr	r3, [pc, #16]	@ (8004a30 <vTaskSuspendAll+0x18>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	3301      	adds	r3, #1
 8004a22:	4a03      	ldr	r2, [pc, #12]	@ (8004a30 <vTaskSuspendAll+0x18>)
 8004a24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004a26:	bf00      	nop
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr
 8004a30:	20000dfc 	.word	0x20000dfc

08004a34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a42:	4b42      	ldr	r3, [pc, #264]	@ (8004b4c <xTaskResumeAll+0x118>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10b      	bne.n	8004a62 <xTaskResumeAll+0x2e>
	__asm volatile
 8004a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a4e:	f383 8811 	msr	BASEPRI, r3
 8004a52:	f3bf 8f6f 	isb	sy
 8004a56:	f3bf 8f4f 	dsb	sy
 8004a5a:	603b      	str	r3, [r7, #0]
}
 8004a5c:	bf00      	nop
 8004a5e:	bf00      	nop
 8004a60:	e7fd      	b.n	8004a5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a62:	f001 f939 	bl	8005cd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a66:	4b39      	ldr	r3, [pc, #228]	@ (8004b4c <xTaskResumeAll+0x118>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	4a37      	ldr	r2, [pc, #220]	@ (8004b4c <xTaskResumeAll+0x118>)
 8004a6e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a70:	4b36      	ldr	r3, [pc, #216]	@ (8004b4c <xTaskResumeAll+0x118>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d162      	bne.n	8004b3e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a78:	4b35      	ldr	r3, [pc, #212]	@ (8004b50 <xTaskResumeAll+0x11c>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d05e      	beq.n	8004b3e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a80:	e02f      	b.n	8004ae2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a82:	4b34      	ldr	r3, [pc, #208]	@ (8004b54 <xTaskResumeAll+0x120>)
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	3318      	adds	r3, #24
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7ff f83a 	bl	8003b08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	3304      	adds	r3, #4
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7ff f835 	bl	8003b08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aa2:	4b2d      	ldr	r3, [pc, #180]	@ (8004b58 <xTaskResumeAll+0x124>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d903      	bls.n	8004ab2 <xTaskResumeAll+0x7e>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aae:	4a2a      	ldr	r2, [pc, #168]	@ (8004b58 <xTaskResumeAll+0x124>)
 8004ab0:	6013      	str	r3, [r2, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4413      	add	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4a27      	ldr	r2, [pc, #156]	@ (8004b5c <xTaskResumeAll+0x128>)
 8004ac0:	441a      	add	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	3304      	adds	r3, #4
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	4610      	mov	r0, r2
 8004aca:	f7fe ffc0 	bl	8003a4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ad2:	4b23      	ldr	r3, [pc, #140]	@ (8004b60 <xTaskResumeAll+0x12c>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d302      	bcc.n	8004ae2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004adc:	4b21      	ldr	r3, [pc, #132]	@ (8004b64 <xTaskResumeAll+0x130>)
 8004ade:	2201      	movs	r2, #1
 8004ae0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ae2:	4b1c      	ldr	r3, [pc, #112]	@ (8004b54 <xTaskResumeAll+0x120>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1cb      	bne.n	8004a82 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d001      	beq.n	8004af4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004af0:	f000 fb66 	bl	80051c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004af4:	4b1c      	ldr	r3, [pc, #112]	@ (8004b68 <xTaskResumeAll+0x134>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d010      	beq.n	8004b22 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b00:	f000 f846 	bl	8004b90 <xTaskIncrementTick>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d002      	beq.n	8004b10 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004b0a:	4b16      	ldr	r3, [pc, #88]	@ (8004b64 <xTaskResumeAll+0x130>)
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3b01      	subs	r3, #1
 8004b14:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1f1      	bne.n	8004b00 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004b1c:	4b12      	ldr	r3, [pc, #72]	@ (8004b68 <xTaskResumeAll+0x134>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b22:	4b10      	ldr	r3, [pc, #64]	@ (8004b64 <xTaskResumeAll+0x130>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d009      	beq.n	8004b3e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8004b6c <xTaskResumeAll+0x138>)
 8004b30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	f3bf 8f4f 	dsb	sy
 8004b3a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b3e:	f001 f8fd 	bl	8005d3c <vPortExitCritical>

	return xAlreadyYielded;
 8004b42:	68bb      	ldr	r3, [r7, #8]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	20000dfc 	.word	0x20000dfc
 8004b50:	20000dd4 	.word	0x20000dd4
 8004b54:	20000d94 	.word	0x20000d94
 8004b58:	20000ddc 	.word	0x20000ddc
 8004b5c:	20000904 	.word	0x20000904
 8004b60:	20000900 	.word	0x20000900
 8004b64:	20000de8 	.word	0x20000de8
 8004b68:	20000de4 	.word	0x20000de4
 8004b6c:	e000ed04 	.word	0xe000ed04

08004b70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004b76:	4b05      	ldr	r3, [pc, #20]	@ (8004b8c <xTaskGetTickCount+0x1c>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004b7c:	687b      	ldr	r3, [r7, #4]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	20000dd8 	.word	0x20000dd8

08004b90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b96:	2300      	movs	r3, #0
 8004b98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b9a:	4b4f      	ldr	r3, [pc, #316]	@ (8004cd8 <xTaskIncrementTick+0x148>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f040 8090 	bne.w	8004cc4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ba4:	4b4d      	ldr	r3, [pc, #308]	@ (8004cdc <xTaskIncrementTick+0x14c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004bac:	4a4b      	ldr	r2, [pc, #300]	@ (8004cdc <xTaskIncrementTick+0x14c>)
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d121      	bne.n	8004bfc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004bb8:	4b49      	ldr	r3, [pc, #292]	@ (8004ce0 <xTaskIncrementTick+0x150>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00b      	beq.n	8004bda <xTaskIncrementTick+0x4a>
	__asm volatile
 8004bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc6:	f383 8811 	msr	BASEPRI, r3
 8004bca:	f3bf 8f6f 	isb	sy
 8004bce:	f3bf 8f4f 	dsb	sy
 8004bd2:	603b      	str	r3, [r7, #0]
}
 8004bd4:	bf00      	nop
 8004bd6:	bf00      	nop
 8004bd8:	e7fd      	b.n	8004bd6 <xTaskIncrementTick+0x46>
 8004bda:	4b41      	ldr	r3, [pc, #260]	@ (8004ce0 <xTaskIncrementTick+0x150>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	4b40      	ldr	r3, [pc, #256]	@ (8004ce4 <xTaskIncrementTick+0x154>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a3e      	ldr	r2, [pc, #248]	@ (8004ce0 <xTaskIncrementTick+0x150>)
 8004be6:	6013      	str	r3, [r2, #0]
 8004be8:	4a3e      	ldr	r2, [pc, #248]	@ (8004ce4 <xTaskIncrementTick+0x154>)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6013      	str	r3, [r2, #0]
 8004bee:	4b3e      	ldr	r3, [pc, #248]	@ (8004ce8 <xTaskIncrementTick+0x158>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	4a3c      	ldr	r2, [pc, #240]	@ (8004ce8 <xTaskIncrementTick+0x158>)
 8004bf6:	6013      	str	r3, [r2, #0]
 8004bf8:	f000 fae2 	bl	80051c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004bfc:	4b3b      	ldr	r3, [pc, #236]	@ (8004cec <xTaskIncrementTick+0x15c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d349      	bcc.n	8004c9a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c06:	4b36      	ldr	r3, [pc, #216]	@ (8004ce0 <xTaskIncrementTick+0x150>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d104      	bne.n	8004c1a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c10:	4b36      	ldr	r3, [pc, #216]	@ (8004cec <xTaskIncrementTick+0x15c>)
 8004c12:	f04f 32ff 	mov.w	r2, #4294967295
 8004c16:	601a      	str	r2, [r3, #0]
					break;
 8004c18:	e03f      	b.n	8004c9a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c1a:	4b31      	ldr	r3, [pc, #196]	@ (8004ce0 <xTaskIncrementTick+0x150>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d203      	bcs.n	8004c3a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c32:	4a2e      	ldr	r2, [pc, #184]	@ (8004cec <xTaskIncrementTick+0x15c>)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c38:	e02f      	b.n	8004c9a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fe ff62 	bl	8003b08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d004      	beq.n	8004c56 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	3318      	adds	r3, #24
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7fe ff59 	bl	8003b08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c5a:	4b25      	ldr	r3, [pc, #148]	@ (8004cf0 <xTaskIncrementTick+0x160>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d903      	bls.n	8004c6a <xTaskIncrementTick+0xda>
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c66:	4a22      	ldr	r2, [pc, #136]	@ (8004cf0 <xTaskIncrementTick+0x160>)
 8004c68:	6013      	str	r3, [r2, #0]
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c6e:	4613      	mov	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4413      	add	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	4a1f      	ldr	r2, [pc, #124]	@ (8004cf4 <xTaskIncrementTick+0x164>)
 8004c78:	441a      	add	r2, r3
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	3304      	adds	r3, #4
 8004c7e:	4619      	mov	r1, r3
 8004c80:	4610      	mov	r0, r2
 8004c82:	f7fe fee4 	bl	8003a4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8004cf8 <xTaskIncrementTick+0x168>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d3b8      	bcc.n	8004c06 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004c94:	2301      	movs	r3, #1
 8004c96:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c98:	e7b5      	b.n	8004c06 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c9a:	4b17      	ldr	r3, [pc, #92]	@ (8004cf8 <xTaskIncrementTick+0x168>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ca0:	4914      	ldr	r1, [pc, #80]	@ (8004cf4 <xTaskIncrementTick+0x164>)
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4413      	add	r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	440b      	add	r3, r1
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d901      	bls.n	8004cb6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004cb6:	4b11      	ldr	r3, [pc, #68]	@ (8004cfc <xTaskIncrementTick+0x16c>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d007      	beq.n	8004cce <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	617b      	str	r3, [r7, #20]
 8004cc2:	e004      	b.n	8004cce <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8004d00 <xTaskIncrementTick+0x170>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	3301      	adds	r3, #1
 8004cca:	4a0d      	ldr	r2, [pc, #52]	@ (8004d00 <xTaskIncrementTick+0x170>)
 8004ccc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004cce:	697b      	ldr	r3, [r7, #20]
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3718      	adds	r7, #24
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	20000dfc 	.word	0x20000dfc
 8004cdc:	20000dd8 	.word	0x20000dd8
 8004ce0:	20000d8c 	.word	0x20000d8c
 8004ce4:	20000d90 	.word	0x20000d90
 8004ce8:	20000dec 	.word	0x20000dec
 8004cec:	20000df4 	.word	0x20000df4
 8004cf0:	20000ddc 	.word	0x20000ddc
 8004cf4:	20000904 	.word	0x20000904
 8004cf8:	20000900 	.word	0x20000900
 8004cfc:	20000de8 	.word	0x20000de8
 8004d00:	20000de4 	.word	0x20000de4

08004d04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d0a:	4b2b      	ldr	r3, [pc, #172]	@ (8004db8 <vTaskSwitchContext+0xb4>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d12:	4b2a      	ldr	r3, [pc, #168]	@ (8004dbc <vTaskSwitchContext+0xb8>)
 8004d14:	2201      	movs	r2, #1
 8004d16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d18:	e047      	b.n	8004daa <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004d1a:	4b28      	ldr	r3, [pc, #160]	@ (8004dbc <vTaskSwitchContext+0xb8>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d20:	4b27      	ldr	r3, [pc, #156]	@ (8004dc0 <vTaskSwitchContext+0xbc>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	e011      	b.n	8004d4c <vTaskSwitchContext+0x48>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10b      	bne.n	8004d46 <vTaskSwitchContext+0x42>
	__asm volatile
 8004d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d32:	f383 8811 	msr	BASEPRI, r3
 8004d36:	f3bf 8f6f 	isb	sy
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	607b      	str	r3, [r7, #4]
}
 8004d40:	bf00      	nop
 8004d42:	bf00      	nop
 8004d44:	e7fd      	b.n	8004d42 <vTaskSwitchContext+0x3e>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	491d      	ldr	r1, [pc, #116]	@ (8004dc4 <vTaskSwitchContext+0xc0>)
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	4613      	mov	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	440b      	add	r3, r1
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d0e3      	beq.n	8004d28 <vTaskSwitchContext+0x24>
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	4613      	mov	r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	4413      	add	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4a16      	ldr	r2, [pc, #88]	@ (8004dc4 <vTaskSwitchContext+0xc0>)
 8004d6c:	4413      	add	r3, r2
 8004d6e:	60bb      	str	r3, [r7, #8]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	605a      	str	r2, [r3, #4]
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	685a      	ldr	r2, [r3, #4]
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	3308      	adds	r3, #8
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d104      	bne.n	8004d90 <vTaskSwitchContext+0x8c>
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	605a      	str	r2, [r3, #4]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	4a0c      	ldr	r2, [pc, #48]	@ (8004dc8 <vTaskSwitchContext+0xc4>)
 8004d98:	6013      	str	r3, [r2, #0]
 8004d9a:	4a09      	ldr	r2, [pc, #36]	@ (8004dc0 <vTaskSwitchContext+0xbc>)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004da0:	4b09      	ldr	r3, [pc, #36]	@ (8004dc8 <vTaskSwitchContext+0xc4>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	3354      	adds	r3, #84	@ 0x54
 8004da6:	4a09      	ldr	r2, [pc, #36]	@ (8004dcc <vTaskSwitchContext+0xc8>)
 8004da8:	6013      	str	r3, [r2, #0]
}
 8004daa:	bf00      	nop
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	20000dfc 	.word	0x20000dfc
 8004dbc:	20000de8 	.word	0x20000de8
 8004dc0:	20000ddc 	.word	0x20000ddc
 8004dc4:	20000904 	.word	0x20000904
 8004dc8:	20000900 	.word	0x20000900
 8004dcc:	20000010 	.word	0x20000010

08004dd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10b      	bne.n	8004df8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de4:	f383 8811 	msr	BASEPRI, r3
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	f3bf 8f4f 	dsb	sy
 8004df0:	60fb      	str	r3, [r7, #12]
}
 8004df2:	bf00      	nop
 8004df4:	bf00      	nop
 8004df6:	e7fd      	b.n	8004df4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004df8:	4b07      	ldr	r3, [pc, #28]	@ (8004e18 <vTaskPlaceOnEventList+0x48>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	3318      	adds	r3, #24
 8004dfe:	4619      	mov	r1, r3
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7fe fe48 	bl	8003a96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e06:	2101      	movs	r1, #1
 8004e08:	6838      	ldr	r0, [r7, #0]
 8004e0a:	f000 fa87 	bl	800531c <prvAddCurrentTaskToDelayedList>
}
 8004e0e:	bf00      	nop
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	20000900 	.word	0x20000900

08004e1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10b      	bne.n	8004e46 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e32:	f383 8811 	msr	BASEPRI, r3
 8004e36:	f3bf 8f6f 	isb	sy
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	617b      	str	r3, [r7, #20]
}
 8004e40:	bf00      	nop
 8004e42:	bf00      	nop
 8004e44:	e7fd      	b.n	8004e42 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e46:	4b0a      	ldr	r3, [pc, #40]	@ (8004e70 <vTaskPlaceOnEventListRestricted+0x54>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	3318      	adds	r3, #24
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f7fe fdfd 	bl	8003a4e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d002      	beq.n	8004e60 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e5e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004e60:	6879      	ldr	r1, [r7, #4]
 8004e62:	68b8      	ldr	r0, [r7, #8]
 8004e64:	f000 fa5a 	bl	800531c <prvAddCurrentTaskToDelayedList>
	}
 8004e68:	bf00      	nop
 8004e6a:	3718      	adds	r7, #24
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	20000900 	.word	0x20000900

08004e74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10b      	bne.n	8004ea2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e8e:	f383 8811 	msr	BASEPRI, r3
 8004e92:	f3bf 8f6f 	isb	sy
 8004e96:	f3bf 8f4f 	dsb	sy
 8004e9a:	60fb      	str	r3, [r7, #12]
}
 8004e9c:	bf00      	nop
 8004e9e:	bf00      	nop
 8004ea0:	e7fd      	b.n	8004e9e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	3318      	adds	r3, #24
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7fe fe2e 	bl	8003b08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004eac:	4b1d      	ldr	r3, [pc, #116]	@ (8004f24 <xTaskRemoveFromEventList+0xb0>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d11d      	bne.n	8004ef0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	3304      	adds	r3, #4
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7fe fe25 	bl	8003b08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ec2:	4b19      	ldr	r3, [pc, #100]	@ (8004f28 <xTaskRemoveFromEventList+0xb4>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d903      	bls.n	8004ed2 <xTaskRemoveFromEventList+0x5e>
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ece:	4a16      	ldr	r2, [pc, #88]	@ (8004f28 <xTaskRemoveFromEventList+0xb4>)
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4a13      	ldr	r2, [pc, #76]	@ (8004f2c <xTaskRemoveFromEventList+0xb8>)
 8004ee0:	441a      	add	r2, r3
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	4610      	mov	r0, r2
 8004eea:	f7fe fdb0 	bl	8003a4e <vListInsertEnd>
 8004eee:	e005      	b.n	8004efc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	3318      	adds	r3, #24
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	480e      	ldr	r0, [pc, #56]	@ (8004f30 <xTaskRemoveFromEventList+0xbc>)
 8004ef8:	f7fe fda9 	bl	8003a4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f00:	4b0c      	ldr	r3, [pc, #48]	@ (8004f34 <xTaskRemoveFromEventList+0xc0>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d905      	bls.n	8004f16 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f38 <xTaskRemoveFromEventList+0xc4>)
 8004f10:	2201      	movs	r2, #1
 8004f12:	601a      	str	r2, [r3, #0]
 8004f14:	e001      	b.n	8004f1a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004f16:	2300      	movs	r3, #0
 8004f18:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004f1a:	697b      	ldr	r3, [r7, #20]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3718      	adds	r7, #24
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	20000dfc 	.word	0x20000dfc
 8004f28:	20000ddc 	.word	0x20000ddc
 8004f2c:	20000904 	.word	0x20000904
 8004f30:	20000d94 	.word	0x20000d94
 8004f34:	20000900 	.word	0x20000900
 8004f38:	20000de8 	.word	0x20000de8

08004f3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f44:	4b06      	ldr	r3, [pc, #24]	@ (8004f60 <vTaskInternalSetTimeOutState+0x24>)
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f4c:	4b05      	ldr	r3, [pc, #20]	@ (8004f64 <vTaskInternalSetTimeOutState+0x28>)
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	605a      	str	r2, [r3, #4]
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	20000dec 	.word	0x20000dec
 8004f64:	20000dd8 	.word	0x20000dd8

08004f68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b088      	sub	sp, #32
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10b      	bne.n	8004f90 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f7c:	f383 8811 	msr	BASEPRI, r3
 8004f80:	f3bf 8f6f 	isb	sy
 8004f84:	f3bf 8f4f 	dsb	sy
 8004f88:	613b      	str	r3, [r7, #16]
}
 8004f8a:	bf00      	nop
 8004f8c:	bf00      	nop
 8004f8e:	e7fd      	b.n	8004f8c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10b      	bne.n	8004fae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f9a:	f383 8811 	msr	BASEPRI, r3
 8004f9e:	f3bf 8f6f 	isb	sy
 8004fa2:	f3bf 8f4f 	dsb	sy
 8004fa6:	60fb      	str	r3, [r7, #12]
}
 8004fa8:	bf00      	nop
 8004faa:	bf00      	nop
 8004fac:	e7fd      	b.n	8004faa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004fae:	f000 fe93 	bl	8005cd8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004fb2:	4b1d      	ldr	r3, [pc, #116]	@ (8005028 <xTaskCheckForTimeOut+0xc0>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fca:	d102      	bne.n	8004fd2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	61fb      	str	r3, [r7, #28]
 8004fd0:	e023      	b.n	800501a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	4b15      	ldr	r3, [pc, #84]	@ (800502c <xTaskCheckForTimeOut+0xc4>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d007      	beq.n	8004fee <xTaskCheckForTimeOut+0x86>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d302      	bcc.n	8004fee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	61fb      	str	r3, [r7, #28]
 8004fec:	e015      	b.n	800501a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d20b      	bcs.n	8005010 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	1ad2      	subs	r2, r2, r3
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f7ff ff99 	bl	8004f3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800500a:	2300      	movs	r3, #0
 800500c:	61fb      	str	r3, [r7, #28]
 800500e:	e004      	b.n	800501a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	2200      	movs	r2, #0
 8005014:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005016:	2301      	movs	r3, #1
 8005018:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800501a:	f000 fe8f 	bl	8005d3c <vPortExitCritical>

	return xReturn;
 800501e:	69fb      	ldr	r3, [r7, #28]
}
 8005020:	4618      	mov	r0, r3
 8005022:	3720      	adds	r7, #32
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	20000dd8 	.word	0x20000dd8
 800502c:	20000dec 	.word	0x20000dec

08005030 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005030:	b480      	push	{r7}
 8005032:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005034:	4b03      	ldr	r3, [pc, #12]	@ (8005044 <vTaskMissedYield+0x14>)
 8005036:	2201      	movs	r2, #1
 8005038:	601a      	str	r2, [r3, #0]
}
 800503a:	bf00      	nop
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	20000de8 	.word	0x20000de8

08005048 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005050:	f000 f852 	bl	80050f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005054:	4b06      	ldr	r3, [pc, #24]	@ (8005070 <prvIdleTask+0x28>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d9f9      	bls.n	8005050 <prvIdleTask+0x8>
			{
				taskYIELD();
 800505c:	4b05      	ldr	r3, [pc, #20]	@ (8005074 <prvIdleTask+0x2c>)
 800505e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005062:	601a      	str	r2, [r3, #0]
 8005064:	f3bf 8f4f 	dsb	sy
 8005068:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800506c:	e7f0      	b.n	8005050 <prvIdleTask+0x8>
 800506e:	bf00      	nop
 8005070:	20000904 	.word	0x20000904
 8005074:	e000ed04 	.word	0xe000ed04

08005078 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800507e:	2300      	movs	r3, #0
 8005080:	607b      	str	r3, [r7, #4]
 8005082:	e00c      	b.n	800509e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	4613      	mov	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4413      	add	r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	4a12      	ldr	r2, [pc, #72]	@ (80050d8 <prvInitialiseTaskLists+0x60>)
 8005090:	4413      	add	r3, r2
 8005092:	4618      	mov	r0, r3
 8005094:	f7fe fcae 	bl	80039f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	3301      	adds	r3, #1
 800509c:	607b      	str	r3, [r7, #4]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2b37      	cmp	r3, #55	@ 0x37
 80050a2:	d9ef      	bls.n	8005084 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80050a4:	480d      	ldr	r0, [pc, #52]	@ (80050dc <prvInitialiseTaskLists+0x64>)
 80050a6:	f7fe fca5 	bl	80039f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80050aa:	480d      	ldr	r0, [pc, #52]	@ (80050e0 <prvInitialiseTaskLists+0x68>)
 80050ac:	f7fe fca2 	bl	80039f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80050b0:	480c      	ldr	r0, [pc, #48]	@ (80050e4 <prvInitialiseTaskLists+0x6c>)
 80050b2:	f7fe fc9f 	bl	80039f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80050b6:	480c      	ldr	r0, [pc, #48]	@ (80050e8 <prvInitialiseTaskLists+0x70>)
 80050b8:	f7fe fc9c 	bl	80039f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80050bc:	480b      	ldr	r0, [pc, #44]	@ (80050ec <prvInitialiseTaskLists+0x74>)
 80050be:	f7fe fc99 	bl	80039f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80050c2:	4b0b      	ldr	r3, [pc, #44]	@ (80050f0 <prvInitialiseTaskLists+0x78>)
 80050c4:	4a05      	ldr	r2, [pc, #20]	@ (80050dc <prvInitialiseTaskLists+0x64>)
 80050c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80050c8:	4b0a      	ldr	r3, [pc, #40]	@ (80050f4 <prvInitialiseTaskLists+0x7c>)
 80050ca:	4a05      	ldr	r2, [pc, #20]	@ (80050e0 <prvInitialiseTaskLists+0x68>)
 80050cc:	601a      	str	r2, [r3, #0]
}
 80050ce:	bf00      	nop
 80050d0:	3708      	adds	r7, #8
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	20000904 	.word	0x20000904
 80050dc:	20000d64 	.word	0x20000d64
 80050e0:	20000d78 	.word	0x20000d78
 80050e4:	20000d94 	.word	0x20000d94
 80050e8:	20000da8 	.word	0x20000da8
 80050ec:	20000dc0 	.word	0x20000dc0
 80050f0:	20000d8c 	.word	0x20000d8c
 80050f4:	20000d90 	.word	0x20000d90

080050f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050fe:	e019      	b.n	8005134 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005100:	f000 fdea 	bl	8005cd8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005104:	4b10      	ldr	r3, [pc, #64]	@ (8005148 <prvCheckTasksWaitingTermination+0x50>)
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	3304      	adds	r3, #4
 8005110:	4618      	mov	r0, r3
 8005112:	f7fe fcf9 	bl	8003b08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005116:	4b0d      	ldr	r3, [pc, #52]	@ (800514c <prvCheckTasksWaitingTermination+0x54>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	3b01      	subs	r3, #1
 800511c:	4a0b      	ldr	r2, [pc, #44]	@ (800514c <prvCheckTasksWaitingTermination+0x54>)
 800511e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005120:	4b0b      	ldr	r3, [pc, #44]	@ (8005150 <prvCheckTasksWaitingTermination+0x58>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	3b01      	subs	r3, #1
 8005126:	4a0a      	ldr	r2, [pc, #40]	@ (8005150 <prvCheckTasksWaitingTermination+0x58>)
 8005128:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800512a:	f000 fe07 	bl	8005d3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f810 	bl	8005154 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005134:	4b06      	ldr	r3, [pc, #24]	@ (8005150 <prvCheckTasksWaitingTermination+0x58>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1e1      	bne.n	8005100 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800513c:	bf00      	nop
 800513e:	bf00      	nop
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	20000da8 	.word	0x20000da8
 800514c:	20000dd4 	.word	0x20000dd4
 8005150:	20000dbc 	.word	0x20000dbc

08005154 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	3354      	adds	r3, #84	@ 0x54
 8005160:	4618      	mov	r0, r3
 8005162:	f001 f8d1 	bl	8006308 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800516c:	2b00      	cmp	r3, #0
 800516e:	d108      	bne.n	8005182 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005174:	4618      	mov	r0, r3
 8005176:	f000 ff9f 	bl	80060b8 <vPortFree>
				vPortFree( pxTCB );
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 ff9c 	bl	80060b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005180:	e019      	b.n	80051b6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005188:	2b01      	cmp	r3, #1
 800518a:	d103      	bne.n	8005194 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 ff93 	bl	80060b8 <vPortFree>
	}
 8005192:	e010      	b.n	80051b6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800519a:	2b02      	cmp	r3, #2
 800519c:	d00b      	beq.n	80051b6 <prvDeleteTCB+0x62>
	__asm volatile
 800519e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	60fb      	str	r3, [r7, #12]
}
 80051b0:	bf00      	nop
 80051b2:	bf00      	nop
 80051b4:	e7fd      	b.n	80051b2 <prvDeleteTCB+0x5e>
	}
 80051b6:	bf00      	nop
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
	...

080051c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051c6:	4b0c      	ldr	r3, [pc, #48]	@ (80051f8 <prvResetNextTaskUnblockTime+0x38>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d104      	bne.n	80051da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80051d0:	4b0a      	ldr	r3, [pc, #40]	@ (80051fc <prvResetNextTaskUnblockTime+0x3c>)
 80051d2:	f04f 32ff 	mov.w	r2, #4294967295
 80051d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80051d8:	e008      	b.n	80051ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051da:	4b07      	ldr	r3, [pc, #28]	@ (80051f8 <prvResetNextTaskUnblockTime+0x38>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	4a04      	ldr	r2, [pc, #16]	@ (80051fc <prvResetNextTaskUnblockTime+0x3c>)
 80051ea:	6013      	str	r3, [r2, #0]
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	20000d8c 	.word	0x20000d8c
 80051fc:	20000df4 	.word	0x20000df4

08005200 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005206:	4b0b      	ldr	r3, [pc, #44]	@ (8005234 <xTaskGetSchedulerState+0x34>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d102      	bne.n	8005214 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800520e:	2301      	movs	r3, #1
 8005210:	607b      	str	r3, [r7, #4]
 8005212:	e008      	b.n	8005226 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005214:	4b08      	ldr	r3, [pc, #32]	@ (8005238 <xTaskGetSchedulerState+0x38>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d102      	bne.n	8005222 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800521c:	2302      	movs	r3, #2
 800521e:	607b      	str	r3, [r7, #4]
 8005220:	e001      	b.n	8005226 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005222:	2300      	movs	r3, #0
 8005224:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005226:	687b      	ldr	r3, [r7, #4]
	}
 8005228:	4618      	mov	r0, r3
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr
 8005234:	20000de0 	.word	0x20000de0
 8005238:	20000dfc 	.word	0x20000dfc

0800523c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005248:	2300      	movs	r3, #0
 800524a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d058      	beq.n	8005304 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005252:	4b2f      	ldr	r3, [pc, #188]	@ (8005310 <xTaskPriorityDisinherit+0xd4>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	429a      	cmp	r2, r3
 800525a:	d00b      	beq.n	8005274 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800525c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005260:	f383 8811 	msr	BASEPRI, r3
 8005264:	f3bf 8f6f 	isb	sy
 8005268:	f3bf 8f4f 	dsb	sy
 800526c:	60fb      	str	r3, [r7, #12]
}
 800526e:	bf00      	nop
 8005270:	bf00      	nop
 8005272:	e7fd      	b.n	8005270 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10b      	bne.n	8005294 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800527c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005280:	f383 8811 	msr	BASEPRI, r3
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	f3bf 8f4f 	dsb	sy
 800528c:	60bb      	str	r3, [r7, #8]
}
 800528e:	bf00      	nop
 8005290:	bf00      	nop
 8005292:	e7fd      	b.n	8005290 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005298:	1e5a      	subs	r2, r3, #1
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d02c      	beq.n	8005304 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d128      	bne.n	8005304 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	3304      	adds	r3, #4
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7fe fc26 	bl	8003b08 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005314 <xTaskPriorityDisinherit+0xd8>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d903      	bls.n	80052e4 <xTaskPriorityDisinherit+0xa8>
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e0:	4a0c      	ldr	r2, [pc, #48]	@ (8005314 <xTaskPriorityDisinherit+0xd8>)
 80052e2:	6013      	str	r3, [r2, #0]
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052e8:	4613      	mov	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4a09      	ldr	r2, [pc, #36]	@ (8005318 <xTaskPriorityDisinherit+0xdc>)
 80052f2:	441a      	add	r2, r3
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	3304      	adds	r3, #4
 80052f8:	4619      	mov	r1, r3
 80052fa:	4610      	mov	r0, r2
 80052fc:	f7fe fba7 	bl	8003a4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005300:	2301      	movs	r3, #1
 8005302:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005304:	697b      	ldr	r3, [r7, #20]
	}
 8005306:	4618      	mov	r0, r3
 8005308:	3718      	adds	r7, #24
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	20000900 	.word	0x20000900
 8005314:	20000ddc 	.word	0x20000ddc
 8005318:	20000904 	.word	0x20000904

0800531c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005326:	4b21      	ldr	r3, [pc, #132]	@ (80053ac <prvAddCurrentTaskToDelayedList+0x90>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800532c:	4b20      	ldr	r3, [pc, #128]	@ (80053b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	3304      	adds	r3, #4
 8005332:	4618      	mov	r0, r3
 8005334:	f7fe fbe8 	bl	8003b08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533e:	d10a      	bne.n	8005356 <prvAddCurrentTaskToDelayedList+0x3a>
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d007      	beq.n	8005356 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005346:	4b1a      	ldr	r3, [pc, #104]	@ (80053b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	3304      	adds	r3, #4
 800534c:	4619      	mov	r1, r3
 800534e:	4819      	ldr	r0, [pc, #100]	@ (80053b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005350:	f7fe fb7d 	bl	8003a4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005354:	e026      	b.n	80053a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4413      	add	r3, r2
 800535c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800535e:	4b14      	ldr	r3, [pc, #80]	@ (80053b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	429a      	cmp	r2, r3
 800536c:	d209      	bcs.n	8005382 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800536e:	4b12      	ldr	r3, [pc, #72]	@ (80053b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	4b0f      	ldr	r3, [pc, #60]	@ (80053b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	3304      	adds	r3, #4
 8005378:	4619      	mov	r1, r3
 800537a:	4610      	mov	r0, r2
 800537c:	f7fe fb8b 	bl	8003a96 <vListInsert>
}
 8005380:	e010      	b.n	80053a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005382:	4b0e      	ldr	r3, [pc, #56]	@ (80053bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	4b0a      	ldr	r3, [pc, #40]	@ (80053b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	3304      	adds	r3, #4
 800538c:	4619      	mov	r1, r3
 800538e:	4610      	mov	r0, r2
 8005390:	f7fe fb81 	bl	8003a96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005394:	4b0a      	ldr	r3, [pc, #40]	@ (80053c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	429a      	cmp	r2, r3
 800539c:	d202      	bcs.n	80053a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800539e:	4a08      	ldr	r2, [pc, #32]	@ (80053c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	6013      	str	r3, [r2, #0]
}
 80053a4:	bf00      	nop
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	20000dd8 	.word	0x20000dd8
 80053b0:	20000900 	.word	0x20000900
 80053b4:	20000dc0 	.word	0x20000dc0
 80053b8:	20000d90 	.word	0x20000d90
 80053bc:	20000d8c 	.word	0x20000d8c
 80053c0:	20000df4 	.word	0x20000df4

080053c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b08a      	sub	sp, #40	@ 0x28
 80053c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80053ca:	2300      	movs	r3, #0
 80053cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80053ce:	f000 fb13 	bl	80059f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80053d2:	4b1d      	ldr	r3, [pc, #116]	@ (8005448 <xTimerCreateTimerTask+0x84>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d021      	beq.n	800541e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80053da:	2300      	movs	r3, #0
 80053dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80053de:	2300      	movs	r3, #0
 80053e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80053e2:	1d3a      	adds	r2, r7, #4
 80053e4:	f107 0108 	add.w	r1, r7, #8
 80053e8:	f107 030c 	add.w	r3, r7, #12
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7fe fae7 	bl	80039c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80053f2:	6879      	ldr	r1, [r7, #4]
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	9202      	str	r2, [sp, #8]
 80053fa:	9301      	str	r3, [sp, #4]
 80053fc:	2302      	movs	r3, #2
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	2300      	movs	r3, #0
 8005402:	460a      	mov	r2, r1
 8005404:	4911      	ldr	r1, [pc, #68]	@ (800544c <xTimerCreateTimerTask+0x88>)
 8005406:	4812      	ldr	r0, [pc, #72]	@ (8005450 <xTimerCreateTimerTask+0x8c>)
 8005408:	f7ff f8a2 	bl	8004550 <xTaskCreateStatic>
 800540c:	4603      	mov	r3, r0
 800540e:	4a11      	ldr	r2, [pc, #68]	@ (8005454 <xTimerCreateTimerTask+0x90>)
 8005410:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005412:	4b10      	ldr	r3, [pc, #64]	@ (8005454 <xTimerCreateTimerTask+0x90>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800541a:	2301      	movs	r3, #1
 800541c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10b      	bne.n	800543c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005428:	f383 8811 	msr	BASEPRI, r3
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	f3bf 8f4f 	dsb	sy
 8005434:	613b      	str	r3, [r7, #16]
}
 8005436:	bf00      	nop
 8005438:	bf00      	nop
 800543a:	e7fd      	b.n	8005438 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800543c:	697b      	ldr	r3, [r7, #20]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3718      	adds	r7, #24
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	20000e30 	.word	0x20000e30
 800544c:	08006508 	.word	0x08006508
 8005450:	08005591 	.word	0x08005591
 8005454:	20000e34 	.word	0x20000e34

08005458 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b08a      	sub	sp, #40	@ 0x28
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
 8005464:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005466:	2300      	movs	r3, #0
 8005468:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10b      	bne.n	8005488 <xTimerGenericCommand+0x30>
	__asm volatile
 8005470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005474:	f383 8811 	msr	BASEPRI, r3
 8005478:	f3bf 8f6f 	isb	sy
 800547c:	f3bf 8f4f 	dsb	sy
 8005480:	623b      	str	r3, [r7, #32]
}
 8005482:	bf00      	nop
 8005484:	bf00      	nop
 8005486:	e7fd      	b.n	8005484 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005488:	4b19      	ldr	r3, [pc, #100]	@ (80054f0 <xTimerGenericCommand+0x98>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d02a      	beq.n	80054e6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	2b05      	cmp	r3, #5
 80054a0:	dc18      	bgt.n	80054d4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80054a2:	f7ff fead 	bl	8005200 <xTaskGetSchedulerState>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d109      	bne.n	80054c0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80054ac:	4b10      	ldr	r3, [pc, #64]	@ (80054f0 <xTimerGenericCommand+0x98>)
 80054ae:	6818      	ldr	r0, [r3, #0]
 80054b0:	f107 0110 	add.w	r1, r7, #16
 80054b4:	2300      	movs	r3, #0
 80054b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054b8:	f7fe fc5a 	bl	8003d70 <xQueueGenericSend>
 80054bc:	6278      	str	r0, [r7, #36]	@ 0x24
 80054be:	e012      	b.n	80054e6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80054c0:	4b0b      	ldr	r3, [pc, #44]	@ (80054f0 <xTimerGenericCommand+0x98>)
 80054c2:	6818      	ldr	r0, [r3, #0]
 80054c4:	f107 0110 	add.w	r1, r7, #16
 80054c8:	2300      	movs	r3, #0
 80054ca:	2200      	movs	r2, #0
 80054cc:	f7fe fc50 	bl	8003d70 <xQueueGenericSend>
 80054d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80054d2:	e008      	b.n	80054e6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80054d4:	4b06      	ldr	r3, [pc, #24]	@ (80054f0 <xTimerGenericCommand+0x98>)
 80054d6:	6818      	ldr	r0, [r3, #0]
 80054d8:	f107 0110 	add.w	r1, r7, #16
 80054dc:	2300      	movs	r3, #0
 80054de:	683a      	ldr	r2, [r7, #0]
 80054e0:	f7fe fd48 	bl	8003f74 <xQueueGenericSendFromISR>
 80054e4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80054e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3728      	adds	r7, #40	@ 0x28
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	20000e30 	.word	0x20000e30

080054f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b088      	sub	sp, #32
 80054f8:	af02      	add	r7, sp, #8
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054fe:	4b23      	ldr	r3, [pc, #140]	@ (800558c <prvProcessExpiredTimer+0x98>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	3304      	adds	r3, #4
 800550c:	4618      	mov	r0, r3
 800550e:	f7fe fafb 	bl	8003b08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005518:	f003 0304 	and.w	r3, r3, #4
 800551c:	2b00      	cmp	r3, #0
 800551e:	d023      	beq.n	8005568 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	699a      	ldr	r2, [r3, #24]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	18d1      	adds	r1, r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	6978      	ldr	r0, [r7, #20]
 800552e:	f000 f8d5 	bl	80056dc <prvInsertTimerInActiveList>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d020      	beq.n	800557a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005538:	2300      	movs	r3, #0
 800553a:	9300      	str	r3, [sp, #0]
 800553c:	2300      	movs	r3, #0
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	2100      	movs	r1, #0
 8005542:	6978      	ldr	r0, [r7, #20]
 8005544:	f7ff ff88 	bl	8005458 <xTimerGenericCommand>
 8005548:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d114      	bne.n	800557a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005554:	f383 8811 	msr	BASEPRI, r3
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	60fb      	str	r3, [r7, #12]
}
 8005562:	bf00      	nop
 8005564:	bf00      	nop
 8005566:	e7fd      	b.n	8005564 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800556e:	f023 0301 	bic.w	r3, r3, #1
 8005572:	b2da      	uxtb	r2, r3
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	6978      	ldr	r0, [r7, #20]
 8005580:	4798      	blx	r3
}
 8005582:	bf00      	nop
 8005584:	3718      	adds	r7, #24
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	20000e28 	.word	0x20000e28

08005590 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005598:	f107 0308 	add.w	r3, r7, #8
 800559c:	4618      	mov	r0, r3
 800559e:	f000 f859 	bl	8005654 <prvGetNextExpireTime>
 80055a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	4619      	mov	r1, r3
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f000 f805 	bl	80055b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80055ae:	f000 f8d7 	bl	8005760 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80055b2:	bf00      	nop
 80055b4:	e7f0      	b.n	8005598 <prvTimerTask+0x8>
	...

080055b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80055c2:	f7ff fa29 	bl	8004a18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80055c6:	f107 0308 	add.w	r3, r7, #8
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 f866 	bl	800569c <prvSampleTimeNow>
 80055d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d130      	bne.n	800563a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10a      	bne.n	80055f4 <prvProcessTimerOrBlockTask+0x3c>
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d806      	bhi.n	80055f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80055e6:	f7ff fa25 	bl	8004a34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80055ea:	68f9      	ldr	r1, [r7, #12]
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f7ff ff81 	bl	80054f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80055f2:	e024      	b.n	800563e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d008      	beq.n	800560c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80055fa:	4b13      	ldr	r3, [pc, #76]	@ (8005648 <prvProcessTimerOrBlockTask+0x90>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d101      	bne.n	8005608 <prvProcessTimerOrBlockTask+0x50>
 8005604:	2301      	movs	r3, #1
 8005606:	e000      	b.n	800560a <prvProcessTimerOrBlockTask+0x52>
 8005608:	2300      	movs	r3, #0
 800560a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800560c:	4b0f      	ldr	r3, [pc, #60]	@ (800564c <prvProcessTimerOrBlockTask+0x94>)
 800560e:	6818      	ldr	r0, [r3, #0]
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	4619      	mov	r1, r3
 800561a:	f7fe ff65 	bl	80044e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800561e:	f7ff fa09 	bl	8004a34 <xTaskResumeAll>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10a      	bne.n	800563e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005628:	4b09      	ldr	r3, [pc, #36]	@ (8005650 <prvProcessTimerOrBlockTask+0x98>)
 800562a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	f3bf 8f6f 	isb	sy
}
 8005638:	e001      	b.n	800563e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800563a:	f7ff f9fb 	bl	8004a34 <xTaskResumeAll>
}
 800563e:	bf00      	nop
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	20000e2c 	.word	0x20000e2c
 800564c:	20000e30 	.word	0x20000e30
 8005650:	e000ed04 	.word	0xe000ed04

08005654 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800565c:	4b0e      	ldr	r3, [pc, #56]	@ (8005698 <prvGetNextExpireTime+0x44>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <prvGetNextExpireTime+0x16>
 8005666:	2201      	movs	r2, #1
 8005668:	e000      	b.n	800566c <prvGetNextExpireTime+0x18>
 800566a:	2200      	movs	r2, #0
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d105      	bne.n	8005684 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005678:	4b07      	ldr	r3, [pc, #28]	@ (8005698 <prvGetNextExpireTime+0x44>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	60fb      	str	r3, [r7, #12]
 8005682:	e001      	b.n	8005688 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005684:	2300      	movs	r3, #0
 8005686:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005688:	68fb      	ldr	r3, [r7, #12]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	20000e28 	.word	0x20000e28

0800569c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80056a4:	f7ff fa64 	bl	8004b70 <xTaskGetTickCount>
 80056a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80056aa:	4b0b      	ldr	r3, [pc, #44]	@ (80056d8 <prvSampleTimeNow+0x3c>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d205      	bcs.n	80056c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80056b4:	f000 f93a 	bl	800592c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	e002      	b.n	80056c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80056c6:	4a04      	ldr	r2, [pc, #16]	@ (80056d8 <prvSampleTimeNow+0x3c>)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80056cc:	68fb      	ldr	r3, [r7, #12]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	20000e38 	.word	0x20000e38

080056dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
 80056e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80056ea:	2300      	movs	r3, #0
 80056ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d812      	bhi.n	8005728 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	1ad2      	subs	r2, r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	429a      	cmp	r2, r3
 800570e:	d302      	bcc.n	8005716 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005710:	2301      	movs	r3, #1
 8005712:	617b      	str	r3, [r7, #20]
 8005714:	e01b      	b.n	800574e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005716:	4b10      	ldr	r3, [pc, #64]	@ (8005758 <prvInsertTimerInActiveList+0x7c>)
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	3304      	adds	r3, #4
 800571e:	4619      	mov	r1, r3
 8005720:	4610      	mov	r0, r2
 8005722:	f7fe f9b8 	bl	8003a96 <vListInsert>
 8005726:	e012      	b.n	800574e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	429a      	cmp	r2, r3
 800572e:	d206      	bcs.n	800573e <prvInsertTimerInActiveList+0x62>
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	429a      	cmp	r2, r3
 8005736:	d302      	bcc.n	800573e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005738:	2301      	movs	r3, #1
 800573a:	617b      	str	r3, [r7, #20]
 800573c:	e007      	b.n	800574e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800573e:	4b07      	ldr	r3, [pc, #28]	@ (800575c <prvInsertTimerInActiveList+0x80>)
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	3304      	adds	r3, #4
 8005746:	4619      	mov	r1, r3
 8005748:	4610      	mov	r0, r2
 800574a:	f7fe f9a4 	bl	8003a96 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800574e:	697b      	ldr	r3, [r7, #20]
}
 8005750:	4618      	mov	r0, r3
 8005752:	3718      	adds	r7, #24
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	20000e2c 	.word	0x20000e2c
 800575c:	20000e28 	.word	0x20000e28

08005760 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b08e      	sub	sp, #56	@ 0x38
 8005764:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005766:	e0ce      	b.n	8005906 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	da19      	bge.n	80057a2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800576e:	1d3b      	adds	r3, r7, #4
 8005770:	3304      	adds	r3, #4
 8005772:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10b      	bne.n	8005792 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800577a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800577e:	f383 8811 	msr	BASEPRI, r3
 8005782:	f3bf 8f6f 	isb	sy
 8005786:	f3bf 8f4f 	dsb	sy
 800578a:	61fb      	str	r3, [r7, #28]
}
 800578c:	bf00      	nop
 800578e:	bf00      	nop
 8005790:	e7fd      	b.n	800578e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005798:	6850      	ldr	r0, [r2, #4]
 800579a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800579c:	6892      	ldr	r2, [r2, #8]
 800579e:	4611      	mov	r1, r2
 80057a0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f2c0 80ae 	blt.w	8005906 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80057ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d004      	beq.n	80057c0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80057b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b8:	3304      	adds	r3, #4
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7fe f9a4 	bl	8003b08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80057c0:	463b      	mov	r3, r7
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7ff ff6a 	bl	800569c <prvSampleTimeNow>
 80057c8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2b09      	cmp	r3, #9
 80057ce:	f200 8097 	bhi.w	8005900 <prvProcessReceivedCommands+0x1a0>
 80057d2:	a201      	add	r2, pc, #4	@ (adr r2, 80057d8 <prvProcessReceivedCommands+0x78>)
 80057d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d8:	08005801 	.word	0x08005801
 80057dc:	08005801 	.word	0x08005801
 80057e0:	08005801 	.word	0x08005801
 80057e4:	08005877 	.word	0x08005877
 80057e8:	0800588b 	.word	0x0800588b
 80057ec:	080058d7 	.word	0x080058d7
 80057f0:	08005801 	.word	0x08005801
 80057f4:	08005801 	.word	0x08005801
 80057f8:	08005877 	.word	0x08005877
 80057fc:	0800588b 	.word	0x0800588b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005802:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005806:	f043 0301 	orr.w	r3, r3, #1
 800580a:	b2da      	uxtb	r2, r3
 800580c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800580e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	18d1      	adds	r1, r2, r3
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800581e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005820:	f7ff ff5c 	bl	80056dc <prvInsertTimerInActiveList>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d06c      	beq.n	8005904 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800582a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005830:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005834:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005838:	f003 0304 	and.w	r3, r3, #4
 800583c:	2b00      	cmp	r3, #0
 800583e:	d061      	beq.n	8005904 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	441a      	add	r2, r3
 8005848:	2300      	movs	r3, #0
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	2300      	movs	r3, #0
 800584e:	2100      	movs	r1, #0
 8005850:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005852:	f7ff fe01 	bl	8005458 <xTimerGenericCommand>
 8005856:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d152      	bne.n	8005904 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800585e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005862:	f383 8811 	msr	BASEPRI, r3
 8005866:	f3bf 8f6f 	isb	sy
 800586a:	f3bf 8f4f 	dsb	sy
 800586e:	61bb      	str	r3, [r7, #24]
}
 8005870:	bf00      	nop
 8005872:	bf00      	nop
 8005874:	e7fd      	b.n	8005872 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005878:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800587c:	f023 0301 	bic.w	r3, r3, #1
 8005880:	b2da      	uxtb	r2, r3
 8005882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005884:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005888:	e03d      	b.n	8005906 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800588a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800588c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005890:	f043 0301 	orr.w	r3, r3, #1
 8005894:	b2da      	uxtb	r2, r3
 8005896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005898:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80058a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10b      	bne.n	80058c2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80058aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ae:	f383 8811 	msr	BASEPRI, r3
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	f3bf 8f4f 	dsb	sy
 80058ba:	617b      	str	r3, [r7, #20]
}
 80058bc:	bf00      	nop
 80058be:	bf00      	nop
 80058c0:	e7fd      	b.n	80058be <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80058c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058c4:	699a      	ldr	r2, [r3, #24]
 80058c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c8:	18d1      	adds	r1, r2, r3
 80058ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058d0:	f7ff ff04 	bl	80056dc <prvInsertTimerInActiveList>
					break;
 80058d4:	e017      	b.n	8005906 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80058d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d103      	bne.n	80058ec <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80058e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058e6:	f000 fbe7 	bl	80060b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80058ea:	e00c      	b.n	8005906 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80058ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80058f2:	f023 0301 	bic.w	r3, r3, #1
 80058f6:	b2da      	uxtb	r2, r3
 80058f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80058fe:	e002      	b.n	8005906 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005900:	bf00      	nop
 8005902:	e000      	b.n	8005906 <prvProcessReceivedCommands+0x1a6>
					break;
 8005904:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005906:	4b08      	ldr	r3, [pc, #32]	@ (8005928 <prvProcessReceivedCommands+0x1c8>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	1d39      	adds	r1, r7, #4
 800590c:	2200      	movs	r2, #0
 800590e:	4618      	mov	r0, r3
 8005910:	f7fe fbce 	bl	80040b0 <xQueueReceive>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	f47f af26 	bne.w	8005768 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800591c:	bf00      	nop
 800591e:	bf00      	nop
 8005920:	3730      	adds	r7, #48	@ 0x30
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	20000e30 	.word	0x20000e30

0800592c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b088      	sub	sp, #32
 8005930:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005932:	e049      	b.n	80059c8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005934:	4b2e      	ldr	r3, [pc, #184]	@ (80059f0 <prvSwitchTimerLists+0xc4>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800593e:	4b2c      	ldr	r3, [pc, #176]	@ (80059f0 <prvSwitchTimerLists+0xc4>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	3304      	adds	r3, #4
 800594c:	4618      	mov	r0, r3
 800594e:	f7fe f8db 	bl	8003b08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005960:	f003 0304 	and.w	r3, r3, #4
 8005964:	2b00      	cmp	r3, #0
 8005966:	d02f      	beq.n	80059c8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	4413      	add	r3, r2
 8005970:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	429a      	cmp	r2, r3
 8005978:	d90e      	bls.n	8005998 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005986:	4b1a      	ldr	r3, [pc, #104]	@ (80059f0 <prvSwitchTimerLists+0xc4>)
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	3304      	adds	r3, #4
 800598e:	4619      	mov	r1, r3
 8005990:	4610      	mov	r0, r2
 8005992:	f7fe f880 	bl	8003a96 <vListInsert>
 8005996:	e017      	b.n	80059c8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005998:	2300      	movs	r3, #0
 800599a:	9300      	str	r3, [sp, #0]
 800599c:	2300      	movs	r3, #0
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	2100      	movs	r1, #0
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f7ff fd58 	bl	8005458 <xTimerGenericCommand>
 80059a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10b      	bne.n	80059c8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80059b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	603b      	str	r3, [r7, #0]
}
 80059c2:	bf00      	nop
 80059c4:	bf00      	nop
 80059c6:	e7fd      	b.n	80059c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80059c8:	4b09      	ldr	r3, [pc, #36]	@ (80059f0 <prvSwitchTimerLists+0xc4>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1b0      	bne.n	8005934 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80059d2:	4b07      	ldr	r3, [pc, #28]	@ (80059f0 <prvSwitchTimerLists+0xc4>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80059d8:	4b06      	ldr	r3, [pc, #24]	@ (80059f4 <prvSwitchTimerLists+0xc8>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a04      	ldr	r2, [pc, #16]	@ (80059f0 <prvSwitchTimerLists+0xc4>)
 80059de:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80059e0:	4a04      	ldr	r2, [pc, #16]	@ (80059f4 <prvSwitchTimerLists+0xc8>)
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	6013      	str	r3, [r2, #0]
}
 80059e6:	bf00      	nop
 80059e8:	3718      	adds	r7, #24
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	20000e28 	.word	0x20000e28
 80059f4:	20000e2c 	.word	0x20000e2c

080059f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80059fe:	f000 f96b 	bl	8005cd8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005a02:	4b15      	ldr	r3, [pc, #84]	@ (8005a58 <prvCheckForValidListAndQueue+0x60>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d120      	bne.n	8005a4c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005a0a:	4814      	ldr	r0, [pc, #80]	@ (8005a5c <prvCheckForValidListAndQueue+0x64>)
 8005a0c:	f7fd fff2 	bl	80039f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005a10:	4813      	ldr	r0, [pc, #76]	@ (8005a60 <prvCheckForValidListAndQueue+0x68>)
 8005a12:	f7fd ffef 	bl	80039f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005a16:	4b13      	ldr	r3, [pc, #76]	@ (8005a64 <prvCheckForValidListAndQueue+0x6c>)
 8005a18:	4a10      	ldr	r2, [pc, #64]	@ (8005a5c <prvCheckForValidListAndQueue+0x64>)
 8005a1a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005a1c:	4b12      	ldr	r3, [pc, #72]	@ (8005a68 <prvCheckForValidListAndQueue+0x70>)
 8005a1e:	4a10      	ldr	r2, [pc, #64]	@ (8005a60 <prvCheckForValidListAndQueue+0x68>)
 8005a20:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005a22:	2300      	movs	r3, #0
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	4b11      	ldr	r3, [pc, #68]	@ (8005a6c <prvCheckForValidListAndQueue+0x74>)
 8005a28:	4a11      	ldr	r2, [pc, #68]	@ (8005a70 <prvCheckForValidListAndQueue+0x78>)
 8005a2a:	2110      	movs	r1, #16
 8005a2c:	200a      	movs	r0, #10
 8005a2e:	f7fe f8ff 	bl	8003c30 <xQueueGenericCreateStatic>
 8005a32:	4603      	mov	r3, r0
 8005a34:	4a08      	ldr	r2, [pc, #32]	@ (8005a58 <prvCheckForValidListAndQueue+0x60>)
 8005a36:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005a38:	4b07      	ldr	r3, [pc, #28]	@ (8005a58 <prvCheckForValidListAndQueue+0x60>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d005      	beq.n	8005a4c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005a40:	4b05      	ldr	r3, [pc, #20]	@ (8005a58 <prvCheckForValidListAndQueue+0x60>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	490b      	ldr	r1, [pc, #44]	@ (8005a74 <prvCheckForValidListAndQueue+0x7c>)
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fe fd24 	bl	8004494 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a4c:	f000 f976 	bl	8005d3c <vPortExitCritical>
}
 8005a50:	bf00      	nop
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	20000e30 	.word	0x20000e30
 8005a5c:	20000e00 	.word	0x20000e00
 8005a60:	20000e14 	.word	0x20000e14
 8005a64:	20000e28 	.word	0x20000e28
 8005a68:	20000e2c 	.word	0x20000e2c
 8005a6c:	20000edc 	.word	0x20000edc
 8005a70:	20000e3c 	.word	0x20000e3c
 8005a74:	08006510 	.word	0x08006510

08005a78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	3b04      	subs	r3, #4
 8005a88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005a90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	3b04      	subs	r3, #4
 8005a96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	f023 0201 	bic.w	r2, r3, #1
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	3b04      	subs	r3, #4
 8005aa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005aa8:	4a0c      	ldr	r2, [pc, #48]	@ (8005adc <pxPortInitialiseStack+0x64>)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	3b14      	subs	r3, #20
 8005ab2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	3b04      	subs	r3, #4
 8005abe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f06f 0202 	mvn.w	r2, #2
 8005ac6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	3b20      	subs	r3, #32
 8005acc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005ace:	68fb      	ldr	r3, [r7, #12]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr
 8005adc:	08005ae1 	.word	0x08005ae1

08005ae0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005aea:	4b13      	ldr	r3, [pc, #76]	@ (8005b38 <prvTaskExitError+0x58>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af2:	d00b      	beq.n	8005b0c <prvTaskExitError+0x2c>
	__asm volatile
 8005af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af8:	f383 8811 	msr	BASEPRI, r3
 8005afc:	f3bf 8f6f 	isb	sy
 8005b00:	f3bf 8f4f 	dsb	sy
 8005b04:	60fb      	str	r3, [r7, #12]
}
 8005b06:	bf00      	nop
 8005b08:	bf00      	nop
 8005b0a:	e7fd      	b.n	8005b08 <prvTaskExitError+0x28>
	__asm volatile
 8005b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b10:	f383 8811 	msr	BASEPRI, r3
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	60bb      	str	r3, [r7, #8]
}
 8005b1e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005b20:	bf00      	nop
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d0fc      	beq.n	8005b22 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005b28:	bf00      	nop
 8005b2a:	bf00      	nop
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	2000000c 	.word	0x2000000c
 8005b3c:	00000000 	.word	0x00000000

08005b40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005b40:	4b07      	ldr	r3, [pc, #28]	@ (8005b60 <pxCurrentTCBConst2>)
 8005b42:	6819      	ldr	r1, [r3, #0]
 8005b44:	6808      	ldr	r0, [r1, #0]
 8005b46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b4a:	f380 8809 	msr	PSP, r0
 8005b4e:	f3bf 8f6f 	isb	sy
 8005b52:	f04f 0000 	mov.w	r0, #0
 8005b56:	f380 8811 	msr	BASEPRI, r0
 8005b5a:	4770      	bx	lr
 8005b5c:	f3af 8000 	nop.w

08005b60 <pxCurrentTCBConst2>:
 8005b60:	20000900 	.word	0x20000900
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005b64:	bf00      	nop
 8005b66:	bf00      	nop

08005b68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005b68:	4808      	ldr	r0, [pc, #32]	@ (8005b8c <prvPortStartFirstTask+0x24>)
 8005b6a:	6800      	ldr	r0, [r0, #0]
 8005b6c:	6800      	ldr	r0, [r0, #0]
 8005b6e:	f380 8808 	msr	MSP, r0
 8005b72:	f04f 0000 	mov.w	r0, #0
 8005b76:	f380 8814 	msr	CONTROL, r0
 8005b7a:	b662      	cpsie	i
 8005b7c:	b661      	cpsie	f
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	df00      	svc	0
 8005b88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005b8a:	bf00      	nop
 8005b8c:	e000ed08 	.word	0xe000ed08

08005b90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005b96:	4b47      	ldr	r3, [pc, #284]	@ (8005cb4 <xPortStartScheduler+0x124>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a47      	ldr	r2, [pc, #284]	@ (8005cb8 <xPortStartScheduler+0x128>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d10b      	bne.n	8005bb8 <xPortStartScheduler+0x28>
	__asm volatile
 8005ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba4:	f383 8811 	msr	BASEPRI, r3
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	613b      	str	r3, [r7, #16]
}
 8005bb2:	bf00      	nop
 8005bb4:	bf00      	nop
 8005bb6:	e7fd      	b.n	8005bb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005bb8:	4b3e      	ldr	r3, [pc, #248]	@ (8005cb4 <xPortStartScheduler+0x124>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a3f      	ldr	r2, [pc, #252]	@ (8005cbc <xPortStartScheduler+0x12c>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d10b      	bne.n	8005bda <xPortStartScheduler+0x4a>
	__asm volatile
 8005bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc6:	f383 8811 	msr	BASEPRI, r3
 8005bca:	f3bf 8f6f 	isb	sy
 8005bce:	f3bf 8f4f 	dsb	sy
 8005bd2:	60fb      	str	r3, [r7, #12]
}
 8005bd4:	bf00      	nop
 8005bd6:	bf00      	nop
 8005bd8:	e7fd      	b.n	8005bd6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005bda:	4b39      	ldr	r3, [pc, #228]	@ (8005cc0 <xPortStartScheduler+0x130>)
 8005bdc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	22ff      	movs	r2, #255	@ 0xff
 8005bea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005bf4:	78fb      	ldrb	r3, [r7, #3]
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005bfc:	b2da      	uxtb	r2, r3
 8005bfe:	4b31      	ldr	r3, [pc, #196]	@ (8005cc4 <xPortStartScheduler+0x134>)
 8005c00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005c02:	4b31      	ldr	r3, [pc, #196]	@ (8005cc8 <xPortStartScheduler+0x138>)
 8005c04:	2207      	movs	r2, #7
 8005c06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c08:	e009      	b.n	8005c1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005c0a:	4b2f      	ldr	r3, [pc, #188]	@ (8005cc8 <xPortStartScheduler+0x138>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	4a2d      	ldr	r2, [pc, #180]	@ (8005cc8 <xPortStartScheduler+0x138>)
 8005c12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005c14:	78fb      	ldrb	r3, [r7, #3]
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c1e:	78fb      	ldrb	r3, [r7, #3]
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c26:	2b80      	cmp	r3, #128	@ 0x80
 8005c28:	d0ef      	beq.n	8005c0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005c2a:	4b27      	ldr	r3, [pc, #156]	@ (8005cc8 <xPortStartScheduler+0x138>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f1c3 0307 	rsb	r3, r3, #7
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	d00b      	beq.n	8005c4e <xPortStartScheduler+0xbe>
	__asm volatile
 8005c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c3a:	f383 8811 	msr	BASEPRI, r3
 8005c3e:	f3bf 8f6f 	isb	sy
 8005c42:	f3bf 8f4f 	dsb	sy
 8005c46:	60bb      	str	r3, [r7, #8]
}
 8005c48:	bf00      	nop
 8005c4a:	bf00      	nop
 8005c4c:	e7fd      	b.n	8005c4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8005cc8 <xPortStartScheduler+0x138>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	021b      	lsls	r3, r3, #8
 8005c54:	4a1c      	ldr	r2, [pc, #112]	@ (8005cc8 <xPortStartScheduler+0x138>)
 8005c56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c58:	4b1b      	ldr	r3, [pc, #108]	@ (8005cc8 <xPortStartScheduler+0x138>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005c60:	4a19      	ldr	r2, [pc, #100]	@ (8005cc8 <xPortStartScheduler+0x138>)
 8005c62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	b2da      	uxtb	r2, r3
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005c6c:	4b17      	ldr	r3, [pc, #92]	@ (8005ccc <xPortStartScheduler+0x13c>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a16      	ldr	r2, [pc, #88]	@ (8005ccc <xPortStartScheduler+0x13c>)
 8005c72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005c76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c78:	4b14      	ldr	r3, [pc, #80]	@ (8005ccc <xPortStartScheduler+0x13c>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a13      	ldr	r2, [pc, #76]	@ (8005ccc <xPortStartScheduler+0x13c>)
 8005c7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005c82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005c84:	f000 f8da 	bl	8005e3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c88:	4b11      	ldr	r3, [pc, #68]	@ (8005cd0 <xPortStartScheduler+0x140>)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005c8e:	f000 f8f9 	bl	8005e84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005c92:	4b10      	ldr	r3, [pc, #64]	@ (8005cd4 <xPortStartScheduler+0x144>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a0f      	ldr	r2, [pc, #60]	@ (8005cd4 <xPortStartScheduler+0x144>)
 8005c98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005c9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005c9e:	f7ff ff63 	bl	8005b68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005ca2:	f7ff f82f 	bl	8004d04 <vTaskSwitchContext>
	prvTaskExitError();
 8005ca6:	f7ff ff1b 	bl	8005ae0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3718      	adds	r7, #24
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	e000ed00 	.word	0xe000ed00
 8005cb8:	410fc271 	.word	0x410fc271
 8005cbc:	410fc270 	.word	0x410fc270
 8005cc0:	e000e400 	.word	0xe000e400
 8005cc4:	20000f2c 	.word	0x20000f2c
 8005cc8:	20000f30 	.word	0x20000f30
 8005ccc:	e000ed20 	.word	0xe000ed20
 8005cd0:	2000000c 	.word	0x2000000c
 8005cd4:	e000ef34 	.word	0xe000ef34

08005cd8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
	__asm volatile
 8005cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	607b      	str	r3, [r7, #4]
}
 8005cf0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005cf2:	4b10      	ldr	r3, [pc, #64]	@ (8005d34 <vPortEnterCritical+0x5c>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	4a0e      	ldr	r2, [pc, #56]	@ (8005d34 <vPortEnterCritical+0x5c>)
 8005cfa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8005d34 <vPortEnterCritical+0x5c>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d110      	bne.n	8005d26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005d04:	4b0c      	ldr	r3, [pc, #48]	@ (8005d38 <vPortEnterCritical+0x60>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00b      	beq.n	8005d26 <vPortEnterCritical+0x4e>
	__asm volatile
 8005d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d12:	f383 8811 	msr	BASEPRI, r3
 8005d16:	f3bf 8f6f 	isb	sy
 8005d1a:	f3bf 8f4f 	dsb	sy
 8005d1e:	603b      	str	r3, [r7, #0]
}
 8005d20:	bf00      	nop
 8005d22:	bf00      	nop
 8005d24:	e7fd      	b.n	8005d22 <vPortEnterCritical+0x4a>
	}
}
 8005d26:	bf00      	nop
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	2000000c 	.word	0x2000000c
 8005d38:	e000ed04 	.word	0xe000ed04

08005d3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005d42:	4b12      	ldr	r3, [pc, #72]	@ (8005d8c <vPortExitCritical+0x50>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d10b      	bne.n	8005d62 <vPortExitCritical+0x26>
	__asm volatile
 8005d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d4e:	f383 8811 	msr	BASEPRI, r3
 8005d52:	f3bf 8f6f 	isb	sy
 8005d56:	f3bf 8f4f 	dsb	sy
 8005d5a:	607b      	str	r3, [r7, #4]
}
 8005d5c:	bf00      	nop
 8005d5e:	bf00      	nop
 8005d60:	e7fd      	b.n	8005d5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005d62:	4b0a      	ldr	r3, [pc, #40]	@ (8005d8c <vPortExitCritical+0x50>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	3b01      	subs	r3, #1
 8005d68:	4a08      	ldr	r2, [pc, #32]	@ (8005d8c <vPortExitCritical+0x50>)
 8005d6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005d6c:	4b07      	ldr	r3, [pc, #28]	@ (8005d8c <vPortExitCritical+0x50>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d105      	bne.n	8005d80 <vPortExitCritical+0x44>
 8005d74:	2300      	movs	r3, #0
 8005d76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	f383 8811 	msr	BASEPRI, r3
}
 8005d7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	2000000c 	.word	0x2000000c

08005d90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d90:	f3ef 8009 	mrs	r0, PSP
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	4b15      	ldr	r3, [pc, #84]	@ (8005df0 <pxCurrentTCBConst>)
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	f01e 0f10 	tst.w	lr, #16
 8005da0:	bf08      	it	eq
 8005da2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005da6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005daa:	6010      	str	r0, [r2, #0]
 8005dac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005db0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005db4:	f380 8811 	msr	BASEPRI, r0
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	f3bf 8f6f 	isb	sy
 8005dc0:	f7fe ffa0 	bl	8004d04 <vTaskSwitchContext>
 8005dc4:	f04f 0000 	mov.w	r0, #0
 8005dc8:	f380 8811 	msr	BASEPRI, r0
 8005dcc:	bc09      	pop	{r0, r3}
 8005dce:	6819      	ldr	r1, [r3, #0]
 8005dd0:	6808      	ldr	r0, [r1, #0]
 8005dd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd6:	f01e 0f10 	tst.w	lr, #16
 8005dda:	bf08      	it	eq
 8005ddc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005de0:	f380 8809 	msr	PSP, r0
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	f3af 8000 	nop.w

08005df0 <pxCurrentTCBConst>:
 8005df0:	20000900 	.word	0x20000900
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005df4:	bf00      	nop
 8005df6:	bf00      	nop

08005df8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8005dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e02:	f383 8811 	msr	BASEPRI, r3
 8005e06:	f3bf 8f6f 	isb	sy
 8005e0a:	f3bf 8f4f 	dsb	sy
 8005e0e:	607b      	str	r3, [r7, #4]
}
 8005e10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005e12:	f7fe febd 	bl	8004b90 <xTaskIncrementTick>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d003      	beq.n	8005e24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005e1c:	4b06      	ldr	r3, [pc, #24]	@ (8005e38 <xPortSysTickHandler+0x40>)
 8005e1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	2300      	movs	r3, #0
 8005e26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	f383 8811 	msr	BASEPRI, r3
}
 8005e2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005e30:	bf00      	nop
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	e000ed04 	.word	0xe000ed04

08005e3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e40:	4b0b      	ldr	r3, [pc, #44]	@ (8005e70 <vPortSetupTimerInterrupt+0x34>)
 8005e42:	2200      	movs	r2, #0
 8005e44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e46:	4b0b      	ldr	r3, [pc, #44]	@ (8005e74 <vPortSetupTimerInterrupt+0x38>)
 8005e48:	2200      	movs	r2, #0
 8005e4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8005e78 <vPortSetupTimerInterrupt+0x3c>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a0a      	ldr	r2, [pc, #40]	@ (8005e7c <vPortSetupTimerInterrupt+0x40>)
 8005e52:	fba2 2303 	umull	r2, r3, r2, r3
 8005e56:	099b      	lsrs	r3, r3, #6
 8005e58:	4a09      	ldr	r2, [pc, #36]	@ (8005e80 <vPortSetupTimerInterrupt+0x44>)
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005e5e:	4b04      	ldr	r3, [pc, #16]	@ (8005e70 <vPortSetupTimerInterrupt+0x34>)
 8005e60:	2207      	movs	r2, #7
 8005e62:	601a      	str	r2, [r3, #0]
}
 8005e64:	bf00      	nop
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	e000e010 	.word	0xe000e010
 8005e74:	e000e018 	.word	0xe000e018
 8005e78:	20000000 	.word	0x20000000
 8005e7c:	10624dd3 	.word	0x10624dd3
 8005e80:	e000e014 	.word	0xe000e014

08005e84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005e84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005e94 <vPortEnableVFP+0x10>
 8005e88:	6801      	ldr	r1, [r0, #0]
 8005e8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005e8e:	6001      	str	r1, [r0, #0]
 8005e90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005e92:	bf00      	nop
 8005e94:	e000ed88 	.word	0xe000ed88

08005e98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005e9e:	f3ef 8305 	mrs	r3, IPSR
 8005ea2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2b0f      	cmp	r3, #15
 8005ea8:	d915      	bls.n	8005ed6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005eaa:	4a18      	ldr	r2, [pc, #96]	@ (8005f0c <vPortValidateInterruptPriority+0x74>)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	4413      	add	r3, r2
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005eb4:	4b16      	ldr	r3, [pc, #88]	@ (8005f10 <vPortValidateInterruptPriority+0x78>)
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	7afa      	ldrb	r2, [r7, #11]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d20b      	bcs.n	8005ed6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec2:	f383 8811 	msr	BASEPRI, r3
 8005ec6:	f3bf 8f6f 	isb	sy
 8005eca:	f3bf 8f4f 	dsb	sy
 8005ece:	607b      	str	r3, [r7, #4]
}
 8005ed0:	bf00      	nop
 8005ed2:	bf00      	nop
 8005ed4:	e7fd      	b.n	8005ed2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8005f14 <vPortValidateInterruptPriority+0x7c>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005ede:	4b0e      	ldr	r3, [pc, #56]	@ (8005f18 <vPortValidateInterruptPriority+0x80>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d90b      	bls.n	8005efe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eea:	f383 8811 	msr	BASEPRI, r3
 8005eee:	f3bf 8f6f 	isb	sy
 8005ef2:	f3bf 8f4f 	dsb	sy
 8005ef6:	603b      	str	r3, [r7, #0]
}
 8005ef8:	bf00      	nop
 8005efa:	bf00      	nop
 8005efc:	e7fd      	b.n	8005efa <vPortValidateInterruptPriority+0x62>
	}
 8005efe:	bf00      	nop
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	e000e3f0 	.word	0xe000e3f0
 8005f10:	20000f2c 	.word	0x20000f2c
 8005f14:	e000ed0c 	.word	0xe000ed0c
 8005f18:	20000f30 	.word	0x20000f30

08005f1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b08a      	sub	sp, #40	@ 0x28
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005f24:	2300      	movs	r3, #0
 8005f26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005f28:	f7fe fd76 	bl	8004a18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005f2c:	4b5c      	ldr	r3, [pc, #368]	@ (80060a0 <pvPortMalloc+0x184>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d101      	bne.n	8005f38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005f34:	f000 f924 	bl	8006180 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005f38:	4b5a      	ldr	r3, [pc, #360]	@ (80060a4 <pvPortMalloc+0x188>)
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4013      	ands	r3, r2
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f040 8095 	bne.w	8006070 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d01e      	beq.n	8005f8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005f4c:	2208      	movs	r2, #8
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4413      	add	r3, r2
 8005f52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f003 0307 	and.w	r3, r3, #7
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d015      	beq.n	8005f8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f023 0307 	bic.w	r3, r3, #7
 8005f64:	3308      	adds	r3, #8
 8005f66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f003 0307 	and.w	r3, r3, #7
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00b      	beq.n	8005f8a <pvPortMalloc+0x6e>
	__asm volatile
 8005f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f76:	f383 8811 	msr	BASEPRI, r3
 8005f7a:	f3bf 8f6f 	isb	sy
 8005f7e:	f3bf 8f4f 	dsb	sy
 8005f82:	617b      	str	r3, [r7, #20]
}
 8005f84:	bf00      	nop
 8005f86:	bf00      	nop
 8005f88:	e7fd      	b.n	8005f86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d06f      	beq.n	8006070 <pvPortMalloc+0x154>
 8005f90:	4b45      	ldr	r3, [pc, #276]	@ (80060a8 <pvPortMalloc+0x18c>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d86a      	bhi.n	8006070 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005f9a:	4b44      	ldr	r3, [pc, #272]	@ (80060ac <pvPortMalloc+0x190>)
 8005f9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005f9e:	4b43      	ldr	r3, [pc, #268]	@ (80060ac <pvPortMalloc+0x190>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fa4:	e004      	b.n	8005fb0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d903      	bls.n	8005fc2 <pvPortMalloc+0xa6>
 8005fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1f1      	bne.n	8005fa6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005fc2:	4b37      	ldr	r3, [pc, #220]	@ (80060a0 <pvPortMalloc+0x184>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d051      	beq.n	8006070 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005fcc:	6a3b      	ldr	r3, [r7, #32]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2208      	movs	r2, #8
 8005fd2:	4413      	add	r3, r2
 8005fd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	6a3b      	ldr	r3, [r7, #32]
 8005fdc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe0:	685a      	ldr	r2, [r3, #4]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	1ad2      	subs	r2, r2, r3
 8005fe6:	2308      	movs	r3, #8
 8005fe8:	005b      	lsls	r3, r3, #1
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d920      	bls.n	8006030 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005fee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	f003 0307 	and.w	r3, r3, #7
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00b      	beq.n	8006018 <pvPortMalloc+0xfc>
	__asm volatile
 8006000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006004:	f383 8811 	msr	BASEPRI, r3
 8006008:	f3bf 8f6f 	isb	sy
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	613b      	str	r3, [r7, #16]
}
 8006012:	bf00      	nop
 8006014:	bf00      	nop
 8006016:	e7fd      	b.n	8006014 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	1ad2      	subs	r2, r2, r3
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800602a:	69b8      	ldr	r0, [r7, #24]
 800602c:	f000 f90a 	bl	8006244 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006030:	4b1d      	ldr	r3, [pc, #116]	@ (80060a8 <pvPortMalloc+0x18c>)
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	4a1b      	ldr	r2, [pc, #108]	@ (80060a8 <pvPortMalloc+0x18c>)
 800603c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800603e:	4b1a      	ldr	r3, [pc, #104]	@ (80060a8 <pvPortMalloc+0x18c>)
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	4b1b      	ldr	r3, [pc, #108]	@ (80060b0 <pvPortMalloc+0x194>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	429a      	cmp	r2, r3
 8006048:	d203      	bcs.n	8006052 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800604a:	4b17      	ldr	r3, [pc, #92]	@ (80060a8 <pvPortMalloc+0x18c>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a18      	ldr	r2, [pc, #96]	@ (80060b0 <pvPortMalloc+0x194>)
 8006050:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006054:	685a      	ldr	r2, [r3, #4]
 8006056:	4b13      	ldr	r3, [pc, #76]	@ (80060a4 <pvPortMalloc+0x188>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	431a      	orrs	r2, r3
 800605c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006062:	2200      	movs	r2, #0
 8006064:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006066:	4b13      	ldr	r3, [pc, #76]	@ (80060b4 <pvPortMalloc+0x198>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	3301      	adds	r3, #1
 800606c:	4a11      	ldr	r2, [pc, #68]	@ (80060b4 <pvPortMalloc+0x198>)
 800606e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006070:	f7fe fce0 	bl	8004a34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	f003 0307 	and.w	r3, r3, #7
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00b      	beq.n	8006096 <pvPortMalloc+0x17a>
	__asm volatile
 800607e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006082:	f383 8811 	msr	BASEPRI, r3
 8006086:	f3bf 8f6f 	isb	sy
 800608a:	f3bf 8f4f 	dsb	sy
 800608e:	60fb      	str	r3, [r7, #12]
}
 8006090:	bf00      	nop
 8006092:	bf00      	nop
 8006094:	e7fd      	b.n	8006092 <pvPortMalloc+0x176>
	return pvReturn;
 8006096:	69fb      	ldr	r3, [r7, #28]
}
 8006098:	4618      	mov	r0, r3
 800609a:	3728      	adds	r7, #40	@ 0x28
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	20004b3c 	.word	0x20004b3c
 80060a4:	20004b50 	.word	0x20004b50
 80060a8:	20004b40 	.word	0x20004b40
 80060ac:	20004b34 	.word	0x20004b34
 80060b0:	20004b44 	.word	0x20004b44
 80060b4:	20004b48 	.word	0x20004b48

080060b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d04f      	beq.n	800616a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80060ca:	2308      	movs	r3, #8
 80060cc:	425b      	negs	r3, r3
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	4413      	add	r3, r2
 80060d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	4b25      	ldr	r3, [pc, #148]	@ (8006174 <vPortFree+0xbc>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4013      	ands	r3, r2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d10b      	bne.n	80060fe <vPortFree+0x46>
	__asm volatile
 80060e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ea:	f383 8811 	msr	BASEPRI, r3
 80060ee:	f3bf 8f6f 	isb	sy
 80060f2:	f3bf 8f4f 	dsb	sy
 80060f6:	60fb      	str	r3, [r7, #12]
}
 80060f8:	bf00      	nop
 80060fa:	bf00      	nop
 80060fc:	e7fd      	b.n	80060fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00b      	beq.n	800611e <vPortFree+0x66>
	__asm volatile
 8006106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800610a:	f383 8811 	msr	BASEPRI, r3
 800610e:	f3bf 8f6f 	isb	sy
 8006112:	f3bf 8f4f 	dsb	sy
 8006116:	60bb      	str	r3, [r7, #8]
}
 8006118:	bf00      	nop
 800611a:	bf00      	nop
 800611c:	e7fd      	b.n	800611a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	685a      	ldr	r2, [r3, #4]
 8006122:	4b14      	ldr	r3, [pc, #80]	@ (8006174 <vPortFree+0xbc>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4013      	ands	r3, r2
 8006128:	2b00      	cmp	r3, #0
 800612a:	d01e      	beq.n	800616a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d11a      	bne.n	800616a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	685a      	ldr	r2, [r3, #4]
 8006138:	4b0e      	ldr	r3, [pc, #56]	@ (8006174 <vPortFree+0xbc>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	43db      	mvns	r3, r3
 800613e:	401a      	ands	r2, r3
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006144:	f7fe fc68 	bl	8004a18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	685a      	ldr	r2, [r3, #4]
 800614c:	4b0a      	ldr	r3, [pc, #40]	@ (8006178 <vPortFree+0xc0>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4413      	add	r3, r2
 8006152:	4a09      	ldr	r2, [pc, #36]	@ (8006178 <vPortFree+0xc0>)
 8006154:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006156:	6938      	ldr	r0, [r7, #16]
 8006158:	f000 f874 	bl	8006244 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800615c:	4b07      	ldr	r3, [pc, #28]	@ (800617c <vPortFree+0xc4>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	3301      	adds	r3, #1
 8006162:	4a06      	ldr	r2, [pc, #24]	@ (800617c <vPortFree+0xc4>)
 8006164:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006166:	f7fe fc65 	bl	8004a34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800616a:	bf00      	nop
 800616c:	3718      	adds	r7, #24
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	20004b50 	.word	0x20004b50
 8006178:	20004b40 	.word	0x20004b40
 800617c:	20004b4c 	.word	0x20004b4c

08006180 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006186:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800618a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800618c:	4b27      	ldr	r3, [pc, #156]	@ (800622c <prvHeapInit+0xac>)
 800618e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f003 0307 	and.w	r3, r3, #7
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00c      	beq.n	80061b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	3307      	adds	r3, #7
 800619e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f023 0307 	bic.w	r3, r3, #7
 80061a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	4a1f      	ldr	r2, [pc, #124]	@ (800622c <prvHeapInit+0xac>)
 80061b0:	4413      	add	r3, r2
 80061b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80061b8:	4a1d      	ldr	r2, [pc, #116]	@ (8006230 <prvHeapInit+0xb0>)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80061be:	4b1c      	ldr	r3, [pc, #112]	@ (8006230 <prvHeapInit+0xb0>)
 80061c0:	2200      	movs	r2, #0
 80061c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	4413      	add	r3, r2
 80061ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80061cc:	2208      	movs	r2, #8
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	1a9b      	subs	r3, r3, r2
 80061d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f023 0307 	bic.w	r3, r3, #7
 80061da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	4a15      	ldr	r2, [pc, #84]	@ (8006234 <prvHeapInit+0xb4>)
 80061e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80061e2:	4b14      	ldr	r3, [pc, #80]	@ (8006234 <prvHeapInit+0xb4>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2200      	movs	r2, #0
 80061e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80061ea:	4b12      	ldr	r3, [pc, #72]	@ (8006234 <prvHeapInit+0xb4>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2200      	movs	r2, #0
 80061f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	1ad2      	subs	r2, r2, r3
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006200:	4b0c      	ldr	r3, [pc, #48]	@ (8006234 <prvHeapInit+0xb4>)
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	4a0a      	ldr	r2, [pc, #40]	@ (8006238 <prvHeapInit+0xb8>)
 800620e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	4a09      	ldr	r2, [pc, #36]	@ (800623c <prvHeapInit+0xbc>)
 8006216:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006218:	4b09      	ldr	r3, [pc, #36]	@ (8006240 <prvHeapInit+0xc0>)
 800621a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800621e:	601a      	str	r2, [r3, #0]
}
 8006220:	bf00      	nop
 8006222:	3714      	adds	r7, #20
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr
 800622c:	20000f34 	.word	0x20000f34
 8006230:	20004b34 	.word	0x20004b34
 8006234:	20004b3c 	.word	0x20004b3c
 8006238:	20004b44 	.word	0x20004b44
 800623c:	20004b40 	.word	0x20004b40
 8006240:	20004b50 	.word	0x20004b50

08006244 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800624c:	4b28      	ldr	r3, [pc, #160]	@ (80062f0 <prvInsertBlockIntoFreeList+0xac>)
 800624e:	60fb      	str	r3, [r7, #12]
 8006250:	e002      	b.n	8006258 <prvInsertBlockIntoFreeList+0x14>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	60fb      	str	r3, [r7, #12]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	429a      	cmp	r2, r3
 8006260:	d8f7      	bhi.n	8006252 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	4413      	add	r3, r2
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	429a      	cmp	r2, r3
 8006272:	d108      	bne.n	8006286 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	685a      	ldr	r2, [r3, #4]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	441a      	add	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	441a      	add	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	429a      	cmp	r2, r3
 8006298:	d118      	bne.n	80062cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	4b15      	ldr	r3, [pc, #84]	@ (80062f4 <prvInsertBlockIntoFreeList+0xb0>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d00d      	beq.n	80062c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	441a      	add	r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	601a      	str	r2, [r3, #0]
 80062c0:	e008      	b.n	80062d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80062c2:	4b0c      	ldr	r3, [pc, #48]	@ (80062f4 <prvInsertBlockIntoFreeList+0xb0>)
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	601a      	str	r2, [r3, #0]
 80062ca:	e003      	b.n	80062d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d002      	beq.n	80062e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062e2:	bf00      	nop
 80062e4:	3714      	adds	r7, #20
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	20004b34 	.word	0x20004b34
 80062f4:	20004b3c 	.word	0x20004b3c

080062f8 <memset>:
 80062f8:	4402      	add	r2, r0
 80062fa:	4603      	mov	r3, r0
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d100      	bne.n	8006302 <memset+0xa>
 8006300:	4770      	bx	lr
 8006302:	f803 1b01 	strb.w	r1, [r3], #1
 8006306:	e7f9      	b.n	80062fc <memset+0x4>

08006308 <_reclaim_reent>:
 8006308:	4b29      	ldr	r3, [pc, #164]	@ (80063b0 <_reclaim_reent+0xa8>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4283      	cmp	r3, r0
 800630e:	b570      	push	{r4, r5, r6, lr}
 8006310:	4604      	mov	r4, r0
 8006312:	d04b      	beq.n	80063ac <_reclaim_reent+0xa4>
 8006314:	69c3      	ldr	r3, [r0, #28]
 8006316:	b1ab      	cbz	r3, 8006344 <_reclaim_reent+0x3c>
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	b16b      	cbz	r3, 8006338 <_reclaim_reent+0x30>
 800631c:	2500      	movs	r5, #0
 800631e:	69e3      	ldr	r3, [r4, #28]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	5959      	ldr	r1, [r3, r5]
 8006324:	2900      	cmp	r1, #0
 8006326:	d13b      	bne.n	80063a0 <_reclaim_reent+0x98>
 8006328:	3504      	adds	r5, #4
 800632a:	2d80      	cmp	r5, #128	@ 0x80
 800632c:	d1f7      	bne.n	800631e <_reclaim_reent+0x16>
 800632e:	69e3      	ldr	r3, [r4, #28]
 8006330:	4620      	mov	r0, r4
 8006332:	68d9      	ldr	r1, [r3, #12]
 8006334:	f000 f872 	bl	800641c <_free_r>
 8006338:	69e3      	ldr	r3, [r4, #28]
 800633a:	6819      	ldr	r1, [r3, #0]
 800633c:	b111      	cbz	r1, 8006344 <_reclaim_reent+0x3c>
 800633e:	4620      	mov	r0, r4
 8006340:	f000 f86c 	bl	800641c <_free_r>
 8006344:	6961      	ldr	r1, [r4, #20]
 8006346:	b111      	cbz	r1, 800634e <_reclaim_reent+0x46>
 8006348:	4620      	mov	r0, r4
 800634a:	f000 f867 	bl	800641c <_free_r>
 800634e:	69e1      	ldr	r1, [r4, #28]
 8006350:	b111      	cbz	r1, 8006358 <_reclaim_reent+0x50>
 8006352:	4620      	mov	r0, r4
 8006354:	f000 f862 	bl	800641c <_free_r>
 8006358:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800635a:	b111      	cbz	r1, 8006362 <_reclaim_reent+0x5a>
 800635c:	4620      	mov	r0, r4
 800635e:	f000 f85d 	bl	800641c <_free_r>
 8006362:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006364:	b111      	cbz	r1, 800636c <_reclaim_reent+0x64>
 8006366:	4620      	mov	r0, r4
 8006368:	f000 f858 	bl	800641c <_free_r>
 800636c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800636e:	b111      	cbz	r1, 8006376 <_reclaim_reent+0x6e>
 8006370:	4620      	mov	r0, r4
 8006372:	f000 f853 	bl	800641c <_free_r>
 8006376:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006378:	b111      	cbz	r1, 8006380 <_reclaim_reent+0x78>
 800637a:	4620      	mov	r0, r4
 800637c:	f000 f84e 	bl	800641c <_free_r>
 8006380:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006382:	b111      	cbz	r1, 800638a <_reclaim_reent+0x82>
 8006384:	4620      	mov	r0, r4
 8006386:	f000 f849 	bl	800641c <_free_r>
 800638a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800638c:	b111      	cbz	r1, 8006394 <_reclaim_reent+0x8c>
 800638e:	4620      	mov	r0, r4
 8006390:	f000 f844 	bl	800641c <_free_r>
 8006394:	6a23      	ldr	r3, [r4, #32]
 8006396:	b14b      	cbz	r3, 80063ac <_reclaim_reent+0xa4>
 8006398:	4620      	mov	r0, r4
 800639a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800639e:	4718      	bx	r3
 80063a0:	680e      	ldr	r6, [r1, #0]
 80063a2:	4620      	mov	r0, r4
 80063a4:	f000 f83a 	bl	800641c <_free_r>
 80063a8:	4631      	mov	r1, r6
 80063aa:	e7bb      	b.n	8006324 <_reclaim_reent+0x1c>
 80063ac:	bd70      	pop	{r4, r5, r6, pc}
 80063ae:	bf00      	nop
 80063b0:	20000010 	.word	0x20000010

080063b4 <__libc_init_array>:
 80063b4:	b570      	push	{r4, r5, r6, lr}
 80063b6:	4d0d      	ldr	r5, [pc, #52]	@ (80063ec <__libc_init_array+0x38>)
 80063b8:	4c0d      	ldr	r4, [pc, #52]	@ (80063f0 <__libc_init_array+0x3c>)
 80063ba:	1b64      	subs	r4, r4, r5
 80063bc:	10a4      	asrs	r4, r4, #2
 80063be:	2600      	movs	r6, #0
 80063c0:	42a6      	cmp	r6, r4
 80063c2:	d109      	bne.n	80063d8 <__libc_init_array+0x24>
 80063c4:	4d0b      	ldr	r5, [pc, #44]	@ (80063f4 <__libc_init_array+0x40>)
 80063c6:	4c0c      	ldr	r4, [pc, #48]	@ (80063f8 <__libc_init_array+0x44>)
 80063c8:	f000 f87e 	bl	80064c8 <_init>
 80063cc:	1b64      	subs	r4, r4, r5
 80063ce:	10a4      	asrs	r4, r4, #2
 80063d0:	2600      	movs	r6, #0
 80063d2:	42a6      	cmp	r6, r4
 80063d4:	d105      	bne.n	80063e2 <__libc_init_array+0x2e>
 80063d6:	bd70      	pop	{r4, r5, r6, pc}
 80063d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80063dc:	4798      	blx	r3
 80063de:	3601      	adds	r6, #1
 80063e0:	e7ee      	b.n	80063c0 <__libc_init_array+0xc>
 80063e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80063e6:	4798      	blx	r3
 80063e8:	3601      	adds	r6, #1
 80063ea:	e7f2      	b.n	80063d2 <__libc_init_array+0x1e>
 80063ec:	080065a4 	.word	0x080065a4
 80063f0:	080065a4 	.word	0x080065a4
 80063f4:	080065a4 	.word	0x080065a4
 80063f8:	080065a8 	.word	0x080065a8

080063fc <__retarget_lock_acquire_recursive>:
 80063fc:	4770      	bx	lr

080063fe <__retarget_lock_release_recursive>:
 80063fe:	4770      	bx	lr

08006400 <memcpy>:
 8006400:	440a      	add	r2, r1
 8006402:	4291      	cmp	r1, r2
 8006404:	f100 33ff 	add.w	r3, r0, #4294967295
 8006408:	d100      	bne.n	800640c <memcpy+0xc>
 800640a:	4770      	bx	lr
 800640c:	b510      	push	{r4, lr}
 800640e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006412:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006416:	4291      	cmp	r1, r2
 8006418:	d1f9      	bne.n	800640e <memcpy+0xe>
 800641a:	bd10      	pop	{r4, pc}

0800641c <_free_r>:
 800641c:	b538      	push	{r3, r4, r5, lr}
 800641e:	4605      	mov	r5, r0
 8006420:	2900      	cmp	r1, #0
 8006422:	d041      	beq.n	80064a8 <_free_r+0x8c>
 8006424:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006428:	1f0c      	subs	r4, r1, #4
 800642a:	2b00      	cmp	r3, #0
 800642c:	bfb8      	it	lt
 800642e:	18e4      	addlt	r4, r4, r3
 8006430:	f000 f83e 	bl	80064b0 <__malloc_lock>
 8006434:	4a1d      	ldr	r2, [pc, #116]	@ (80064ac <_free_r+0x90>)
 8006436:	6813      	ldr	r3, [r2, #0]
 8006438:	b933      	cbnz	r3, 8006448 <_free_r+0x2c>
 800643a:	6063      	str	r3, [r4, #4]
 800643c:	6014      	str	r4, [r2, #0]
 800643e:	4628      	mov	r0, r5
 8006440:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006444:	f000 b83a 	b.w	80064bc <__malloc_unlock>
 8006448:	42a3      	cmp	r3, r4
 800644a:	d908      	bls.n	800645e <_free_r+0x42>
 800644c:	6820      	ldr	r0, [r4, #0]
 800644e:	1821      	adds	r1, r4, r0
 8006450:	428b      	cmp	r3, r1
 8006452:	bf01      	itttt	eq
 8006454:	6819      	ldreq	r1, [r3, #0]
 8006456:	685b      	ldreq	r3, [r3, #4]
 8006458:	1809      	addeq	r1, r1, r0
 800645a:	6021      	streq	r1, [r4, #0]
 800645c:	e7ed      	b.n	800643a <_free_r+0x1e>
 800645e:	461a      	mov	r2, r3
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	b10b      	cbz	r3, 8006468 <_free_r+0x4c>
 8006464:	42a3      	cmp	r3, r4
 8006466:	d9fa      	bls.n	800645e <_free_r+0x42>
 8006468:	6811      	ldr	r1, [r2, #0]
 800646a:	1850      	adds	r0, r2, r1
 800646c:	42a0      	cmp	r0, r4
 800646e:	d10b      	bne.n	8006488 <_free_r+0x6c>
 8006470:	6820      	ldr	r0, [r4, #0]
 8006472:	4401      	add	r1, r0
 8006474:	1850      	adds	r0, r2, r1
 8006476:	4283      	cmp	r3, r0
 8006478:	6011      	str	r1, [r2, #0]
 800647a:	d1e0      	bne.n	800643e <_free_r+0x22>
 800647c:	6818      	ldr	r0, [r3, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	6053      	str	r3, [r2, #4]
 8006482:	4408      	add	r0, r1
 8006484:	6010      	str	r0, [r2, #0]
 8006486:	e7da      	b.n	800643e <_free_r+0x22>
 8006488:	d902      	bls.n	8006490 <_free_r+0x74>
 800648a:	230c      	movs	r3, #12
 800648c:	602b      	str	r3, [r5, #0]
 800648e:	e7d6      	b.n	800643e <_free_r+0x22>
 8006490:	6820      	ldr	r0, [r4, #0]
 8006492:	1821      	adds	r1, r4, r0
 8006494:	428b      	cmp	r3, r1
 8006496:	bf04      	itt	eq
 8006498:	6819      	ldreq	r1, [r3, #0]
 800649a:	685b      	ldreq	r3, [r3, #4]
 800649c:	6063      	str	r3, [r4, #4]
 800649e:	bf04      	itt	eq
 80064a0:	1809      	addeq	r1, r1, r0
 80064a2:	6021      	streq	r1, [r4, #0]
 80064a4:	6054      	str	r4, [r2, #4]
 80064a6:	e7ca      	b.n	800643e <_free_r+0x22>
 80064a8:	bd38      	pop	{r3, r4, r5, pc}
 80064aa:	bf00      	nop
 80064ac:	20004c90 	.word	0x20004c90

080064b0 <__malloc_lock>:
 80064b0:	4801      	ldr	r0, [pc, #4]	@ (80064b8 <__malloc_lock+0x8>)
 80064b2:	f7ff bfa3 	b.w	80063fc <__retarget_lock_acquire_recursive>
 80064b6:	bf00      	nop
 80064b8:	20004c8c 	.word	0x20004c8c

080064bc <__malloc_unlock>:
 80064bc:	4801      	ldr	r0, [pc, #4]	@ (80064c4 <__malloc_unlock+0x8>)
 80064be:	f7ff bf9e 	b.w	80063fe <__retarget_lock_release_recursive>
 80064c2:	bf00      	nop
 80064c4:	20004c8c 	.word	0x20004c8c

080064c8 <_init>:
 80064c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ca:	bf00      	nop
 80064cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ce:	bc08      	pop	{r3}
 80064d0:	469e      	mov	lr, r3
 80064d2:	4770      	bx	lr

080064d4 <_fini>:
 80064d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064d6:	bf00      	nop
 80064d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064da:	bc08      	pop	{r3}
 80064dc:	469e      	mov	lr, r3
 80064de:	4770      	bx	lr
