
Prerivanie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065b0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08006750  08006750  00007750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800683c  0800683c  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  0800683c  0800683c  0000783c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006844  08006844  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006844  08006844  00007844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006848  08006848  00007848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800684c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c3c  20000060  080068ac  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c9c  080068ac  00008c9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d6a  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a14  00000000  00000000  00021dfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e0  00000000  00000000  00025810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000102b  00000000  00000000  00026cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188f9  00000000  00000000  00027d1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018e6c  00000000  00000000  00040614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097a7d  00000000  00000000  00059480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f0efd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059d0  00000000  00000000  000f0f40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  000f6910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006738 	.word	0x08006738

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08006738 	.word	0x08006738

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <Set_PWM_Duty_Cycle>:
uint8_t data[3];
uint16_t pwm;
uint8_t flagReceive;

void Set_PWM_Duty_Cycle(TIM_HandleTypeDef *htim, uint32_t Channel, uint16_t pwm)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	4613      	mov	r3, r2
 80004dc:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COMPARE(htim, Channel, pwm);
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d104      	bne.n	80004ee <Set_PWM_Duty_Cycle+0x1e>
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	88fa      	ldrh	r2, [r7, #6]
 80004ea:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80004ec:	e013      	b.n	8000516 <Set_PWM_Duty_Cycle+0x46>
    __HAL_TIM_SET_COMPARE(htim, Channel, pwm);
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	2b04      	cmp	r3, #4
 80004f2:	d104      	bne.n	80004fe <Set_PWM_Duty_Cycle+0x2e>
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	681a      	ldr	r2, [r3, #0]
 80004f8:	88fb      	ldrh	r3, [r7, #6]
 80004fa:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80004fc:	e00b      	b.n	8000516 <Set_PWM_Duty_Cycle+0x46>
    __HAL_TIM_SET_COMPARE(htim, Channel, pwm);
 80004fe:	68bb      	ldr	r3, [r7, #8]
 8000500:	2b08      	cmp	r3, #8
 8000502:	d104      	bne.n	800050e <Set_PWM_Duty_Cycle+0x3e>
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	88fb      	ldrh	r3, [r7, #6]
 800050a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800050c:	e003      	b.n	8000516 <Set_PWM_Duty_Cycle+0x46>
    __HAL_TIM_SET_COMPARE(htim, Channel, pwm);
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	88fb      	ldrh	r3, [r7, #6]
 8000514:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000516:	bf00      	nop
 8000518:	3714      	adds	r7, #20
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
	...

08000524 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
          if(huart == &huart1)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	4a06      	ldr	r2, [pc, #24]	@ (8000548 <HAL_UART_RxCpltCallback+0x24>)
 8000530:	4293      	cmp	r3, r2
 8000532:	d104      	bne.n	800053e <HAL_UART_RxCpltCallback+0x1a>
          {
        	  HAL_UART_Receive_IT(&huart1, &dataReceive, 1);
 8000534:	2201      	movs	r2, #1
 8000536:	4905      	ldr	r1, [pc, #20]	@ (800054c <HAL_UART_RxCpltCallback+0x28>)
 8000538:	4803      	ldr	r0, [pc, #12]	@ (8000548 <HAL_UART_RxCpltCallback+0x24>)
 800053a:	f002 fafd 	bl	8002b38 <HAL_UART_Receive_IT>
          }
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	20000128 	.word	0x20000128
 800054c:	2000007c 	.word	0x2000007c

08000550 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	/*HAL_UART_Receive_IT(&huart1, &dataReceive, 1);*/
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000554:	2100      	movs	r1, #0
 8000556:	4815      	ldr	r0, [pc, #84]	@ (80005ac <MX_FREERTOS_Init+0x5c>)
 8000558:	f001 fd02 	bl	8001f60 <HAL_TIM_PWM_Start>
	HAL_UART_Receive_IT(&huart1, &dataReceive, 1);
 800055c:	2201      	movs	r2, #1
 800055e:	4914      	ldr	r1, [pc, #80]	@ (80005b0 <MX_FREERTOS_Init+0x60>)
 8000560:	4814      	ldr	r0, [pc, #80]	@ (80005b4 <MX_FREERTOS_Init+0x64>)
 8000562:	f002 fae9 	bl	8002b38 <HAL_UART_Receive_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000566:	4a14      	ldr	r2, [pc, #80]	@ (80005b8 <MX_FREERTOS_Init+0x68>)
 8000568:	2100      	movs	r1, #0
 800056a:	4814      	ldr	r0, [pc, #80]	@ (80005bc <MX_FREERTOS_Init+0x6c>)
 800056c:	f003 fa96 	bl	8003a9c <osThreadNew>
 8000570:	4603      	mov	r3, r0
 8000572:	4a13      	ldr	r2, [pc, #76]	@ (80005c0 <MX_FREERTOS_Init+0x70>)
 8000574:	6013      	str	r3, [r2, #0]

  /* creation of bitChecking */
  bitCheckingHandle = osThreadNew(StartBitChecking, NULL, &bitChecking_attributes);
 8000576:	4a13      	ldr	r2, [pc, #76]	@ (80005c4 <MX_FREERTOS_Init+0x74>)
 8000578:	2100      	movs	r1, #0
 800057a:	4813      	ldr	r0, [pc, #76]	@ (80005c8 <MX_FREERTOS_Init+0x78>)
 800057c:	f003 fa8e 	bl	8003a9c <osThreadNew>
 8000580:	4603      	mov	r3, r0
 8000582:	4a12      	ldr	r2, [pc, #72]	@ (80005cc <MX_FREERTOS_Init+0x7c>)
 8000584:	6013      	str	r3, [r2, #0]

  /* creation of pwmSet */
  pwmSetHandle = osThreadNew(StartPWM_Set, NULL, &pwmSet_attributes);
 8000586:	4a12      	ldr	r2, [pc, #72]	@ (80005d0 <MX_FREERTOS_Init+0x80>)
 8000588:	2100      	movs	r1, #0
 800058a:	4812      	ldr	r0, [pc, #72]	@ (80005d4 <MX_FREERTOS_Init+0x84>)
 800058c:	f003 fa86 	bl	8003a9c <osThreadNew>
 8000590:	4603      	mov	r3, r0
 8000592:	4a11      	ldr	r2, [pc, #68]	@ (80005d8 <MX_FREERTOS_Init+0x88>)
 8000594:	6013      	str	r3, [r2, #0]

  /* creation of ledBlink */
  ledBlinkHandle = osThreadNew(StartLedBlink, NULL, &ledBlink_attributes);
 8000596:	4a11      	ldr	r2, [pc, #68]	@ (80005dc <MX_FREERTOS_Init+0x8c>)
 8000598:	2100      	movs	r1, #0
 800059a:	4811      	ldr	r0, [pc, #68]	@ (80005e0 <MX_FREERTOS_Init+0x90>)
 800059c:	f003 fa7e 	bl	8003a9c <osThreadNew>
 80005a0:	4603      	mov	r3, r0
 80005a2:	4a10      	ldr	r2, [pc, #64]	@ (80005e4 <MX_FREERTOS_Init+0x94>)
 80005a4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	200000e0 	.word	0x200000e0
 80005b0:	2000007c 	.word	0x2000007c
 80005b4:	20000128 	.word	0x20000128
 80005b8:	08006794 	.word	0x08006794
 80005bc:	080005e9 	.word	0x080005e9
 80005c0:	20000088 	.word	0x20000088
 80005c4:	080067b8 	.word	0x080067b8
 80005c8:	080005f9 	.word	0x080005f9
 80005cc:	2000008c 	.word	0x2000008c
 80005d0:	080067dc 	.word	0x080067dc
 80005d4:	08000645 	.word	0x08000645
 80005d8:	20000090 	.word	0x20000090
 80005dc:	08006800 	.word	0x08006800
 80005e0:	08000695 	.word	0x08000695
 80005e4:	20000094 	.word	0x20000094

080005e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005f0:	2001      	movs	r0, #1
 80005f2:	f003 fae5 	bl	8003bc0 <osDelay>
 80005f6:	e7fb      	b.n	80005f0 <StartDefaultTask+0x8>

080005f8 <StartBitChecking>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBitChecking */
void StartBitChecking(void *argument)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBitChecking */
	int count;
  /* Infinite loop */
  for(;;)
  {
		if (bitcheck(dataReceive, 7)) {
 8000600:	4b0e      	ldr	r3, [pc, #56]	@ (800063c <StartBitChecking+0x44>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	b25b      	sxtb	r3, r3
 8000606:	2b00      	cmp	r3, #0
 8000608:	da0a      	bge.n	8000620 <StartBitChecking+0x28>
			count++;
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	3301      	adds	r3, #1
 800060e:	60fb      	str	r3, [r7, #12]
			data[count] = dataReceive;
 8000610:	4b0a      	ldr	r3, [pc, #40]	@ (800063c <StartBitChecking+0x44>)
 8000612:	7819      	ldrb	r1, [r3, #0]
 8000614:	4a0a      	ldr	r2, [pc, #40]	@ (8000640 <StartBitChecking+0x48>)
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	4413      	add	r3, r2
 800061a:	460a      	mov	r2, r1
 800061c:	701a      	strb	r2, [r3, #0]
 800061e:	e008      	b.n	8000632 <StartBitChecking+0x3a>
		} else {
			count = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	60fb      	str	r3, [r7, #12]
			data[count] = dataReceive;
 8000624:	4b05      	ldr	r3, [pc, #20]	@ (800063c <StartBitChecking+0x44>)
 8000626:	7819      	ldrb	r1, [r3, #0]
 8000628:	4a05      	ldr	r2, [pc, #20]	@ (8000640 <StartBitChecking+0x48>)
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	4413      	add	r3, r2
 800062e:	460a      	mov	r2, r1
 8000630:	701a      	strb	r2, [r3, #0]
		}
    osDelay(1);
 8000632:	2001      	movs	r0, #1
 8000634:	f003 fac4 	bl	8003bc0 <osDelay>
		if (bitcheck(dataReceive, 7)) {
 8000638:	e7e2      	b.n	8000600 <StartBitChecking+0x8>
 800063a:	bf00      	nop
 800063c:	2000007c 	.word	0x2000007c
 8000640:	20000080 	.word	0x20000080

08000644 <StartPWM_Set>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPWM_Set */
void StartPWM_Set(void *argument)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPWM_Set */
  /* Infinite loop */
  for(;;)
  {
	if(bitcheck(data[0], 6)){
 800064c:	4b0f      	ldr	r3, [pc, #60]	@ (800068c <StartPWM_Set+0x48>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000654:	2b00      	cmp	r3, #0
 8000656:	d009      	beq.n	800066c <StartPWM_Set+0x28>
		pwm = (uint16_t)(data[1]&255)*20;
 8000658:	4b0c      	ldr	r3, [pc, #48]	@ (800068c <StartPWM_Set+0x48>)
 800065a:	785b      	ldrb	r3, [r3, #1]
 800065c:	461a      	mov	r2, r3
 800065e:	0092      	lsls	r2, r2, #2
 8000660:	4413      	add	r3, r2
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	b29a      	uxth	r2, r3
 8000666:	4b0a      	ldr	r3, [pc, #40]	@ (8000690 <StartPWM_Set+0x4c>)
 8000668:	801a      	strh	r2, [r3, #0]
 800066a:	e00b      	b.n	8000684 <StartPWM_Set+0x40>
	}
	else{
		pwm = (uint16_t)(data[1]&127)*20;
 800066c:	4b07      	ldr	r3, [pc, #28]	@ (800068c <StartPWM_Set+0x48>)
 800066e:	785b      	ldrb	r3, [r3, #1]
 8000670:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000674:	b29b      	uxth	r3, r3
 8000676:	461a      	mov	r2, r3
 8000678:	0092      	lsls	r2, r2, #2
 800067a:	4413      	add	r3, r2
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	b29a      	uxth	r2, r3
 8000680:	4b03      	ldr	r3, [pc, #12]	@ (8000690 <StartPWM_Set+0x4c>)
 8000682:	801a      	strh	r2, [r3, #0]
	}
    osDelay(1);
 8000684:	2001      	movs	r0, #1
 8000686:	f003 fa9b 	bl	8003bc0 <osDelay>
	if(bitcheck(data[0], 6)){
 800068a:	e7df      	b.n	800064c <StartPWM_Set+0x8>
 800068c:	20000080 	.word	0x20000080
 8000690:	20000084 	.word	0x20000084

08000694 <StartLedBlink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedBlink */
void StartLedBlink(void *argument)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedBlink */

  /* Infinite loop */
  for(;;)
  {
	Set_PWM_Duty_Cycle(&htim1, TIM_CHANNEL_1, pwm);
 800069c:	4b05      	ldr	r3, [pc, #20]	@ (80006b4 <StartLedBlink+0x20>)
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	2100      	movs	r1, #0
 80006a4:	4804      	ldr	r0, [pc, #16]	@ (80006b8 <StartLedBlink+0x24>)
 80006a6:	f7ff ff13 	bl	80004d0 <Set_PWM_Duty_Cycle>
    osDelay(1);
 80006aa:	2001      	movs	r0, #1
 80006ac:	f003 fa88 	bl	8003bc0 <osDelay>
	Set_PWM_Duty_Cycle(&htim1, TIM_CHANNEL_1, pwm);
 80006b0:	bf00      	nop
 80006b2:	e7f3      	b.n	800069c <StartLedBlink+0x8>
 80006b4:	20000084 	.word	0x20000084
 80006b8:	200000e0 	.word	0x200000e0

080006bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08a      	sub	sp, #40	@ 0x28
 80006c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
 80006d6:	4b2d      	ldr	r3, [pc, #180]	@ (800078c <MX_GPIO_Init+0xd0>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	4a2c      	ldr	r2, [pc, #176]	@ (800078c <MX_GPIO_Init+0xd0>)
 80006dc:	f043 0304 	orr.w	r3, r3, #4
 80006e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e2:	4b2a      	ldr	r3, [pc, #168]	@ (800078c <MX_GPIO_Init+0xd0>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	f003 0304 	and.w	r3, r3, #4
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	4b26      	ldr	r3, [pc, #152]	@ (800078c <MX_GPIO_Init+0xd0>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	4a25      	ldr	r2, [pc, #148]	@ (800078c <MX_GPIO_Init+0xd0>)
 80006f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fe:	4b23      	ldr	r3, [pc, #140]	@ (800078c <MX_GPIO_Init+0xd0>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	4b1f      	ldr	r3, [pc, #124]	@ (800078c <MX_GPIO_Init+0xd0>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	4a1e      	ldr	r2, [pc, #120]	@ (800078c <MX_GPIO_Init+0xd0>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6313      	str	r3, [r2, #48]	@ 0x30
 800071a:	4b1c      	ldr	r3, [pc, #112]	@ (800078c <MX_GPIO_Init+0xd0>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	4b18      	ldr	r3, [pc, #96]	@ (800078c <MX_GPIO_Init+0xd0>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	4a17      	ldr	r2, [pc, #92]	@ (800078c <MX_GPIO_Init+0xd0>)
 8000730:	f043 0302 	orr.w	r3, r3, #2
 8000734:	6313      	str	r3, [r2, #48]	@ 0x30
 8000736:	4b15      	ldr	r3, [pc, #84]	@ (800078c <MX_GPIO_Init+0xd0>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	f003 0302 	and.w	r3, r3, #2
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_GPIO_Port, LD_Pin, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2120      	movs	r1, #32
 8000746:	4812      	ldr	r0, [pc, #72]	@ (8000790 <MX_GPIO_Init+0xd4>)
 8000748:	f000 fe5a 	bl	8001400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800074c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000752:	2300      	movs	r3, #0
 8000754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	4619      	mov	r1, r3
 8000760:	480c      	ldr	r0, [pc, #48]	@ (8000794 <MX_GPIO_Init+0xd8>)
 8000762:	f000 fcc9 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_Pin;
 8000766:	2320      	movs	r3, #32
 8000768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076a:	2301      	movs	r3, #1
 800076c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	2300      	movs	r3, #0
 8000774:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD_GPIO_Port, &GPIO_InitStruct);
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	4619      	mov	r1, r3
 800077c:	4804      	ldr	r0, [pc, #16]	@ (8000790 <MX_GPIO_Init+0xd4>)
 800077e:	f000 fcbb 	bl	80010f8 <HAL_GPIO_Init>

}
 8000782:	bf00      	nop
 8000784:	3728      	adds	r7, #40	@ 0x28
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800
 8000790:	40020000 	.word	0x40020000
 8000794:	40020800 	.word	0x40020800

08000798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800079c:	f000 faf6 	bl	8000d8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a0:	f000 f80e 	bl	80007c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a4:	f7ff ff8a 	bl	80006bc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007a8:	f000 fa4c 	bl	8000c44 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80007ac:	f000 f964 	bl	8000a78 <MX_TIM1_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007b0:	f003 f92a 	bl	8003a08 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80007b4:	f7ff fecc 	bl	8000550 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80007b8:	f003 f94a 	bl	8003a50 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <main+0x24>

080007c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b094      	sub	sp, #80	@ 0x50
 80007c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c6:	f107 0320 	add.w	r3, r7, #32
 80007ca:	2230      	movs	r2, #48	@ 0x30
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f005 feca 	bl	8006568 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d4:	f107 030c 	add.w	r3, r7, #12
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e4:	2300      	movs	r3, #0
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	4b23      	ldr	r3, [pc, #140]	@ (8000878 <SystemClock_Config+0xb8>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ec:	4a22      	ldr	r2, [pc, #136]	@ (8000878 <SystemClock_Config+0xb8>)
 80007ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80007f4:	4b20      	ldr	r3, [pc, #128]	@ (8000878 <SystemClock_Config+0xb8>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000800:	2300      	movs	r3, #0
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	4b1d      	ldr	r3, [pc, #116]	@ (800087c <SystemClock_Config+0xbc>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800080c:	4a1b      	ldr	r2, [pc, #108]	@ (800087c <SystemClock_Config+0xbc>)
 800080e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000812:	6013      	str	r3, [r2, #0]
 8000814:	4b19      	ldr	r3, [pc, #100]	@ (800087c <SystemClock_Config+0xbc>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000820:	2302      	movs	r3, #2
 8000822:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000824:	2301      	movs	r3, #1
 8000826:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000828:	2310      	movs	r3, #16
 800082a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800082c:	2300      	movs	r3, #0
 800082e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000830:	f107 0320 	add.w	r3, r7, #32
 8000834:	4618      	mov	r0, r3
 8000836:	f000 fdfd 	bl	8001434 <HAL_RCC_OscConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000840:	f000 f830 	bl	80008a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000844:	230f      	movs	r3, #15
 8000846:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000848:	2300      	movs	r3, #0
 800084a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f001 f860 	bl	8001924 <HAL_RCC_ClockConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800086a:	f000 f81b 	bl	80008a4 <Error_Handler>
  }
}
 800086e:	bf00      	nop
 8000870:	3750      	adds	r7, #80	@ 0x50
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800
 800087c:	40007000 	.word	0x40007000

08000880 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a04      	ldr	r2, [pc, #16]	@ (80008a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d101      	bne.n	8000896 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000892:	f000 fa9d 	bl	8000dd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40014400 	.word	0x40014400

080008a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a8:	b672      	cpsid	i
}
 80008aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <Error_Handler+0x8>

080008b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <HAL_MspInit+0x54>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008be:	4a11      	ldr	r2, [pc, #68]	@ (8000904 <HAL_MspInit+0x54>)
 80008c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000904 <HAL_MspInit+0x54>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000904 <HAL_MspInit+0x54>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008da:	4a0a      	ldr	r2, [pc, #40]	@ (8000904 <HAL_MspInit+0x54>)
 80008dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008e2:	4b08      	ldr	r3, [pc, #32]	@ (8000904 <HAL_MspInit+0x54>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	210f      	movs	r1, #15
 80008f2:	f06f 0001 	mvn.w	r0, #1
 80008f6:	f000 fb43 	bl	8000f80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800

08000908 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08c      	sub	sp, #48	@ 0x30
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000910:	2300      	movs	r3, #0
 8000912:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000918:	2300      	movs	r3, #0
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	4b2e      	ldr	r3, [pc, #184]	@ (80009d8 <HAL_InitTick+0xd0>)
 800091e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000920:	4a2d      	ldr	r2, [pc, #180]	@ (80009d8 <HAL_InitTick+0xd0>)
 8000922:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000926:	6453      	str	r3, [r2, #68]	@ 0x44
 8000928:	4b2b      	ldr	r3, [pc, #172]	@ (80009d8 <HAL_InitTick+0xd0>)
 800092a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800092c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000934:	f107 020c 	add.w	r2, r7, #12
 8000938:	f107 0310 	add.w	r3, r7, #16
 800093c:	4611      	mov	r1, r2
 800093e:	4618      	mov	r0, r3
 8000940:	f001 f9d0 	bl	8001ce4 <HAL_RCC_GetClockConfig>
  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000944:	f001 f9ba 	bl	8001cbc <HAL_RCC_GetPCLK2Freq>
 8000948:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800094a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800094c:	4a23      	ldr	r2, [pc, #140]	@ (80009dc <HAL_InitTick+0xd4>)
 800094e:	fba2 2303 	umull	r2, r3, r2, r3
 8000952:	0c9b      	lsrs	r3, r3, #18
 8000954:	3b01      	subs	r3, #1
 8000956:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000958:	4b21      	ldr	r3, [pc, #132]	@ (80009e0 <HAL_InitTick+0xd8>)
 800095a:	4a22      	ldr	r2, [pc, #136]	@ (80009e4 <HAL_InitTick+0xdc>)
 800095c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 800095e:	4b20      	ldr	r3, [pc, #128]	@ (80009e0 <HAL_InitTick+0xd8>)
 8000960:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000964:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000966:	4a1e      	ldr	r2, [pc, #120]	@ (80009e0 <HAL_InitTick+0xd8>)
 8000968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800096a:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 800096c:	4b1c      	ldr	r3, [pc, #112]	@ (80009e0 <HAL_InitTick+0xd8>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000972:	4b1b      	ldr	r3, [pc, #108]	@ (80009e0 <HAL_InitTick+0xd8>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000978:	4b19      	ldr	r3, [pc, #100]	@ (80009e0 <HAL_InitTick+0xd8>)
 800097a:	2200      	movs	r2, #0
 800097c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 800097e:	4818      	ldr	r0, [pc, #96]	@ (80009e0 <HAL_InitTick+0xd8>)
 8000980:	f001 f9e2 	bl	8001d48 <HAL_TIM_Base_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800098a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800098e:	2b00      	cmp	r3, #0
 8000990:	d11b      	bne.n	80009ca <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8000992:	4813      	ldr	r0, [pc, #76]	@ (80009e0 <HAL_InitTick+0xd8>)
 8000994:	f001 fa32 	bl	8001dfc <HAL_TIM_Base_Start_IT>
 8000998:	4603      	mov	r3, r0
 800099a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800099e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d111      	bne.n	80009ca <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009a6:	2019      	movs	r0, #25
 80009a8:	f000 fb06 	bl	8000fb8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2b0f      	cmp	r3, #15
 80009b0:	d808      	bhi.n	80009c4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80009b2:	2200      	movs	r2, #0
 80009b4:	6879      	ldr	r1, [r7, #4]
 80009b6:	2019      	movs	r0, #25
 80009b8:	f000 fae2 	bl	8000f80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009bc:	4a0a      	ldr	r2, [pc, #40]	@ (80009e8 <HAL_InitTick+0xe0>)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6013      	str	r3, [r2, #0]
 80009c2:	e002      	b.n	80009ca <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80009c4:	2301      	movs	r3, #1
 80009c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3730      	adds	r7, #48	@ 0x30
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40023800 	.word	0x40023800
 80009dc:	431bde83 	.word	0x431bde83
 80009e0:	20000098 	.word	0x20000098
 80009e4:	40014400 	.word	0x40014400
 80009e8:	20000004 	.word	0x20000004

080009ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <NMI_Handler+0x4>

080009f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <HardFault_Handler+0x4>

080009fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <MemManage_Handler+0x4>

08000a04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <BusFault_Handler+0x4>

08000a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <UsageFault_Handler+0x4>

08000a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
	...

08000a24 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a28:	4803      	ldr	r0, [pc, #12]	@ (8000a38 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8000a2a:	f001 fb49 	bl	80020c0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8000a2e:	4803      	ldr	r0, [pc, #12]	@ (8000a3c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8000a30:	f001 fb46 	bl	80020c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	200000e0 	.word	0x200000e0
 8000a3c:	20000098 	.word	0x20000098

08000a40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a44:	4802      	ldr	r0, [pc, #8]	@ (8000a50 <USART1_IRQHandler+0x10>)
 8000a46:	f002 f89d 	bl	8002b84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000128 	.word	0x20000128

08000a54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a58:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <SystemInit+0x20>)
 8000a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a5e:	4a05      	ldr	r2, [pc, #20]	@ (8000a74 <SystemInit+0x20>)
 8000a60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b092      	sub	sp, #72	@ 0x48
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a7e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
 8000a98:	615a      	str	r2, [r3, #20]
 8000a9a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	2220      	movs	r2, #32
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f005 fd60 	bl	8006568 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000aa8:	4b33      	ldr	r3, [pc, #204]	@ (8000b78 <MX_TIM1_Init+0x100>)
 8000aaa:	4a34      	ldr	r2, [pc, #208]	@ (8000b7c <MX_TIM1_Init+0x104>)
 8000aac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 8000aae:	4b32      	ldr	r3, [pc, #200]	@ (8000b78 <MX_TIM1_Init+0x100>)
 8000ab0:	2203      	movs	r2, #3
 8000ab2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab4:	4b30      	ldr	r3, [pc, #192]	@ (8000b78 <MX_TIM1_Init+0x100>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4096-1;
 8000aba:	4b2f      	ldr	r3, [pc, #188]	@ (8000b78 <MX_TIM1_Init+0x100>)
 8000abc:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000ac0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac2:	4b2d      	ldr	r3, [pc, #180]	@ (8000b78 <MX_TIM1_Init+0x100>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ac8:	4b2b      	ldr	r3, [pc, #172]	@ (8000b78 <MX_TIM1_Init+0x100>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ace:	4b2a      	ldr	r3, [pc, #168]	@ (8000b78 <MX_TIM1_Init+0x100>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ad4:	4828      	ldr	r0, [pc, #160]	@ (8000b78 <MX_TIM1_Init+0x100>)
 8000ad6:	f001 f9f3 	bl	8001ec0 <HAL_TIM_PWM_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000ae0:	f7ff fee0 	bl	80008a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000af0:	4619      	mov	r1, r3
 8000af2:	4821      	ldr	r0, [pc, #132]	@ (8000b78 <MX_TIM1_Init+0x100>)
 8000af4:	f001 fefc 	bl	80028f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000afe:	f7ff fed1 	bl	80008a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b02:	2360      	movs	r3, #96	@ 0x60
 8000b04:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b12:	2300      	movs	r3, #0
 8000b14:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b16:	2300      	movs	r3, #0
 8000b18:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b22:	2200      	movs	r2, #0
 8000b24:	4619      	mov	r1, r3
 8000b26:	4814      	ldr	r0, [pc, #80]	@ (8000b78 <MX_TIM1_Init+0x100>)
 8000b28:	f001 fbba 	bl	80022a0 <HAL_TIM_PWM_ConfigChannel>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000b32:	f7ff feb7 	bl	80008a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b4e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	4619      	mov	r1, r3
 8000b58:	4807      	ldr	r0, [pc, #28]	@ (8000b78 <MX_TIM1_Init+0x100>)
 8000b5a:	f001 ff37 	bl	80029cc <HAL_TIMEx_ConfigBreakDeadTime>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000b64:	f7ff fe9e 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b68:	4803      	ldr	r0, [pc, #12]	@ (8000b78 <MX_TIM1_Init+0x100>)
 8000b6a:	f000 f831 	bl	8000bd0 <HAL_TIM_MspPostInit>

}
 8000b6e:	bf00      	nop
 8000b70:	3748      	adds	r7, #72	@ 0x48
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	200000e0 	.word	0x200000e0
 8000b7c:	40010000 	.word	0x40010000

08000b80 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a0e      	ldr	r2, [pc, #56]	@ (8000bc8 <HAL_TIM_PWM_MspInit+0x48>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d115      	bne.n	8000bbe <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	4b0d      	ldr	r3, [pc, #52]	@ (8000bcc <HAL_TIM_PWM_MspInit+0x4c>)
 8000b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b9a:	4a0c      	ldr	r2, [pc, #48]	@ (8000bcc <HAL_TIM_PWM_MspInit+0x4c>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bcc <HAL_TIM_PWM_MspInit+0x4c>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2105      	movs	r1, #5
 8000bb2:	2019      	movs	r0, #25
 8000bb4:	f000 f9e4 	bl	8000f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000bb8:	2019      	movs	r0, #25
 8000bba:	f000 f9fd 	bl	8000fb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40010000 	.word	0x40010000
 8000bcc:	40023800 	.word	0x40023800

08000bd0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b088      	sub	sp, #32
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 030c 	add.w	r3, r7, #12
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a12      	ldr	r2, [pc, #72]	@ (8000c38 <HAL_TIM_MspPostInit+0x68>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d11e      	bne.n	8000c30 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	4b11      	ldr	r3, [pc, #68]	@ (8000c3c <HAL_TIM_MspPostInit+0x6c>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	4a10      	ldr	r2, [pc, #64]	@ (8000c3c <HAL_TIM_MspPostInit+0x6c>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c02:	4b0e      	ldr	r3, [pc, #56]	@ (8000c3c <HAL_TIM_MspPostInit+0x6c>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c12:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c20:	2301      	movs	r3, #1
 8000c22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	f107 030c 	add.w	r3, r7, #12
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4805      	ldr	r0, [pc, #20]	@ (8000c40 <HAL_TIM_MspPostInit+0x70>)
 8000c2c:	f000 fa64 	bl	80010f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c30:	bf00      	nop
 8000c32:	3720      	adds	r7, #32
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40010000 	.word	0x40010000
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020000 	.word	0x40020000

08000c44 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c48:	4b11      	ldr	r3, [pc, #68]	@ (8000c90 <MX_USART1_UART_Init+0x4c>)
 8000c4a:	4a12      	ldr	r2, [pc, #72]	@ (8000c94 <MX_USART1_UART_Init+0x50>)
 8000c4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000c4e:	4b10      	ldr	r3, [pc, #64]	@ (8000c90 <MX_USART1_UART_Init+0x4c>)
 8000c50:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000c54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c56:	4b0e      	ldr	r3, [pc, #56]	@ (8000c90 <MX_USART1_UART_Init+0x4c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c90 <MX_USART1_UART_Init+0x4c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c62:	4b0b      	ldr	r3, [pc, #44]	@ (8000c90 <MX_USART1_UART_Init+0x4c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c68:	4b09      	ldr	r3, [pc, #36]	@ (8000c90 <MX_USART1_UART_Init+0x4c>)
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6e:	4b08      	ldr	r3, [pc, #32]	@ (8000c90 <MX_USART1_UART_Init+0x4c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c74:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <MX_USART1_UART_Init+0x4c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c7a:	4805      	ldr	r0, [pc, #20]	@ (8000c90 <MX_USART1_UART_Init+0x4c>)
 8000c7c:	f001 ff0c 	bl	8002a98 <HAL_UART_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c86:	f7ff fe0d 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000128 	.word	0x20000128
 8000c94:	40011000 	.word	0x40011000

08000c98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08a      	sub	sp, #40	@ 0x28
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a1d      	ldr	r2, [pc, #116]	@ (8000d2c <HAL_UART_MspInit+0x94>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d134      	bne.n	8000d24 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000d30 <HAL_UART_MspInit+0x98>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc2:	4a1b      	ldr	r2, [pc, #108]	@ (8000d30 <HAL_UART_MspInit+0x98>)
 8000cc4:	f043 0310 	orr.w	r3, r3, #16
 8000cc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cca:	4b19      	ldr	r3, [pc, #100]	@ (8000d30 <HAL_UART_MspInit+0x98>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cce:	f003 0310 	and.w	r3, r3, #16
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <HAL_UART_MspInit+0x98>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	4a14      	ldr	r2, [pc, #80]	@ (8000d30 <HAL_UART_MspInit+0x98>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce6:	4b12      	ldr	r3, [pc, #72]	@ (8000d30 <HAL_UART_MspInit+0x98>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cf2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d00:	2303      	movs	r3, #3
 8000d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d04:	2307      	movs	r3, #7
 8000d06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4809      	ldr	r0, [pc, #36]	@ (8000d34 <HAL_UART_MspInit+0x9c>)
 8000d10:	f000 f9f2 	bl	80010f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2105      	movs	r1, #5
 8000d18:	2025      	movs	r0, #37	@ 0x25
 8000d1a:	f000 f931 	bl	8000f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d1e:	2025      	movs	r0, #37	@ 0x25
 8000d20:	f000 f94a 	bl	8000fb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d24:	bf00      	nop
 8000d26:	3728      	adds	r7, #40	@ 0x28
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40011000 	.word	0x40011000
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020000 	.word	0x40020000

08000d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d3c:	f7ff fe8a 	bl	8000a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d40:	480c      	ldr	r0, [pc, #48]	@ (8000d74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d42:	490d      	ldr	r1, [pc, #52]	@ (8000d78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d44:	4a0d      	ldr	r2, [pc, #52]	@ (8000d7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d48:	e002      	b.n	8000d50 <LoopCopyDataInit>

08000d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4e:	3304      	adds	r3, #4

08000d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d54:	d3f9      	bcc.n	8000d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d56:	4a0a      	ldr	r2, [pc, #40]	@ (8000d80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d58:	4c0a      	ldr	r4, [pc, #40]	@ (8000d84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d5c:	e001      	b.n	8000d62 <LoopFillZerobss>

08000d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d60:	3204      	adds	r2, #4

08000d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d64:	d3fb      	bcc.n	8000d5e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000d66:	f005 fc5d 	bl	8006624 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d6a:	f7ff fd15 	bl	8000798 <main>
  bx  lr    
 8000d6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d70:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d78:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000d7c:	0800684c 	.word	0x0800684c
  ldr r2, =_sbss
 8000d80:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000d84:	20004c9c 	.word	0x20004c9c

08000d88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC_IRQHandler>
	...

08000d8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d90:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <HAL_Init+0x40>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0d      	ldr	r2, [pc, #52]	@ (8000dcc <HAL_Init+0x40>)
 8000d96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dcc <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0a      	ldr	r2, [pc, #40]	@ (8000dcc <HAL_Init+0x40>)
 8000da2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da8:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <HAL_Init+0x40>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a07      	ldr	r2, [pc, #28]	@ (8000dcc <HAL_Init+0x40>)
 8000dae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000db2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db4:	2003      	movs	r0, #3
 8000db6:	f000 f8d8 	bl	8000f6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dba:	2005      	movs	r0, #5
 8000dbc:	f7ff fda4 	bl	8000908 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc0:	f7ff fd76 	bl	80008b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40023c00 	.word	0x40023c00

08000dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <HAL_IncTick+0x20>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <HAL_IncTick+0x24>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4413      	add	r3, r2
 8000de0:	4a04      	ldr	r2, [pc, #16]	@ (8000df4 <HAL_IncTick+0x24>)
 8000de2:	6013      	str	r3, [r2, #0]
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20000008 	.word	0x20000008
 8000df4:	20000170 	.word	0x20000170

08000df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dfc:	4b03      	ldr	r3, [pc, #12]	@ (8000e0c <HAL_GetTick+0x14>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	20000170 	.word	0x20000170

08000e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e20:	4b0c      	ldr	r3, [pc, #48]	@ (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e42:	4a04      	ldr	r2, [pc, #16]	@ (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	60d3      	str	r3, [r2, #12]
}
 8000e48:	bf00      	nop
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e5c:	4b04      	ldr	r3, [pc, #16]	@ (8000e70 <__NVIC_GetPriorityGrouping+0x18>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	0a1b      	lsrs	r3, r3, #8
 8000e62:	f003 0307 	and.w	r3, r3, #7
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	db0b      	blt.n	8000e9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	f003 021f 	and.w	r2, r3, #31
 8000e8c:	4907      	ldr	r1, [pc, #28]	@ (8000eac <__NVIC_EnableIRQ+0x38>)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	095b      	lsrs	r3, r3, #5
 8000e94:	2001      	movs	r0, #1
 8000e96:	fa00 f202 	lsl.w	r2, r0, r2
 8000e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000e100 	.word	0xe000e100

08000eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	6039      	str	r1, [r7, #0]
 8000eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	db0a      	blt.n	8000eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	490c      	ldr	r1, [pc, #48]	@ (8000efc <__NVIC_SetPriority+0x4c>)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	0112      	lsls	r2, r2, #4
 8000ed0:	b2d2      	uxtb	r2, r2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed8:	e00a      	b.n	8000ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4908      	ldr	r1, [pc, #32]	@ (8000f00 <__NVIC_SetPriority+0x50>)
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	f003 030f 	and.w	r3, r3, #15
 8000ee6:	3b04      	subs	r3, #4
 8000ee8:	0112      	lsls	r2, r2, #4
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	440b      	add	r3, r1
 8000eee:	761a      	strb	r2, [r3, #24]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000e100 	.word	0xe000e100
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	@ 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f1c3 0307 	rsb	r3, r3, #7
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	bf28      	it	cs
 8000f22:	2304      	movcs	r3, #4
 8000f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3304      	adds	r3, #4
 8000f2a:	2b06      	cmp	r3, #6
 8000f2c:	d902      	bls.n	8000f34 <NVIC_EncodePriority+0x30>
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3b03      	subs	r3, #3
 8000f32:	e000      	b.n	8000f36 <NVIC_EncodePriority+0x32>
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	f04f 32ff 	mov.w	r2, #4294967295
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43da      	mvns	r2, r3
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	401a      	ands	r2, r3
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	fa01 f303 	lsl.w	r3, r1, r3
 8000f56:	43d9      	mvns	r1, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	4313      	orrs	r3, r2
         );
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3724      	adds	r7, #36	@ 0x24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff ff4c 	bl	8000e10 <__NVIC_SetPriorityGrouping>
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
 8000f8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f92:	f7ff ff61 	bl	8000e58 <__NVIC_GetPriorityGrouping>
 8000f96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	68b9      	ldr	r1, [r7, #8]
 8000f9c:	6978      	ldr	r0, [r7, #20]
 8000f9e:	f7ff ffb1 	bl	8000f04 <NVIC_EncodePriority>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa8:	4611      	mov	r1, r2
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff ff80 	bl	8000eb0 <__NVIC_SetPriority>
}
 8000fb0:	bf00      	nop
 8000fb2:	3718      	adds	r7, #24
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff ff54 	bl	8000e74 <__NVIC_EnableIRQ>
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fe0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fe2:	f7ff ff09 	bl	8000df8 <HAL_GetTick>
 8000fe6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d008      	beq.n	8001006 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2280      	movs	r2, #128	@ 0x80
 8000ff8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e052      	b.n	80010ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f022 0216 	bic.w	r2, r2, #22
 8001014:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	695a      	ldr	r2, [r3, #20]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001024:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102a:	2b00      	cmp	r3, #0
 800102c:	d103      	bne.n	8001036 <HAL_DMA_Abort+0x62>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001032:	2b00      	cmp	r3, #0
 8001034:	d007      	beq.n	8001046 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f022 0208 	bic.w	r2, r2, #8
 8001044:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f022 0201 	bic.w	r2, r2, #1
 8001054:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001056:	e013      	b.n	8001080 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001058:	f7ff fece 	bl	8000df8 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b05      	cmp	r3, #5
 8001064:	d90c      	bls.n	8001080 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2220      	movs	r2, #32
 800106a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2203      	movs	r2, #3
 8001070:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800107c:	2303      	movs	r3, #3
 800107e:	e015      	b.n	80010ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1e4      	bne.n	8001058 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001092:	223f      	movs	r2, #63	@ 0x3f
 8001094:	409a      	lsls	r2, r3
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2201      	movs	r2, #1
 800109e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d004      	beq.n	80010d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2280      	movs	r2, #128	@ 0x80
 80010cc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e00c      	b.n	80010ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2205      	movs	r2, #5
 80010d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f022 0201 	bic.w	r2, r2, #1
 80010e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b089      	sub	sp, #36	@ 0x24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
 8001112:	e159      	b.n	80013c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001114:	2201      	movs	r2, #1
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	429a      	cmp	r2, r3
 800112e:	f040 8148 	bne.w	80013c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f003 0303 	and.w	r3, r3, #3
 800113a:	2b01      	cmp	r3, #1
 800113c:	d005      	beq.n	800114a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001146:	2b02      	cmp	r3, #2
 8001148:	d130      	bne.n	80011ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	2203      	movs	r2, #3
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	68da      	ldr	r2, [r3, #12]
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001180:	2201      	movs	r2, #1
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	091b      	lsrs	r3, r3, #4
 8001196:	f003 0201 	and.w	r2, r3, #1
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	2b03      	cmp	r3, #3
 80011b6:	d017      	beq.n	80011e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	2203      	movs	r2, #3
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d123      	bne.n	800123c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	08da      	lsrs	r2, r3, #3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3208      	adds	r2, #8
 80011fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	f003 0307 	and.w	r3, r3, #7
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	220f      	movs	r2, #15
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	691a      	ldr	r2, [r3, #16]
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	08da      	lsrs	r2, r3, #3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3208      	adds	r2, #8
 8001236:	69b9      	ldr	r1, [r7, #24]
 8001238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	2203      	movs	r2, #3
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0203 	and.w	r2, r3, #3
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001278:	2b00      	cmp	r3, #0
 800127a:	f000 80a2 	beq.w	80013c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b57      	ldr	r3, [pc, #348]	@ (80013e0 <HAL_GPIO_Init+0x2e8>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001286:	4a56      	ldr	r2, [pc, #344]	@ (80013e0 <HAL_GPIO_Init+0x2e8>)
 8001288:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800128c:	6453      	str	r3, [r2, #68]	@ 0x44
 800128e:	4b54      	ldr	r3, [pc, #336]	@ (80013e0 <HAL_GPIO_Init+0x2e8>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001292:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800129a:	4a52      	ldr	r2, [pc, #328]	@ (80013e4 <HAL_GPIO_Init+0x2ec>)
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	089b      	lsrs	r3, r3, #2
 80012a0:	3302      	adds	r3, #2
 80012a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	220f      	movs	r2, #15
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a49      	ldr	r2, [pc, #292]	@ (80013e8 <HAL_GPIO_Init+0x2f0>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d019      	beq.n	80012fa <HAL_GPIO_Init+0x202>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a48      	ldr	r2, [pc, #288]	@ (80013ec <HAL_GPIO_Init+0x2f4>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d013      	beq.n	80012f6 <HAL_GPIO_Init+0x1fe>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a47      	ldr	r2, [pc, #284]	@ (80013f0 <HAL_GPIO_Init+0x2f8>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d00d      	beq.n	80012f2 <HAL_GPIO_Init+0x1fa>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a46      	ldr	r2, [pc, #280]	@ (80013f4 <HAL_GPIO_Init+0x2fc>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d007      	beq.n	80012ee <HAL_GPIO_Init+0x1f6>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a45      	ldr	r2, [pc, #276]	@ (80013f8 <HAL_GPIO_Init+0x300>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d101      	bne.n	80012ea <HAL_GPIO_Init+0x1f2>
 80012e6:	2304      	movs	r3, #4
 80012e8:	e008      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012ea:	2307      	movs	r3, #7
 80012ec:	e006      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012ee:	2303      	movs	r3, #3
 80012f0:	e004      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012f2:	2302      	movs	r3, #2
 80012f4:	e002      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012f6:	2301      	movs	r3, #1
 80012f8:	e000      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012fa:	2300      	movs	r3, #0
 80012fc:	69fa      	ldr	r2, [r7, #28]
 80012fe:	f002 0203 	and.w	r2, r2, #3
 8001302:	0092      	lsls	r2, r2, #2
 8001304:	4093      	lsls	r3, r2
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800130c:	4935      	ldr	r1, [pc, #212]	@ (80013e4 <HAL_GPIO_Init+0x2ec>)
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	089b      	lsrs	r3, r3, #2
 8001312:	3302      	adds	r3, #2
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800131a:	4b38      	ldr	r3, [pc, #224]	@ (80013fc <HAL_GPIO_Init+0x304>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800133e:	4a2f      	ldr	r2, [pc, #188]	@ (80013fc <HAL_GPIO_Init+0x304>)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001344:	4b2d      	ldr	r3, [pc, #180]	@ (80013fc <HAL_GPIO_Init+0x304>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001368:	4a24      	ldr	r2, [pc, #144]	@ (80013fc <HAL_GPIO_Init+0x304>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800136e:	4b23      	ldr	r3, [pc, #140]	@ (80013fc <HAL_GPIO_Init+0x304>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4313      	orrs	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001392:	4a1a      	ldr	r2, [pc, #104]	@ (80013fc <HAL_GPIO_Init+0x304>)
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001398:	4b18      	ldr	r3, [pc, #96]	@ (80013fc <HAL_GPIO_Init+0x304>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013bc:	4a0f      	ldr	r2, [pc, #60]	@ (80013fc <HAL_GPIO_Init+0x304>)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3301      	adds	r3, #1
 80013c6:	61fb      	str	r3, [r7, #28]
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	2b0f      	cmp	r3, #15
 80013cc:	f67f aea2 	bls.w	8001114 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	3724      	adds	r7, #36	@ 0x24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40013800 	.word	0x40013800
 80013e8:	40020000 	.word	0x40020000
 80013ec:	40020400 	.word	0x40020400
 80013f0:	40020800 	.word	0x40020800
 80013f4:	40020c00 	.word	0x40020c00
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40013c00 	.word	0x40013c00

08001400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	807b      	strh	r3, [r7, #2]
 800140c:	4613      	mov	r3, r2
 800140e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001410:	787b      	ldrb	r3, [r7, #1]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001416:	887a      	ldrh	r2, [r7, #2]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800141c:	e003      	b.n	8001426 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800141e:	887b      	ldrh	r3, [r7, #2]
 8001420:	041a      	lsls	r2, r3, #16
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	619a      	str	r2, [r3, #24]
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e267      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b00      	cmp	r3, #0
 8001450:	d075      	beq.n	800153e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001452:	4b88      	ldr	r3, [pc, #544]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 030c 	and.w	r3, r3, #12
 800145a:	2b04      	cmp	r3, #4
 800145c:	d00c      	beq.n	8001478 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800145e:	4b85      	ldr	r3, [pc, #532]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001466:	2b08      	cmp	r3, #8
 8001468:	d112      	bne.n	8001490 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800146a:	4b82      	ldr	r3, [pc, #520]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001472:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001476:	d10b      	bne.n	8001490 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001478:	4b7e      	ldr	r3, [pc, #504]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d05b      	beq.n	800153c <HAL_RCC_OscConfig+0x108>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d157      	bne.n	800153c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e242      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001498:	d106      	bne.n	80014a8 <HAL_RCC_OscConfig+0x74>
 800149a:	4b76      	ldr	r3, [pc, #472]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a75      	ldr	r2, [pc, #468]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 80014a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	e01d      	b.n	80014e4 <HAL_RCC_OscConfig+0xb0>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014b0:	d10c      	bne.n	80014cc <HAL_RCC_OscConfig+0x98>
 80014b2:	4b70      	ldr	r3, [pc, #448]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a6f      	ldr	r2, [pc, #444]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 80014b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	4b6d      	ldr	r3, [pc, #436]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a6c      	ldr	r2, [pc, #432]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 80014c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	e00b      	b.n	80014e4 <HAL_RCC_OscConfig+0xb0>
 80014cc:	4b69      	ldr	r3, [pc, #420]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a68      	ldr	r2, [pc, #416]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 80014d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	4b66      	ldr	r3, [pc, #408]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a65      	ldr	r2, [pc, #404]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 80014de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d013      	beq.n	8001514 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ec:	f7ff fc84 	bl	8000df8 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014f4:	f7ff fc80 	bl	8000df8 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b64      	cmp	r3, #100	@ 0x64
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e207      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001506:	4b5b      	ldr	r3, [pc, #364]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0f0      	beq.n	80014f4 <HAL_RCC_OscConfig+0xc0>
 8001512:	e014      	b.n	800153e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001514:	f7ff fc70 	bl	8000df8 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800151c:	f7ff fc6c 	bl	8000df8 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b64      	cmp	r3, #100	@ 0x64
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e1f3      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800152e:	4b51      	ldr	r3, [pc, #324]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f0      	bne.n	800151c <HAL_RCC_OscConfig+0xe8>
 800153a:	e000      	b.n	800153e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800153c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d063      	beq.n	8001612 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800154a:	4b4a      	ldr	r3, [pc, #296]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 030c 	and.w	r3, r3, #12
 8001552:	2b00      	cmp	r3, #0
 8001554:	d00b      	beq.n	800156e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001556:	4b47      	ldr	r3, [pc, #284]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800155e:	2b08      	cmp	r3, #8
 8001560:	d11c      	bne.n	800159c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001562:	4b44      	ldr	r3, [pc, #272]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d116      	bne.n	800159c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156e:	4b41      	ldr	r3, [pc, #260]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d005      	beq.n	8001586 <HAL_RCC_OscConfig+0x152>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d001      	beq.n	8001586 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e1c7      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001586:	4b3b      	ldr	r3, [pc, #236]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	4937      	ldr	r1, [pc, #220]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 8001596:	4313      	orrs	r3, r2
 8001598:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159a:	e03a      	b.n	8001612 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d020      	beq.n	80015e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015a4:	4b34      	ldr	r3, [pc, #208]	@ (8001678 <HAL_RCC_OscConfig+0x244>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015aa:	f7ff fc25 	bl	8000df8 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015b2:	f7ff fc21 	bl	8000df8 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e1a8      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0f0      	beq.n	80015b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d0:	4b28      	ldr	r3, [pc, #160]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	4925      	ldr	r1, [pc, #148]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	600b      	str	r3, [r1, #0]
 80015e4:	e015      	b.n	8001612 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015e6:	4b24      	ldr	r3, [pc, #144]	@ (8001678 <HAL_RCC_OscConfig+0x244>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ec:	f7ff fc04 	bl	8000df8 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015f4:	f7ff fc00 	bl	8000df8 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e187      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001606:	4b1b      	ldr	r3, [pc, #108]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	2b00      	cmp	r3, #0
 800161c:	d036      	beq.n	800168c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d016      	beq.n	8001654 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001626:	4b15      	ldr	r3, [pc, #84]	@ (800167c <HAL_RCC_OscConfig+0x248>)
 8001628:	2201      	movs	r2, #1
 800162a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800162c:	f7ff fbe4 	bl	8000df8 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001634:	f7ff fbe0 	bl	8000df8 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e167      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001646:	4b0b      	ldr	r3, [pc, #44]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 8001648:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0f0      	beq.n	8001634 <HAL_RCC_OscConfig+0x200>
 8001652:	e01b      	b.n	800168c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001654:	4b09      	ldr	r3, [pc, #36]	@ (800167c <HAL_RCC_OscConfig+0x248>)
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165a:	f7ff fbcd 	bl	8000df8 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001660:	e00e      	b.n	8001680 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001662:	f7ff fbc9 	bl	8000df8 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d907      	bls.n	8001680 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e150      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
 8001674:	40023800 	.word	0x40023800
 8001678:	42470000 	.word	0x42470000
 800167c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001680:	4b88      	ldr	r3, [pc, #544]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001682:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1ea      	bne.n	8001662 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 8097 	beq.w	80017c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800169a:	2300      	movs	r3, #0
 800169c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800169e:	4b81      	ldr	r3, [pc, #516]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d10f      	bne.n	80016ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	4b7d      	ldr	r3, [pc, #500]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b2:	4a7c      	ldr	r2, [pc, #496]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 80016b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ba:	4b7a      	ldr	r3, [pc, #488]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016c6:	2301      	movs	r3, #1
 80016c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ca:	4b77      	ldr	r3, [pc, #476]	@ (80018a8 <HAL_RCC_OscConfig+0x474>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d118      	bne.n	8001708 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016d6:	4b74      	ldr	r3, [pc, #464]	@ (80018a8 <HAL_RCC_OscConfig+0x474>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a73      	ldr	r2, [pc, #460]	@ (80018a8 <HAL_RCC_OscConfig+0x474>)
 80016dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016e2:	f7ff fb89 	bl	8000df8 <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ea:	f7ff fb85 	bl	8000df8 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e10c      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fc:	4b6a      	ldr	r3, [pc, #424]	@ (80018a8 <HAL_RCC_OscConfig+0x474>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0f0      	beq.n	80016ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d106      	bne.n	800171e <HAL_RCC_OscConfig+0x2ea>
 8001710:	4b64      	ldr	r3, [pc, #400]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001714:	4a63      	ldr	r2, [pc, #396]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	6713      	str	r3, [r2, #112]	@ 0x70
 800171c:	e01c      	b.n	8001758 <HAL_RCC_OscConfig+0x324>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	2b05      	cmp	r3, #5
 8001724:	d10c      	bne.n	8001740 <HAL_RCC_OscConfig+0x30c>
 8001726:	4b5f      	ldr	r3, [pc, #380]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800172a:	4a5e      	ldr	r2, [pc, #376]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 800172c:	f043 0304 	orr.w	r3, r3, #4
 8001730:	6713      	str	r3, [r2, #112]	@ 0x70
 8001732:	4b5c      	ldr	r3, [pc, #368]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001736:	4a5b      	ldr	r2, [pc, #364]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6713      	str	r3, [r2, #112]	@ 0x70
 800173e:	e00b      	b.n	8001758 <HAL_RCC_OscConfig+0x324>
 8001740:	4b58      	ldr	r3, [pc, #352]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001744:	4a57      	ldr	r2, [pc, #348]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001746:	f023 0301 	bic.w	r3, r3, #1
 800174a:	6713      	str	r3, [r2, #112]	@ 0x70
 800174c:	4b55      	ldr	r3, [pc, #340]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 800174e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001750:	4a54      	ldr	r2, [pc, #336]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001752:	f023 0304 	bic.w	r3, r3, #4
 8001756:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d015      	beq.n	800178c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001760:	f7ff fb4a 	bl	8000df8 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001766:	e00a      	b.n	800177e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001768:	f7ff fb46 	bl	8000df8 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001776:	4293      	cmp	r3, r2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e0cb      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800177e:	4b49      	ldr	r3, [pc, #292]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0ee      	beq.n	8001768 <HAL_RCC_OscConfig+0x334>
 800178a:	e014      	b.n	80017b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178c:	f7ff fb34 	bl	8000df8 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001792:	e00a      	b.n	80017aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001794:	f7ff fb30 	bl	8000df8 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e0b5      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017aa:	4b3e      	ldr	r3, [pc, #248]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 80017ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1ee      	bne.n	8001794 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017b6:	7dfb      	ldrb	r3, [r7, #23]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d105      	bne.n	80017c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017bc:	4b39      	ldr	r3, [pc, #228]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 80017be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c0:	4a38      	ldr	r2, [pc, #224]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 80017c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 80a1 	beq.w	8001914 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017d2:	4b34      	ldr	r3, [pc, #208]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 030c 	and.w	r3, r3, #12
 80017da:	2b08      	cmp	r3, #8
 80017dc:	d05c      	beq.n	8001898 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d141      	bne.n	800186a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e6:	4b31      	ldr	r3, [pc, #196]	@ (80018ac <HAL_RCC_OscConfig+0x478>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ec:	f7ff fb04 	bl	8000df8 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f4:	f7ff fb00 	bl	8000df8 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e087      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001806:	4b27      	ldr	r3, [pc, #156]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69da      	ldr	r2, [r3, #28]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001820:	019b      	lsls	r3, r3, #6
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001828:	085b      	lsrs	r3, r3, #1
 800182a:	3b01      	subs	r3, #1
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001834:	061b      	lsls	r3, r3, #24
 8001836:	491b      	ldr	r1, [pc, #108]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001838:	4313      	orrs	r3, r2
 800183a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800183c:	4b1b      	ldr	r3, [pc, #108]	@ (80018ac <HAL_RCC_OscConfig+0x478>)
 800183e:	2201      	movs	r2, #1
 8001840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001842:	f7ff fad9 	bl	8000df8 <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800184a:	f7ff fad5 	bl	8000df8 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e05c      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800185c:	4b11      	ldr	r3, [pc, #68]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f0      	beq.n	800184a <HAL_RCC_OscConfig+0x416>
 8001868:	e054      	b.n	8001914 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186a:	4b10      	ldr	r3, [pc, #64]	@ (80018ac <HAL_RCC_OscConfig+0x478>)
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7ff fac2 	bl	8000df8 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001878:	f7ff fabe 	bl	8000df8 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e045      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188a:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x444>
 8001896:	e03d      	b.n	8001914 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d107      	bne.n	80018b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e038      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40007000 	.word	0x40007000
 80018ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001920 <HAL_RCC_OscConfig+0x4ec>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d028      	beq.n	8001910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d121      	bne.n	8001910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d11a      	bne.n	8001910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80018e0:	4013      	ands	r3, r2
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d111      	bne.n	8001910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f6:	085b      	lsrs	r3, r3, #1
 80018f8:	3b01      	subs	r3, #1
 80018fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d107      	bne.n	8001910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800190a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800190c:	429a      	cmp	r2, r3
 800190e:	d001      	beq.n	8001914 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e000      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800

08001924 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e0cc      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001938:	4b68      	ldr	r3, [pc, #416]	@ (8001adc <HAL_RCC_ClockConfig+0x1b8>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	429a      	cmp	r2, r3
 8001944:	d90c      	bls.n	8001960 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001946:	4b65      	ldr	r3, [pc, #404]	@ (8001adc <HAL_RCC_ClockConfig+0x1b8>)
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800194e:	4b63      	ldr	r3, [pc, #396]	@ (8001adc <HAL_RCC_ClockConfig+0x1b8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	d001      	beq.n	8001960 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e0b8      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d020      	beq.n	80019ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	d005      	beq.n	8001984 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001978:	4b59      	ldr	r3, [pc, #356]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	4a58      	ldr	r2, [pc, #352]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001982:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0308 	and.w	r3, r3, #8
 800198c:	2b00      	cmp	r3, #0
 800198e:	d005      	beq.n	800199c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001990:	4b53      	ldr	r3, [pc, #332]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	4a52      	ldr	r2, [pc, #328]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800199a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800199c:	4b50      	ldr	r3, [pc, #320]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	494d      	ldr	r1, [pc, #308]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d044      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d107      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c2:	4b47      	ldr	r3, [pc, #284]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d119      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e07f      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d003      	beq.n	80019e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019de:	2b03      	cmp	r3, #3
 80019e0:	d107      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e2:	4b3f      	ldr	r3, [pc, #252]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d109      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e06f      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e067      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a02:	4b37      	ldr	r3, [pc, #220]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f023 0203 	bic.w	r2, r3, #3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	4934      	ldr	r1, [pc, #208]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a14:	f7ff f9f0 	bl	8000df8 <HAL_GetTick>
 8001a18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1a:	e00a      	b.n	8001a32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a1c:	f7ff f9ec 	bl	8000df8 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e04f      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a32:	4b2b      	ldr	r3, [pc, #172]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 020c 	and.w	r2, r3, #12
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d1eb      	bne.n	8001a1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a44:	4b25      	ldr	r3, [pc, #148]	@ (8001adc <HAL_RCC_ClockConfig+0x1b8>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d20c      	bcs.n	8001a6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a52:	4b22      	ldr	r3, [pc, #136]	@ (8001adc <HAL_RCC_ClockConfig+0x1b8>)
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5a:	4b20      	ldr	r3, [pc, #128]	@ (8001adc <HAL_RCC_ClockConfig+0x1b8>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d001      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e032      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d008      	beq.n	8001a8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a78:	4b19      	ldr	r3, [pc, #100]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	4916      	ldr	r1, [pc, #88]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d009      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a96:	4b12      	ldr	r3, [pc, #72]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	490e      	ldr	r1, [pc, #56]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001aaa:	f000 f821 	bl	8001af0 <HAL_RCC_GetSysClockFreq>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	091b      	lsrs	r3, r3, #4
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	490a      	ldr	r1, [pc, #40]	@ (8001ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8001abc:	5ccb      	ldrb	r3, [r1, r3]
 8001abe:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac2:	4a09      	ldr	r2, [pc, #36]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ac6:	4b09      	ldr	r3, [pc, #36]	@ (8001aec <HAL_RCC_ClockConfig+0x1c8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe ff1c 	bl	8000908 <HAL_InitTick>

  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40023c00 	.word	0x40023c00
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	08006824 	.word	0x08006824
 8001ae8:	20000000 	.word	0x20000000
 8001aec:	20000004 	.word	0x20000004

08001af0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001af4:	b090      	sub	sp, #64	@ 0x40
 8001af6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	637b      	str	r3, [r7, #52]	@ 0x34
 8001afc:	2300      	movs	r3, #0
 8001afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b00:	2300      	movs	r3, #0
 8001b02:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b08:	4b59      	ldr	r3, [pc, #356]	@ (8001c70 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 030c 	and.w	r3, r3, #12
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	d00d      	beq.n	8001b30 <HAL_RCC_GetSysClockFreq+0x40>
 8001b14:	2b08      	cmp	r3, #8
 8001b16:	f200 80a1 	bhi.w	8001c5c <HAL_RCC_GetSysClockFreq+0x16c>
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d002      	beq.n	8001b24 <HAL_RCC_GetSysClockFreq+0x34>
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	d003      	beq.n	8001b2a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b22:	e09b      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b24:	4b53      	ldr	r3, [pc, #332]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b26:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8001b28:	e09b      	b.n	8001c62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b2a:	4b53      	ldr	r3, [pc, #332]	@ (8001c78 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b2c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b2e:	e098      	b.n	8001c62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b30:	4b4f      	ldr	r3, [pc, #316]	@ (8001c70 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b38:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b3a:	4b4d      	ldr	r3, [pc, #308]	@ (8001c70 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d028      	beq.n	8001b98 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b46:	4b4a      	ldr	r3, [pc, #296]	@ (8001c70 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	099b      	lsrs	r3, r3, #6
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	623b      	str	r3, [r7, #32]
 8001b50:	627a      	str	r2, [r7, #36]	@ 0x24
 8001b52:	6a3b      	ldr	r3, [r7, #32]
 8001b54:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b58:	2100      	movs	r1, #0
 8001b5a:	4b47      	ldr	r3, [pc, #284]	@ (8001c78 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b5c:	fb03 f201 	mul.w	r2, r3, r1
 8001b60:	2300      	movs	r3, #0
 8001b62:	fb00 f303 	mul.w	r3, r0, r3
 8001b66:	4413      	add	r3, r2
 8001b68:	4a43      	ldr	r2, [pc, #268]	@ (8001c78 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b6a:	fba0 1202 	umull	r1, r2, r0, r2
 8001b6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b70:	460a      	mov	r2, r1
 8001b72:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001b74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b76:	4413      	add	r3, r2
 8001b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	61bb      	str	r3, [r7, #24]
 8001b80:	61fa      	str	r2, [r7, #28]
 8001b82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001b8a:	f7fe fb29 	bl	80001e0 <__aeabi_uldivmod>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4613      	mov	r3, r2
 8001b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b96:	e053      	b.n	8001c40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b98:	4b35      	ldr	r3, [pc, #212]	@ (8001c70 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	099b      	lsrs	r3, r3, #6
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	617a      	str	r2, [r7, #20]
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001baa:	f04f 0b00 	mov.w	fp, #0
 8001bae:	4652      	mov	r2, sl
 8001bb0:	465b      	mov	r3, fp
 8001bb2:	f04f 0000 	mov.w	r0, #0
 8001bb6:	f04f 0100 	mov.w	r1, #0
 8001bba:	0159      	lsls	r1, r3, #5
 8001bbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bc0:	0150      	lsls	r0, r2, #5
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	ebb2 080a 	subs.w	r8, r2, sl
 8001bca:	eb63 090b 	sbc.w	r9, r3, fp
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	f04f 0300 	mov.w	r3, #0
 8001bd6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001bda:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001bde:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001be2:	ebb2 0408 	subs.w	r4, r2, r8
 8001be6:	eb63 0509 	sbc.w	r5, r3, r9
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	f04f 0300 	mov.w	r3, #0
 8001bf2:	00eb      	lsls	r3, r5, #3
 8001bf4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bf8:	00e2      	lsls	r2, r4, #3
 8001bfa:	4614      	mov	r4, r2
 8001bfc:	461d      	mov	r5, r3
 8001bfe:	eb14 030a 	adds.w	r3, r4, sl
 8001c02:	603b      	str	r3, [r7, #0]
 8001c04:	eb45 030b 	adc.w	r3, r5, fp
 8001c08:	607b      	str	r3, [r7, #4]
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	f04f 0300 	mov.w	r3, #0
 8001c12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c16:	4629      	mov	r1, r5
 8001c18:	028b      	lsls	r3, r1, #10
 8001c1a:	4621      	mov	r1, r4
 8001c1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c20:	4621      	mov	r1, r4
 8001c22:	028a      	lsls	r2, r1, #10
 8001c24:	4610      	mov	r0, r2
 8001c26:	4619      	mov	r1, r3
 8001c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	60fa      	str	r2, [r7, #12]
 8001c30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c34:	f7fe fad4 	bl	80001e0 <__aeabi_uldivmod>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c40:	4b0b      	ldr	r3, [pc, #44]	@ (8001c70 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	0c1b      	lsrs	r3, r3, #16
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8001c50:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c58:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c5a:	e002      	b.n	8001c62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c5c:	4b05      	ldr	r3, [pc, #20]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3740      	adds	r7, #64	@ 0x40
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800
 8001c74:	00f42400 	.word	0x00f42400
 8001c78:	017d7840 	.word	0x017d7840

08001c7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c80:	4b03      	ldr	r3, [pc, #12]	@ (8001c90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c82:	681b      	ldr	r3, [r3, #0]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	20000000 	.word	0x20000000

08001c94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c98:	f7ff fff0 	bl	8001c7c <HAL_RCC_GetHCLKFreq>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	4b05      	ldr	r3, [pc, #20]	@ (8001cb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	0a9b      	lsrs	r3, r3, #10
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	4903      	ldr	r1, [pc, #12]	@ (8001cb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001caa:	5ccb      	ldrb	r3, [r1, r3]
 8001cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	08006834 	.word	0x08006834

08001cbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cc0:	f7ff ffdc 	bl	8001c7c <HAL_RCC_GetHCLKFreq>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	4b05      	ldr	r3, [pc, #20]	@ (8001cdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	0b5b      	lsrs	r3, r3, #13
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	4903      	ldr	r1, [pc, #12]	@ (8001ce0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cd2:	5ccb      	ldrb	r3, [r1, r3]
 8001cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	08006834 	.word	0x08006834

08001ce4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	220f      	movs	r2, #15
 8001cf2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cf4:	4b12      	ldr	r3, [pc, #72]	@ (8001d40 <HAL_RCC_GetClockConfig+0x5c>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 0203 	and.w	r2, r3, #3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d00:	4b0f      	ldr	r3, [pc, #60]	@ (8001d40 <HAL_RCC_GetClockConfig+0x5c>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d40 <HAL_RCC_GetClockConfig+0x5c>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d18:	4b09      	ldr	r3, [pc, #36]	@ (8001d40 <HAL_RCC_GetClockConfig+0x5c>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	08db      	lsrs	r3, r3, #3
 8001d1e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d26:	4b07      	ldr	r3, [pc, #28]	@ (8001d44 <HAL_RCC_GetClockConfig+0x60>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0207 	and.w	r2, r3, #7
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	601a      	str	r2, [r3, #0]
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40023c00 	.word	0x40023c00

08001d48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e041      	b.n	8001dde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d106      	bne.n	8001d74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f839 	bl	8001de6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2202      	movs	r2, #2
 8001d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3304      	adds	r3, #4
 8001d84:	4619      	mov	r1, r3
 8001d86:	4610      	mov	r0, r2
 8001d88:	f000 fb74 	bl	8002474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
	...

08001dfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d001      	beq.n	8001e14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e044      	b.n	8001e9e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2202      	movs	r2, #2
 8001e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0201 	orr.w	r2, r2, #1
 8001e2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a1e      	ldr	r2, [pc, #120]	@ (8001eac <HAL_TIM_Base_Start_IT+0xb0>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d018      	beq.n	8001e68 <HAL_TIM_Base_Start_IT+0x6c>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e3e:	d013      	beq.n	8001e68 <HAL_TIM_Base_Start_IT+0x6c>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a1a      	ldr	r2, [pc, #104]	@ (8001eb0 <HAL_TIM_Base_Start_IT+0xb4>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d00e      	beq.n	8001e68 <HAL_TIM_Base_Start_IT+0x6c>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a19      	ldr	r2, [pc, #100]	@ (8001eb4 <HAL_TIM_Base_Start_IT+0xb8>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d009      	beq.n	8001e68 <HAL_TIM_Base_Start_IT+0x6c>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a17      	ldr	r2, [pc, #92]	@ (8001eb8 <HAL_TIM_Base_Start_IT+0xbc>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d004      	beq.n	8001e68 <HAL_TIM_Base_Start_IT+0x6c>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a16      	ldr	r2, [pc, #88]	@ (8001ebc <HAL_TIM_Base_Start_IT+0xc0>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d111      	bne.n	8001e8c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2b06      	cmp	r3, #6
 8001e78:	d010      	beq.n	8001e9c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f042 0201 	orr.w	r2, r2, #1
 8001e88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e8a:	e007      	b.n	8001e9c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0201 	orr.w	r2, r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	40010000 	.word	0x40010000
 8001eb0:	40000400 	.word	0x40000400
 8001eb4:	40000800 	.word	0x40000800
 8001eb8:	40000c00 	.word	0x40000c00
 8001ebc:	40014000 	.word	0x40014000

08001ec0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e041      	b.n	8001f56 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d106      	bne.n	8001eec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7fe fe4a 	bl	8000b80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2202      	movs	r2, #2
 8001ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3304      	adds	r3, #4
 8001efc:	4619      	mov	r1, r3
 8001efe:	4610      	mov	r0, r2
 8001f00:	f000 fab8 	bl	8002474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d109      	bne.n	8001f84 <HAL_TIM_PWM_Start+0x24>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	bf14      	ite	ne
 8001f7c:	2301      	movne	r3, #1
 8001f7e:	2300      	moveq	r3, #0
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	e022      	b.n	8001fca <HAL_TIM_PWM_Start+0x6a>
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	d109      	bne.n	8001f9e <HAL_TIM_PWM_Start+0x3e>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	bf14      	ite	ne
 8001f96:	2301      	movne	r3, #1
 8001f98:	2300      	moveq	r3, #0
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	e015      	b.n	8001fca <HAL_TIM_PWM_Start+0x6a>
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d109      	bne.n	8001fb8 <HAL_TIM_PWM_Start+0x58>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	bf14      	ite	ne
 8001fb0:	2301      	movne	r3, #1
 8001fb2:	2300      	moveq	r3, #0
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	e008      	b.n	8001fca <HAL_TIM_PWM_Start+0x6a>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	bf14      	ite	ne
 8001fc4:	2301      	movne	r3, #1
 8001fc6:	2300      	moveq	r3, #0
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e068      	b.n	80020a4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d104      	bne.n	8001fe2 <HAL_TIM_PWM_Start+0x82>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2202      	movs	r2, #2
 8001fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fe0:	e013      	b.n	800200a <HAL_TIM_PWM_Start+0xaa>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	2b04      	cmp	r3, #4
 8001fe6:	d104      	bne.n	8001ff2 <HAL_TIM_PWM_Start+0x92>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2202      	movs	r2, #2
 8001fec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ff0:	e00b      	b.n	800200a <HAL_TIM_PWM_Start+0xaa>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d104      	bne.n	8002002 <HAL_TIM_PWM_Start+0xa2>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002000:	e003      	b.n	800200a <HAL_TIM_PWM_Start+0xaa>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2202      	movs	r2, #2
 8002006:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2201      	movs	r2, #1
 8002010:	6839      	ldr	r1, [r7, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f000 fc46 	bl	80028a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a23      	ldr	r2, [pc, #140]	@ (80020ac <HAL_TIM_PWM_Start+0x14c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d107      	bne.n	8002032 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002030:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a1d      	ldr	r2, [pc, #116]	@ (80020ac <HAL_TIM_PWM_Start+0x14c>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d018      	beq.n	800206e <HAL_TIM_PWM_Start+0x10e>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002044:	d013      	beq.n	800206e <HAL_TIM_PWM_Start+0x10e>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a19      	ldr	r2, [pc, #100]	@ (80020b0 <HAL_TIM_PWM_Start+0x150>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d00e      	beq.n	800206e <HAL_TIM_PWM_Start+0x10e>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a17      	ldr	r2, [pc, #92]	@ (80020b4 <HAL_TIM_PWM_Start+0x154>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d009      	beq.n	800206e <HAL_TIM_PWM_Start+0x10e>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a16      	ldr	r2, [pc, #88]	@ (80020b8 <HAL_TIM_PWM_Start+0x158>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d004      	beq.n	800206e <HAL_TIM_PWM_Start+0x10e>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a14      	ldr	r2, [pc, #80]	@ (80020bc <HAL_TIM_PWM_Start+0x15c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d111      	bne.n	8002092 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2b06      	cmp	r3, #6
 800207e:	d010      	beq.n	80020a2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0201 	orr.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002090:	e007      	b.n	80020a2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f042 0201 	orr.w	r2, r2, #1
 80020a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40010000 	.word	0x40010000
 80020b0:	40000400 	.word	0x40000400
 80020b4:	40000800 	.word	0x40000800
 80020b8:	40000c00 	.word	0x40000c00
 80020bc:	40014000 	.word	0x40014000

080020c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d020      	beq.n	8002124 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d01b      	beq.n	8002124 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f06f 0202 	mvn.w	r2, #2
 80020f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f994 	bl	8002438 <HAL_TIM_IC_CaptureCallback>
 8002110:	e005      	b.n	800211e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f986 	bl	8002424 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 f997 	bl	800244c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	f003 0304 	and.w	r3, r3, #4
 800212a:	2b00      	cmp	r3, #0
 800212c:	d020      	beq.n	8002170 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	d01b      	beq.n	8002170 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f06f 0204 	mvn.w	r2, #4
 8002140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2202      	movs	r2, #2
 8002146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f96e 	bl	8002438 <HAL_TIM_IC_CaptureCallback>
 800215c:	e005      	b.n	800216a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f960 	bl	8002424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f971 	bl	800244c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b00      	cmp	r3, #0
 8002178:	d020      	beq.n	80021bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f003 0308 	and.w	r3, r3, #8
 8002180:	2b00      	cmp	r3, #0
 8002182:	d01b      	beq.n	80021bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f06f 0208 	mvn.w	r2, #8
 800218c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2204      	movs	r2, #4
 8002192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f948 	bl	8002438 <HAL_TIM_IC_CaptureCallback>
 80021a8:	e005      	b.n	80021b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f93a 	bl	8002424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 f94b 	bl	800244c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	f003 0310 	and.w	r3, r3, #16
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d020      	beq.n	8002208 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f003 0310 	and.w	r3, r3, #16
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d01b      	beq.n	8002208 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f06f 0210 	mvn.w	r2, #16
 80021d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2208      	movs	r2, #8
 80021de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f922 	bl	8002438 <HAL_TIM_IC_CaptureCallback>
 80021f4:	e005      	b.n	8002202 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 f914 	bl	8002424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 f925 	bl	800244c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00c      	beq.n	800222c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	d007      	beq.n	800222c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f06f 0201 	mvn.w	r2, #1
 8002224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7fe fb2a 	bl	8000880 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00c      	beq.n	8002250 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800223c:	2b00      	cmp	r3, #0
 800223e:	d007      	beq.n	8002250 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 fc1a 	bl	8002a84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00c      	beq.n	8002274 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002260:	2b00      	cmp	r3, #0
 8002262:	d007      	beq.n	8002274 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800226c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f8f6 	bl	8002460 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	f003 0320 	and.w	r3, r3, #32
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00c      	beq.n	8002298 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f003 0320 	and.w	r3, r3, #32
 8002284:	2b00      	cmp	r3, #0
 8002286:	d007      	beq.n	8002298 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f06f 0220 	mvn.w	r2, #32
 8002290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 fbec 	bl	8002a70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002298:	bf00      	nop
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022ac:	2300      	movs	r3, #0
 80022ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d101      	bne.n	80022be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e0ae      	b.n	800241c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b0c      	cmp	r3, #12
 80022ca:	f200 809f 	bhi.w	800240c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80022ce:	a201      	add	r2, pc, #4	@ (adr r2, 80022d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80022d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022d4:	08002309 	.word	0x08002309
 80022d8:	0800240d 	.word	0x0800240d
 80022dc:	0800240d 	.word	0x0800240d
 80022e0:	0800240d 	.word	0x0800240d
 80022e4:	08002349 	.word	0x08002349
 80022e8:	0800240d 	.word	0x0800240d
 80022ec:	0800240d 	.word	0x0800240d
 80022f0:	0800240d 	.word	0x0800240d
 80022f4:	0800238b 	.word	0x0800238b
 80022f8:	0800240d 	.word	0x0800240d
 80022fc:	0800240d 	.word	0x0800240d
 8002300:	0800240d 	.word	0x0800240d
 8002304:	080023cb 	.word	0x080023cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68b9      	ldr	r1, [r7, #8]
 800230e:	4618      	mov	r0, r3
 8002310:	f000 f93c 	bl	800258c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	699a      	ldr	r2, [r3, #24]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0208 	orr.w	r2, r2, #8
 8002322:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	699a      	ldr	r2, [r3, #24]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0204 	bic.w	r2, r2, #4
 8002332:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6999      	ldr	r1, [r3, #24]
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	691a      	ldr	r2, [r3, #16]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	619a      	str	r2, [r3, #24]
      break;
 8002346:	e064      	b.n	8002412 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68b9      	ldr	r1, [r7, #8]
 800234e:	4618      	mov	r0, r3
 8002350:	f000 f982 	bl	8002658 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	699a      	ldr	r2, [r3, #24]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002362:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	699a      	ldr	r2, [r3, #24]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002372:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6999      	ldr	r1, [r3, #24]
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	021a      	lsls	r2, r3, #8
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	619a      	str	r2, [r3, #24]
      break;
 8002388:	e043      	b.n	8002412 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68b9      	ldr	r1, [r7, #8]
 8002390:	4618      	mov	r0, r3
 8002392:	f000 f9cd 	bl	8002730 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	69da      	ldr	r2, [r3, #28]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f042 0208 	orr.w	r2, r2, #8
 80023a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	69da      	ldr	r2, [r3, #28]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0204 	bic.w	r2, r2, #4
 80023b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	69d9      	ldr	r1, [r3, #28]
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	691a      	ldr	r2, [r3, #16]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	61da      	str	r2, [r3, #28]
      break;
 80023c8:	e023      	b.n	8002412 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68b9      	ldr	r1, [r7, #8]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f000 fa17 	bl	8002804 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	69da      	ldr	r2, [r3, #28]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	69da      	ldr	r2, [r3, #28]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	69d9      	ldr	r1, [r3, #28]
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	021a      	lsls	r2, r3, #8
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	61da      	str	r2, [r3, #28]
      break;
 800240a:	e002      	b.n	8002412 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	75fb      	strb	r3, [r7, #23]
      break;
 8002410:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800241a:	7dfb      	ldrb	r3, [r7, #23]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a3a      	ldr	r2, [pc, #232]	@ (8002570 <TIM_Base_SetConfig+0xfc>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d00f      	beq.n	80024ac <TIM_Base_SetConfig+0x38>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002492:	d00b      	beq.n	80024ac <TIM_Base_SetConfig+0x38>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a37      	ldr	r2, [pc, #220]	@ (8002574 <TIM_Base_SetConfig+0x100>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d007      	beq.n	80024ac <TIM_Base_SetConfig+0x38>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a36      	ldr	r2, [pc, #216]	@ (8002578 <TIM_Base_SetConfig+0x104>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d003      	beq.n	80024ac <TIM_Base_SetConfig+0x38>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a35      	ldr	r2, [pc, #212]	@ (800257c <TIM_Base_SetConfig+0x108>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d108      	bne.n	80024be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a2b      	ldr	r2, [pc, #172]	@ (8002570 <TIM_Base_SetConfig+0xfc>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d01b      	beq.n	80024fe <TIM_Base_SetConfig+0x8a>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024cc:	d017      	beq.n	80024fe <TIM_Base_SetConfig+0x8a>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a28      	ldr	r2, [pc, #160]	@ (8002574 <TIM_Base_SetConfig+0x100>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d013      	beq.n	80024fe <TIM_Base_SetConfig+0x8a>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a27      	ldr	r2, [pc, #156]	@ (8002578 <TIM_Base_SetConfig+0x104>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d00f      	beq.n	80024fe <TIM_Base_SetConfig+0x8a>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a26      	ldr	r2, [pc, #152]	@ (800257c <TIM_Base_SetConfig+0x108>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d00b      	beq.n	80024fe <TIM_Base_SetConfig+0x8a>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a25      	ldr	r2, [pc, #148]	@ (8002580 <TIM_Base_SetConfig+0x10c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d007      	beq.n	80024fe <TIM_Base_SetConfig+0x8a>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a24      	ldr	r2, [pc, #144]	@ (8002584 <TIM_Base_SetConfig+0x110>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d003      	beq.n	80024fe <TIM_Base_SetConfig+0x8a>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a23      	ldr	r2, [pc, #140]	@ (8002588 <TIM_Base_SetConfig+0x114>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d108      	bne.n	8002510 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	4313      	orrs	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	4313      	orrs	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a0e      	ldr	r2, [pc, #56]	@ (8002570 <TIM_Base_SetConfig+0xfc>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d103      	bne.n	8002544 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	691a      	ldr	r2, [r3, #16]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b01      	cmp	r3, #1
 8002554:	d105      	bne.n	8002562 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	f023 0201 	bic.w	r2, r3, #1
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	611a      	str	r2, [r3, #16]
  }
}
 8002562:	bf00      	nop
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	40010000 	.word	0x40010000
 8002574:	40000400 	.word	0x40000400
 8002578:	40000800 	.word	0x40000800
 800257c:	40000c00 	.word	0x40000c00
 8002580:	40014000 	.word	0x40014000
 8002584:	40014400 	.word	0x40014400
 8002588:	40014800 	.word	0x40014800

0800258c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800258c:	b480      	push	{r7}
 800258e:	b087      	sub	sp, #28
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	f023 0201 	bic.w	r2, r3, #1
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f023 0303 	bic.w	r3, r3, #3
 80025c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f023 0302 	bic.w	r3, r3, #2
 80025d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	4313      	orrs	r3, r2
 80025de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002654 <TIM_OC1_SetConfig+0xc8>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d10c      	bne.n	8002602 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	f023 0308 	bic.w	r3, r3, #8
 80025ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f023 0304 	bic.w	r3, r3, #4
 8002600:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a13      	ldr	r2, [pc, #76]	@ (8002654 <TIM_OC1_SetConfig+0xc8>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d111      	bne.n	800262e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002610:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002618:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4313      	orrs	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	621a      	str	r2, [r3, #32]
}
 8002648:	bf00      	nop
 800264a:	371c      	adds	r7, #28
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	40010000 	.word	0x40010000

08002658 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002658:	b480      	push	{r7}
 800265a:	b087      	sub	sp, #28
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	f023 0210 	bic.w	r2, r3, #16
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800268e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	021b      	lsls	r3, r3, #8
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	4313      	orrs	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	f023 0320 	bic.w	r3, r3, #32
 80026a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	011b      	lsls	r3, r3, #4
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a1e      	ldr	r2, [pc, #120]	@ (800272c <TIM_OC2_SetConfig+0xd4>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d10d      	bne.n	80026d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	011b      	lsls	r3, r3, #4
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80026d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a15      	ldr	r2, [pc, #84]	@ (800272c <TIM_OC2_SetConfig+0xd4>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d113      	bne.n	8002704 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80026e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80026ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4313      	orrs	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	621a      	str	r2, [r3, #32]
}
 800271e:	bf00      	nop
 8002720:	371c      	adds	r7, #28
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	40010000 	.word	0x40010000

08002730 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002730:	b480      	push	{r7}
 8002732:	b087      	sub	sp, #28
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800275e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f023 0303 	bic.w	r3, r3, #3
 8002766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	4313      	orrs	r3, r2
 8002770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	021b      	lsls	r3, r3, #8
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	4313      	orrs	r3, r2
 8002784:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a1d      	ldr	r2, [pc, #116]	@ (8002800 <TIM_OC3_SetConfig+0xd0>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d10d      	bne.n	80027aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002794:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	021b      	lsls	r3, r3, #8
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	4313      	orrs	r3, r2
 80027a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80027a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a14      	ldr	r2, [pc, #80]	@ (8002800 <TIM_OC3_SetConfig+0xd0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d113      	bne.n	80027da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80027b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80027c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	621a      	str	r2, [r3, #32]
}
 80027f4:	bf00      	nop
 80027f6:	371c      	adds	r7, #28
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	40010000 	.word	0x40010000

08002804 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800283a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	021b      	lsls	r3, r3, #8
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	4313      	orrs	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800284e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	031b      	lsls	r3, r3, #12
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	4313      	orrs	r3, r2
 800285a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a10      	ldr	r2, [pc, #64]	@ (80028a0 <TIM_OC4_SetConfig+0x9c>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d109      	bne.n	8002878 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800286a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	019b      	lsls	r3, r3, #6
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	4313      	orrs	r3, r2
 8002876:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	621a      	str	r2, [r3, #32]
}
 8002892:	bf00      	nop
 8002894:	371c      	adds	r7, #28
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	40010000 	.word	0x40010000

080028a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b087      	sub	sp, #28
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	f003 031f 	and.w	r3, r3, #31
 80028b6:	2201      	movs	r2, #1
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6a1a      	ldr	r2, [r3, #32]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	43db      	mvns	r3, r3
 80028c6:	401a      	ands	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a1a      	ldr	r2, [r3, #32]
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	f003 031f 	and.w	r3, r3, #31
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	fa01 f303 	lsl.w	r3, r1, r3
 80028dc:	431a      	orrs	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	621a      	str	r2, [r3, #32]
}
 80028e2:	bf00      	nop
 80028e4:	371c      	adds	r7, #28
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
	...

080028f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002900:	2b01      	cmp	r3, #1
 8002902:	d101      	bne.n	8002908 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002904:	2302      	movs	r3, #2
 8002906:	e050      	b.n	80029aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2202      	movs	r2, #2
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800292e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	4313      	orrs	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a1c      	ldr	r2, [pc, #112]	@ (80029b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d018      	beq.n	800297e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002954:	d013      	beq.n	800297e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a18      	ldr	r2, [pc, #96]	@ (80029bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d00e      	beq.n	800297e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a16      	ldr	r2, [pc, #88]	@ (80029c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d009      	beq.n	800297e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a15      	ldr	r2, [pc, #84]	@ (80029c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d004      	beq.n	800297e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a13      	ldr	r2, [pc, #76]	@ (80029c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d10c      	bne.n	8002998 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002984:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	4313      	orrs	r3, r2
 800298e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68ba      	ldr	r2, [r7, #8]
 8002996:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	40010000 	.word	0x40010000
 80029bc:	40000400 	.word	0x40000400
 80029c0:	40000800 	.word	0x40000800
 80029c4:	40000c00 	.word	0x40000c00
 80029c8:	40014000 	.word	0x40014000

080029cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d101      	bne.n	80029e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80029e4:	2302      	movs	r3, #2
 80029e6:	e03d      	b.n	8002a64 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e042      	b.n	8002b30 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d106      	bne.n	8002ac4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7fe f8ea 	bl	8000c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2224      	movs	r2, #36	@ 0x24
 8002ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ada:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 fcdb 	bl	8003498 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	691a      	ldr	r2, [r3, #16]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002af0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	695a      	ldr	r2, [r3, #20]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68da      	ldr	r2, [r3, #12]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2220      	movs	r2, #32
 8002b24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	4613      	mov	r3, r2
 8002b44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b20      	cmp	r3, #32
 8002b50:	d112      	bne.n	8002b78 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d002      	beq.n	8002b5e <HAL_UART_Receive_IT+0x26>
 8002b58:	88fb      	ldrh	r3, [r7, #6]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e00b      	b.n	8002b7a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002b68:	88fb      	ldrh	r3, [r7, #6]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	68b9      	ldr	r1, [r7, #8]
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 faba 	bl	80030e8 <UART_Start_Receive_IT>
 8002b74:	4603      	mov	r3, r0
 8002b76:	e000      	b.n	8002b7a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002b78:	2302      	movs	r3, #2
  }
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b0ba      	sub	sp, #232	@ 0xe8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002baa:	2300      	movs	r3, #0
 8002bac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002bc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10f      	bne.n	8002bea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bce:	f003 0320 	and.w	r3, r3, #32
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d009      	beq.n	8002bea <HAL_UART_IRQHandler+0x66>
 8002bd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bda:	f003 0320 	and.w	r3, r3, #32
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 fb99 	bl	800331a <UART_Receive_IT>
      return;
 8002be8:	e25b      	b.n	80030a2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002bea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 80de 	beq.w	8002db0 <HAL_UART_IRQHandler+0x22c>
 8002bf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d106      	bne.n	8002c0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c04:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 80d1 	beq.w	8002db0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00b      	beq.n	8002c32 <HAL_UART_IRQHandler+0xae>
 8002c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d005      	beq.n	8002c32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2a:	f043 0201 	orr.w	r2, r3, #1
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c36:	f003 0304 	and.w	r3, r3, #4
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00b      	beq.n	8002c56 <HAL_UART_IRQHandler+0xd2>
 8002c3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d005      	beq.n	8002c56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c4e:	f043 0202 	orr.w	r2, r3, #2
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00b      	beq.n	8002c7a <HAL_UART_IRQHandler+0xf6>
 8002c62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d005      	beq.n	8002c7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c72:	f043 0204 	orr.w	r2, r3, #4
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c7e:	f003 0308 	and.w	r3, r3, #8
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d011      	beq.n	8002caa <HAL_UART_IRQHandler+0x126>
 8002c86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c8a:	f003 0320 	and.w	r3, r3, #32
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d105      	bne.n	8002c9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d005      	beq.n	8002caa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca2:	f043 0208 	orr.w	r2, r3, #8
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 81f2 	beq.w	8003098 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cb8:	f003 0320 	and.w	r3, r3, #32
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d008      	beq.n	8002cd2 <HAL_UART_IRQHandler+0x14e>
 8002cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cc4:	f003 0320 	and.w	r3, r3, #32
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d002      	beq.n	8002cd2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 fb24 	bl	800331a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cdc:	2b40      	cmp	r3, #64	@ 0x40
 8002cde:	bf0c      	ite	eq
 8002ce0:	2301      	moveq	r3, #1
 8002ce2:	2300      	movne	r3, #0
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cee:	f003 0308 	and.w	r3, r3, #8
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d103      	bne.n	8002cfe <HAL_UART_IRQHandler+0x17a>
 8002cf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d04f      	beq.n	8002d9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fa2c 	bl	800315c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d0e:	2b40      	cmp	r3, #64	@ 0x40
 8002d10:	d141      	bne.n	8002d96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	3314      	adds	r3, #20
 8002d18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d20:	e853 3f00 	ldrex	r3, [r3]
 8002d24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002d28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	3314      	adds	r3, #20
 8002d3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002d3e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002d42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002d4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002d4e:	e841 2300 	strex	r3, r2, [r1]
 8002d52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002d56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1d9      	bne.n	8002d12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d013      	beq.n	8002d8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d6a:	4a7e      	ldr	r2, [pc, #504]	@ (8002f64 <HAL_UART_IRQHandler+0x3e0>)
 8002d6c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fe f99e 	bl	80010b4 <HAL_DMA_Abort_IT>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d016      	beq.n	8002dac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d88:	4610      	mov	r0, r2
 8002d8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d8c:	e00e      	b.n	8002dac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f994 	bl	80030bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d94:	e00a      	b.n	8002dac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f990 	bl	80030bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d9c:	e006      	b.n	8002dac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f98c 	bl	80030bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002daa:	e175      	b.n	8003098 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dac:	bf00      	nop
    return;
 8002dae:	e173      	b.n	8003098 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	f040 814f 	bne.w	8003058 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 8148 	beq.w	8003058 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dcc:	f003 0310 	and.w	r3, r3, #16
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 8141 	beq.w	8003058 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60bb      	str	r3, [r7, #8]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	60bb      	str	r3, [r7, #8]
 8002dea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002df6:	2b40      	cmp	r3, #64	@ 0x40
 8002df8:	f040 80b6 	bne.w	8002f68 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 8145 	beq.w	800309c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002e16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	f080 813e 	bcs.w	800309c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002e26:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e32:	f000 8088 	beq.w	8002f46 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	330c      	adds	r3, #12
 8002e3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e44:	e853 3f00 	ldrex	r3, [r3]
 8002e48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002e4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	330c      	adds	r3, #12
 8002e5e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002e62:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002e66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002e6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002e72:	e841 2300 	strex	r3, r2, [r1]
 8002e76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002e7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1d9      	bne.n	8002e36 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	3314      	adds	r3, #20
 8002e88:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e8c:	e853 3f00 	ldrex	r3, [r3]
 8002e90:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002e92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e94:	f023 0301 	bic.w	r3, r3, #1
 8002e98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	3314      	adds	r3, #20
 8002ea2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002ea6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002eaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002eae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002eb2:	e841 2300 	strex	r3, r2, [r1]
 8002eb6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002eb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1e1      	bne.n	8002e82 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	3314      	adds	r3, #20
 8002ec4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ec8:	e853 3f00 	ldrex	r3, [r3]
 8002ecc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002ece:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ed0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ed4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	3314      	adds	r3, #20
 8002ede:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002ee2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002ee4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002ee8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002eea:	e841 2300 	strex	r3, r2, [r1]
 8002eee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002ef0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1e3      	bne.n	8002ebe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2220      	movs	r2, #32
 8002efa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	330c      	adds	r3, #12
 8002f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f0e:	e853 3f00 	ldrex	r3, [r3]
 8002f12:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002f14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f16:	f023 0310 	bic.w	r3, r3, #16
 8002f1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	330c      	adds	r3, #12
 8002f24:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002f28:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002f2a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f2c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002f2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002f30:	e841 2300 	strex	r3, r2, [r1]
 8002f34:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002f36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1e3      	bne.n	8002f04 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fe f847 	bl	8000fd4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2202      	movs	r2, #2
 8002f4a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f8b7 	bl	80030d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f62:	e09b      	b.n	800309c <HAL_UART_IRQHandler+0x518>
 8002f64:	08003223 	.word	0x08003223
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 808e 	beq.w	80030a0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002f84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f000 8089 	beq.w	80030a0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	330c      	adds	r3, #12
 8002f94:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f98:	e853 3f00 	ldrex	r3, [r3]
 8002f9c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002f9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fa0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002fa4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	330c      	adds	r3, #12
 8002fae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002fb2:	647a      	str	r2, [r7, #68]	@ 0x44
 8002fb4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002fb8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002fba:	e841 2300 	strex	r3, r2, [r1]
 8002fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002fc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1e3      	bne.n	8002f8e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	3314      	adds	r3, #20
 8002fcc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd0:	e853 3f00 	ldrex	r3, [r3]
 8002fd4:	623b      	str	r3, [r7, #32]
   return(result);
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	f023 0301 	bic.w	r3, r3, #1
 8002fdc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	3314      	adds	r3, #20
 8002fe6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002fea:	633a      	str	r2, [r7, #48]	@ 0x30
 8002fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ff0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ff2:	e841 2300 	strex	r3, r2, [r1]
 8002ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1e3      	bne.n	8002fc6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2220      	movs	r2, #32
 8003002:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	330c      	adds	r3, #12
 8003012:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	e853 3f00 	ldrex	r3, [r3]
 800301a:	60fb      	str	r3, [r7, #12]
   return(result);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f023 0310 	bic.w	r3, r3, #16
 8003022:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	330c      	adds	r3, #12
 800302c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003030:	61fa      	str	r2, [r7, #28]
 8003032:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003034:	69b9      	ldr	r1, [r7, #24]
 8003036:	69fa      	ldr	r2, [r7, #28]
 8003038:	e841 2300 	strex	r3, r2, [r1]
 800303c:	617b      	str	r3, [r7, #20]
   return(result);
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1e3      	bne.n	800300c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800304a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800304e:	4619      	mov	r1, r3
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f83d 	bl	80030d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003056:	e023      	b.n	80030a0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800305c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003060:	2b00      	cmp	r3, #0
 8003062:	d009      	beq.n	8003078 <HAL_UART_IRQHandler+0x4f4>
 8003064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003068:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 f8ea 	bl	800324a <UART_Transmit_IT>
    return;
 8003076:	e014      	b.n	80030a2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800307c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00e      	beq.n	80030a2 <HAL_UART_IRQHandler+0x51e>
 8003084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800308c:	2b00      	cmp	r3, #0
 800308e:	d008      	beq.n	80030a2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 f92a 	bl	80032ea <UART_EndTransmit_IT>
    return;
 8003096:	e004      	b.n	80030a2 <HAL_UART_IRQHandler+0x51e>
    return;
 8003098:	bf00      	nop
 800309a:	e002      	b.n	80030a2 <HAL_UART_IRQHandler+0x51e>
      return;
 800309c:	bf00      	nop
 800309e:	e000      	b.n	80030a2 <HAL_UART_IRQHandler+0x51e>
      return;
 80030a0:	bf00      	nop
  }
}
 80030a2:	37e8      	adds	r7, #232	@ 0xe8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	460b      	mov	r3, r1
 80030da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	4613      	mov	r3, r2
 80030f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	88fa      	ldrh	r2, [r7, #6]
 8003100:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	88fa      	ldrh	r2, [r7, #6]
 8003106:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2222      	movs	r2, #34	@ 0x22
 8003112:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d007      	beq.n	800312e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800312c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	695a      	ldr	r2, [r3, #20]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f042 0201 	orr.w	r2, r2, #1
 800313c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68da      	ldr	r2, [r3, #12]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f042 0220 	orr.w	r2, r2, #32
 800314c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800315c:	b480      	push	{r7}
 800315e:	b095      	sub	sp, #84	@ 0x54
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	330c      	adds	r3, #12
 800316a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800316e:	e853 3f00 	ldrex	r3, [r3]
 8003172:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003176:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800317a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	330c      	adds	r3, #12
 8003182:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003184:	643a      	str	r2, [r7, #64]	@ 0x40
 8003186:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003188:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800318a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800318c:	e841 2300 	strex	r3, r2, [r1]
 8003190:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1e5      	bne.n	8003164 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	3314      	adds	r3, #20
 800319e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	e853 3f00 	ldrex	r3, [r3]
 80031a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	f023 0301 	bic.w	r3, r3, #1
 80031ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	3314      	adds	r3, #20
 80031b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031c0:	e841 2300 	strex	r3, r2, [r1]
 80031c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80031c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1e5      	bne.n	8003198 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d119      	bne.n	8003208 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	330c      	adds	r3, #12
 80031da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	e853 3f00 	ldrex	r3, [r3]
 80031e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f023 0310 	bic.w	r3, r3, #16
 80031ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	330c      	adds	r3, #12
 80031f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031f4:	61ba      	str	r2, [r7, #24]
 80031f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f8:	6979      	ldr	r1, [r7, #20]
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	e841 2300 	strex	r3, r2, [r1]
 8003200:	613b      	str	r3, [r7, #16]
   return(result);
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1e5      	bne.n	80031d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2220      	movs	r2, #32
 800320c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003216:	bf00      	nop
 8003218:	3754      	adds	r7, #84	@ 0x54
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b084      	sub	sp, #16
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800322e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f7ff ff3d 	bl	80030bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003242:	bf00      	nop
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800324a:	b480      	push	{r7}
 800324c:	b085      	sub	sp, #20
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b21      	cmp	r3, #33	@ 0x21
 800325c:	d13e      	bne.n	80032dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003266:	d114      	bne.n	8003292 <UART_Transmit_IT+0x48>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d110      	bne.n	8003292 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	881b      	ldrh	r3, [r3, #0]
 800327a:	461a      	mov	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003284:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	1c9a      	adds	r2, r3, #2
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	621a      	str	r2, [r3, #32]
 8003290:	e008      	b.n	80032a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	1c59      	adds	r1, r3, #1
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6211      	str	r1, [r2, #32]
 800329c:	781a      	ldrb	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	3b01      	subs	r3, #1
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	4619      	mov	r1, r3
 80032b2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10f      	bne.n	80032d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68da      	ldr	r2, [r3, #12]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80032d8:	2300      	movs	r3, #0
 80032da:	e000      	b.n	80032de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80032dc:	2302      	movs	r3, #2
  }
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b082      	sub	sp, #8
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003300:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2220      	movs	r2, #32
 8003306:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7ff fecc 	bl	80030a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b08c      	sub	sp, #48	@ 0x30
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b22      	cmp	r3, #34	@ 0x22
 800332c:	f040 80ae 	bne.w	800348c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003338:	d117      	bne.n	800336a <UART_Receive_IT+0x50>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d113      	bne.n	800336a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003342:	2300      	movs	r3, #0
 8003344:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800334a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	b29b      	uxth	r3, r3
 8003354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003358:	b29a      	uxth	r2, r3
 800335a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800335c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003362:	1c9a      	adds	r2, r3, #2
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	629a      	str	r2, [r3, #40]	@ 0x28
 8003368:	e026      	b.n	80033b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800336e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003370:	2300      	movs	r3, #0
 8003372:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800337c:	d007      	beq.n	800338e <UART_Receive_IT+0x74>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10a      	bne.n	800339c <UART_Receive_IT+0x82>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d106      	bne.n	800339c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	b2da      	uxtb	r2, r3
 8003396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003398:	701a      	strb	r2, [r3, #0]
 800339a:	e008      	b.n	80033ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80033bc:	b29b      	uxth	r3, r3
 80033be:	3b01      	subs	r3, #1
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	4619      	mov	r1, r3
 80033c6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d15d      	bne.n	8003488 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68da      	ldr	r2, [r3, #12]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0220 	bic.w	r2, r2, #32
 80033da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695a      	ldr	r2, [r3, #20]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0201 	bic.w	r2, r2, #1
 80033fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340e:	2b01      	cmp	r3, #1
 8003410:	d135      	bne.n	800347e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	330c      	adds	r3, #12
 800341e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	e853 3f00 	ldrex	r3, [r3]
 8003426:	613b      	str	r3, [r7, #16]
   return(result);
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	f023 0310 	bic.w	r3, r3, #16
 800342e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	330c      	adds	r3, #12
 8003436:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003438:	623a      	str	r2, [r7, #32]
 800343a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343c:	69f9      	ldr	r1, [r7, #28]
 800343e:	6a3a      	ldr	r2, [r7, #32]
 8003440:	e841 2300 	strex	r3, r2, [r1]
 8003444:	61bb      	str	r3, [r7, #24]
   return(result);
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1e5      	bne.n	8003418 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0310 	and.w	r3, r3, #16
 8003456:	2b10      	cmp	r3, #16
 8003458:	d10a      	bne.n	8003470 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	60fb      	str	r3, [r7, #12]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	60fb      	str	r3, [r7, #12]
 800346e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003474:	4619      	mov	r1, r3
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7ff fe2a 	bl	80030d0 <HAL_UARTEx_RxEventCallback>
 800347c:	e002      	b.n	8003484 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7fd f850 	bl	8000524 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003484:	2300      	movs	r3, #0
 8003486:	e002      	b.n	800348e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003488:	2300      	movs	r3, #0
 800348a:	e000      	b.n	800348e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800348c:	2302      	movs	r3, #2
  }
}
 800348e:	4618      	mov	r0, r3
 8003490:	3730      	adds	r7, #48	@ 0x30
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
	...

08003498 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800349c:	b0c0      	sub	sp, #256	@ 0x100
 800349e:	af00      	add	r7, sp, #0
 80034a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80034b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034b4:	68d9      	ldr	r1, [r3, #12]
 80034b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	ea40 0301 	orr.w	r3, r0, r1
 80034c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	431a      	orrs	r2, r3
 80034d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	431a      	orrs	r2, r3
 80034d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	4313      	orrs	r3, r2
 80034e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80034e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80034f0:	f021 010c 	bic.w	r1, r1, #12
 80034f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80034fe:	430b      	orrs	r3, r1
 8003500:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800350e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003512:	6999      	ldr	r1, [r3, #24]
 8003514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	ea40 0301 	orr.w	r3, r0, r1
 800351e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	4b8f      	ldr	r3, [pc, #572]	@ (8003764 <UART_SetConfig+0x2cc>)
 8003528:	429a      	cmp	r2, r3
 800352a:	d005      	beq.n	8003538 <UART_SetConfig+0xa0>
 800352c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	4b8d      	ldr	r3, [pc, #564]	@ (8003768 <UART_SetConfig+0x2d0>)
 8003534:	429a      	cmp	r2, r3
 8003536:	d104      	bne.n	8003542 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003538:	f7fe fbc0 	bl	8001cbc <HAL_RCC_GetPCLK2Freq>
 800353c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003540:	e003      	b.n	800354a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003542:	f7fe fba7 	bl	8001c94 <HAL_RCC_GetPCLK1Freq>
 8003546:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800354a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800354e:	69db      	ldr	r3, [r3, #28]
 8003550:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003554:	f040 810c 	bne.w	8003770 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003558:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800355c:	2200      	movs	r2, #0
 800355e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003562:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003566:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800356a:	4622      	mov	r2, r4
 800356c:	462b      	mov	r3, r5
 800356e:	1891      	adds	r1, r2, r2
 8003570:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003572:	415b      	adcs	r3, r3
 8003574:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003576:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800357a:	4621      	mov	r1, r4
 800357c:	eb12 0801 	adds.w	r8, r2, r1
 8003580:	4629      	mov	r1, r5
 8003582:	eb43 0901 	adc.w	r9, r3, r1
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	f04f 0300 	mov.w	r3, #0
 800358e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003592:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003596:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800359a:	4690      	mov	r8, r2
 800359c:	4699      	mov	r9, r3
 800359e:	4623      	mov	r3, r4
 80035a0:	eb18 0303 	adds.w	r3, r8, r3
 80035a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80035a8:	462b      	mov	r3, r5
 80035aa:	eb49 0303 	adc.w	r3, r9, r3
 80035ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80035b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80035be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80035c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80035c6:	460b      	mov	r3, r1
 80035c8:	18db      	adds	r3, r3, r3
 80035ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80035cc:	4613      	mov	r3, r2
 80035ce:	eb42 0303 	adc.w	r3, r2, r3
 80035d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80035d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80035d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80035dc:	f7fc fe00 	bl	80001e0 <__aeabi_uldivmod>
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
 80035e4:	4b61      	ldr	r3, [pc, #388]	@ (800376c <UART_SetConfig+0x2d4>)
 80035e6:	fba3 2302 	umull	r2, r3, r3, r2
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	011c      	lsls	r4, r3, #4
 80035ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035f2:	2200      	movs	r2, #0
 80035f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80035fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003600:	4642      	mov	r2, r8
 8003602:	464b      	mov	r3, r9
 8003604:	1891      	adds	r1, r2, r2
 8003606:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003608:	415b      	adcs	r3, r3
 800360a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800360c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003610:	4641      	mov	r1, r8
 8003612:	eb12 0a01 	adds.w	sl, r2, r1
 8003616:	4649      	mov	r1, r9
 8003618:	eb43 0b01 	adc.w	fp, r3, r1
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	f04f 0300 	mov.w	r3, #0
 8003624:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003628:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800362c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003630:	4692      	mov	sl, r2
 8003632:	469b      	mov	fp, r3
 8003634:	4643      	mov	r3, r8
 8003636:	eb1a 0303 	adds.w	r3, sl, r3
 800363a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800363e:	464b      	mov	r3, r9
 8003640:	eb4b 0303 	adc.w	r3, fp, r3
 8003644:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003654:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003658:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800365c:	460b      	mov	r3, r1
 800365e:	18db      	adds	r3, r3, r3
 8003660:	643b      	str	r3, [r7, #64]	@ 0x40
 8003662:	4613      	mov	r3, r2
 8003664:	eb42 0303 	adc.w	r3, r2, r3
 8003668:	647b      	str	r3, [r7, #68]	@ 0x44
 800366a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800366e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003672:	f7fc fdb5 	bl	80001e0 <__aeabi_uldivmod>
 8003676:	4602      	mov	r2, r0
 8003678:	460b      	mov	r3, r1
 800367a:	4611      	mov	r1, r2
 800367c:	4b3b      	ldr	r3, [pc, #236]	@ (800376c <UART_SetConfig+0x2d4>)
 800367e:	fba3 2301 	umull	r2, r3, r3, r1
 8003682:	095b      	lsrs	r3, r3, #5
 8003684:	2264      	movs	r2, #100	@ 0x64
 8003686:	fb02 f303 	mul.w	r3, r2, r3
 800368a:	1acb      	subs	r3, r1, r3
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003692:	4b36      	ldr	r3, [pc, #216]	@ (800376c <UART_SetConfig+0x2d4>)
 8003694:	fba3 2302 	umull	r2, r3, r3, r2
 8003698:	095b      	lsrs	r3, r3, #5
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80036a0:	441c      	add	r4, r3
 80036a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036a6:	2200      	movs	r2, #0
 80036a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80036ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80036b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80036b4:	4642      	mov	r2, r8
 80036b6:	464b      	mov	r3, r9
 80036b8:	1891      	adds	r1, r2, r2
 80036ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80036bc:	415b      	adcs	r3, r3
 80036be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80036c4:	4641      	mov	r1, r8
 80036c6:	1851      	adds	r1, r2, r1
 80036c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80036ca:	4649      	mov	r1, r9
 80036cc:	414b      	adcs	r3, r1
 80036ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80036d0:	f04f 0200 	mov.w	r2, #0
 80036d4:	f04f 0300 	mov.w	r3, #0
 80036d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80036dc:	4659      	mov	r1, fp
 80036de:	00cb      	lsls	r3, r1, #3
 80036e0:	4651      	mov	r1, sl
 80036e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036e6:	4651      	mov	r1, sl
 80036e8:	00ca      	lsls	r2, r1, #3
 80036ea:	4610      	mov	r0, r2
 80036ec:	4619      	mov	r1, r3
 80036ee:	4603      	mov	r3, r0
 80036f0:	4642      	mov	r2, r8
 80036f2:	189b      	adds	r3, r3, r2
 80036f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80036f8:	464b      	mov	r3, r9
 80036fa:	460a      	mov	r2, r1
 80036fc:	eb42 0303 	adc.w	r3, r2, r3
 8003700:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003710:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003714:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003718:	460b      	mov	r3, r1
 800371a:	18db      	adds	r3, r3, r3
 800371c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800371e:	4613      	mov	r3, r2
 8003720:	eb42 0303 	adc.w	r3, r2, r3
 8003724:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003726:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800372a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800372e:	f7fc fd57 	bl	80001e0 <__aeabi_uldivmod>
 8003732:	4602      	mov	r2, r0
 8003734:	460b      	mov	r3, r1
 8003736:	4b0d      	ldr	r3, [pc, #52]	@ (800376c <UART_SetConfig+0x2d4>)
 8003738:	fba3 1302 	umull	r1, r3, r3, r2
 800373c:	095b      	lsrs	r3, r3, #5
 800373e:	2164      	movs	r1, #100	@ 0x64
 8003740:	fb01 f303 	mul.w	r3, r1, r3
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	3332      	adds	r3, #50	@ 0x32
 800374a:	4a08      	ldr	r2, [pc, #32]	@ (800376c <UART_SetConfig+0x2d4>)
 800374c:	fba2 2303 	umull	r2, r3, r2, r3
 8003750:	095b      	lsrs	r3, r3, #5
 8003752:	f003 0207 	and.w	r2, r3, #7
 8003756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4422      	add	r2, r4
 800375e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003760:	e106      	b.n	8003970 <UART_SetConfig+0x4d8>
 8003762:	bf00      	nop
 8003764:	40011000 	.word	0x40011000
 8003768:	40011400 	.word	0x40011400
 800376c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003770:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003774:	2200      	movs	r2, #0
 8003776:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800377a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800377e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003782:	4642      	mov	r2, r8
 8003784:	464b      	mov	r3, r9
 8003786:	1891      	adds	r1, r2, r2
 8003788:	6239      	str	r1, [r7, #32]
 800378a:	415b      	adcs	r3, r3
 800378c:	627b      	str	r3, [r7, #36]	@ 0x24
 800378e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003792:	4641      	mov	r1, r8
 8003794:	1854      	adds	r4, r2, r1
 8003796:	4649      	mov	r1, r9
 8003798:	eb43 0501 	adc.w	r5, r3, r1
 800379c:	f04f 0200 	mov.w	r2, #0
 80037a0:	f04f 0300 	mov.w	r3, #0
 80037a4:	00eb      	lsls	r3, r5, #3
 80037a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037aa:	00e2      	lsls	r2, r4, #3
 80037ac:	4614      	mov	r4, r2
 80037ae:	461d      	mov	r5, r3
 80037b0:	4643      	mov	r3, r8
 80037b2:	18e3      	adds	r3, r4, r3
 80037b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80037b8:	464b      	mov	r3, r9
 80037ba:	eb45 0303 	adc.w	r3, r5, r3
 80037be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80037c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80037ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80037d2:	f04f 0200 	mov.w	r2, #0
 80037d6:	f04f 0300 	mov.w	r3, #0
 80037da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80037de:	4629      	mov	r1, r5
 80037e0:	008b      	lsls	r3, r1, #2
 80037e2:	4621      	mov	r1, r4
 80037e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037e8:	4621      	mov	r1, r4
 80037ea:	008a      	lsls	r2, r1, #2
 80037ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80037f0:	f7fc fcf6 	bl	80001e0 <__aeabi_uldivmod>
 80037f4:	4602      	mov	r2, r0
 80037f6:	460b      	mov	r3, r1
 80037f8:	4b60      	ldr	r3, [pc, #384]	@ (800397c <UART_SetConfig+0x4e4>)
 80037fa:	fba3 2302 	umull	r2, r3, r3, r2
 80037fe:	095b      	lsrs	r3, r3, #5
 8003800:	011c      	lsls	r4, r3, #4
 8003802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003806:	2200      	movs	r2, #0
 8003808:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800380c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003810:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003814:	4642      	mov	r2, r8
 8003816:	464b      	mov	r3, r9
 8003818:	1891      	adds	r1, r2, r2
 800381a:	61b9      	str	r1, [r7, #24]
 800381c:	415b      	adcs	r3, r3
 800381e:	61fb      	str	r3, [r7, #28]
 8003820:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003824:	4641      	mov	r1, r8
 8003826:	1851      	adds	r1, r2, r1
 8003828:	6139      	str	r1, [r7, #16]
 800382a:	4649      	mov	r1, r9
 800382c:	414b      	adcs	r3, r1
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	f04f 0200 	mov.w	r2, #0
 8003834:	f04f 0300 	mov.w	r3, #0
 8003838:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800383c:	4659      	mov	r1, fp
 800383e:	00cb      	lsls	r3, r1, #3
 8003840:	4651      	mov	r1, sl
 8003842:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003846:	4651      	mov	r1, sl
 8003848:	00ca      	lsls	r2, r1, #3
 800384a:	4610      	mov	r0, r2
 800384c:	4619      	mov	r1, r3
 800384e:	4603      	mov	r3, r0
 8003850:	4642      	mov	r2, r8
 8003852:	189b      	adds	r3, r3, r2
 8003854:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003858:	464b      	mov	r3, r9
 800385a:	460a      	mov	r2, r1
 800385c:	eb42 0303 	adc.w	r3, r2, r3
 8003860:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800386e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003870:	f04f 0200 	mov.w	r2, #0
 8003874:	f04f 0300 	mov.w	r3, #0
 8003878:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800387c:	4649      	mov	r1, r9
 800387e:	008b      	lsls	r3, r1, #2
 8003880:	4641      	mov	r1, r8
 8003882:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003886:	4641      	mov	r1, r8
 8003888:	008a      	lsls	r2, r1, #2
 800388a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800388e:	f7fc fca7 	bl	80001e0 <__aeabi_uldivmod>
 8003892:	4602      	mov	r2, r0
 8003894:	460b      	mov	r3, r1
 8003896:	4611      	mov	r1, r2
 8003898:	4b38      	ldr	r3, [pc, #224]	@ (800397c <UART_SetConfig+0x4e4>)
 800389a:	fba3 2301 	umull	r2, r3, r3, r1
 800389e:	095b      	lsrs	r3, r3, #5
 80038a0:	2264      	movs	r2, #100	@ 0x64
 80038a2:	fb02 f303 	mul.w	r3, r2, r3
 80038a6:	1acb      	subs	r3, r1, r3
 80038a8:	011b      	lsls	r3, r3, #4
 80038aa:	3332      	adds	r3, #50	@ 0x32
 80038ac:	4a33      	ldr	r2, [pc, #204]	@ (800397c <UART_SetConfig+0x4e4>)
 80038ae:	fba2 2303 	umull	r2, r3, r2, r3
 80038b2:	095b      	lsrs	r3, r3, #5
 80038b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038b8:	441c      	add	r4, r3
 80038ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038be:	2200      	movs	r2, #0
 80038c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80038c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80038c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80038c8:	4642      	mov	r2, r8
 80038ca:	464b      	mov	r3, r9
 80038cc:	1891      	adds	r1, r2, r2
 80038ce:	60b9      	str	r1, [r7, #8]
 80038d0:	415b      	adcs	r3, r3
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038d8:	4641      	mov	r1, r8
 80038da:	1851      	adds	r1, r2, r1
 80038dc:	6039      	str	r1, [r7, #0]
 80038de:	4649      	mov	r1, r9
 80038e0:	414b      	adcs	r3, r1
 80038e2:	607b      	str	r3, [r7, #4]
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	f04f 0300 	mov.w	r3, #0
 80038ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80038f0:	4659      	mov	r1, fp
 80038f2:	00cb      	lsls	r3, r1, #3
 80038f4:	4651      	mov	r1, sl
 80038f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038fa:	4651      	mov	r1, sl
 80038fc:	00ca      	lsls	r2, r1, #3
 80038fe:	4610      	mov	r0, r2
 8003900:	4619      	mov	r1, r3
 8003902:	4603      	mov	r3, r0
 8003904:	4642      	mov	r2, r8
 8003906:	189b      	adds	r3, r3, r2
 8003908:	66bb      	str	r3, [r7, #104]	@ 0x68
 800390a:	464b      	mov	r3, r9
 800390c:	460a      	mov	r2, r1
 800390e:	eb42 0303 	adc.w	r3, r2, r3
 8003912:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	663b      	str	r3, [r7, #96]	@ 0x60
 800391e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003920:	f04f 0200 	mov.w	r2, #0
 8003924:	f04f 0300 	mov.w	r3, #0
 8003928:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800392c:	4649      	mov	r1, r9
 800392e:	008b      	lsls	r3, r1, #2
 8003930:	4641      	mov	r1, r8
 8003932:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003936:	4641      	mov	r1, r8
 8003938:	008a      	lsls	r2, r1, #2
 800393a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800393e:	f7fc fc4f 	bl	80001e0 <__aeabi_uldivmod>
 8003942:	4602      	mov	r2, r0
 8003944:	460b      	mov	r3, r1
 8003946:	4b0d      	ldr	r3, [pc, #52]	@ (800397c <UART_SetConfig+0x4e4>)
 8003948:	fba3 1302 	umull	r1, r3, r3, r2
 800394c:	095b      	lsrs	r3, r3, #5
 800394e:	2164      	movs	r1, #100	@ 0x64
 8003950:	fb01 f303 	mul.w	r3, r1, r3
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	3332      	adds	r3, #50	@ 0x32
 800395a:	4a08      	ldr	r2, [pc, #32]	@ (800397c <UART_SetConfig+0x4e4>)
 800395c:	fba2 2303 	umull	r2, r3, r2, r3
 8003960:	095b      	lsrs	r3, r3, #5
 8003962:	f003 020f 	and.w	r2, r3, #15
 8003966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4422      	add	r2, r4
 800396e:	609a      	str	r2, [r3, #8]
}
 8003970:	bf00      	nop
 8003972:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003976:	46bd      	mov	sp, r7
 8003978:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800397c:	51eb851f 	.word	0x51eb851f

08003980 <__NVIC_SetPriority>:
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	6039      	str	r1, [r7, #0]
 800398a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800398c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003990:	2b00      	cmp	r3, #0
 8003992:	db0a      	blt.n	80039aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	b2da      	uxtb	r2, r3
 8003998:	490c      	ldr	r1, [pc, #48]	@ (80039cc <__NVIC_SetPriority+0x4c>)
 800399a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399e:	0112      	lsls	r2, r2, #4
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	440b      	add	r3, r1
 80039a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80039a8:	e00a      	b.n	80039c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	4908      	ldr	r1, [pc, #32]	@ (80039d0 <__NVIC_SetPriority+0x50>)
 80039b0:	79fb      	ldrb	r3, [r7, #7]
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	3b04      	subs	r3, #4
 80039b8:	0112      	lsls	r2, r2, #4
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	440b      	add	r3, r1
 80039be:	761a      	strb	r2, [r3, #24]
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	e000e100 	.word	0xe000e100
 80039d0:	e000ed00 	.word	0xe000ed00

080039d4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80039d8:	4b05      	ldr	r3, [pc, #20]	@ (80039f0 <SysTick_Handler+0x1c>)
 80039da:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80039dc:	f001 fd46 	bl	800546c <xTaskGetSchedulerState>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d001      	beq.n	80039ea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80039e6:	f002 fb3f 	bl	8006068 <xPortSysTickHandler>
  }
}
 80039ea:	bf00      	nop
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	e000e010 	.word	0xe000e010

080039f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80039f8:	2100      	movs	r1, #0
 80039fa:	f06f 0004 	mvn.w	r0, #4
 80039fe:	f7ff ffbf 	bl	8003980 <__NVIC_SetPriority>
#endif
}
 8003a02:	bf00      	nop
 8003a04:	bd80      	pop	{r7, pc}
	...

08003a08 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a0e:	f3ef 8305 	mrs	r3, IPSR
 8003a12:	603b      	str	r3, [r7, #0]
  return(result);
 8003a14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003a1a:	f06f 0305 	mvn.w	r3, #5
 8003a1e:	607b      	str	r3, [r7, #4]
 8003a20:	e00c      	b.n	8003a3c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003a22:	4b0a      	ldr	r3, [pc, #40]	@ (8003a4c <osKernelInitialize+0x44>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d105      	bne.n	8003a36 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003a2a:	4b08      	ldr	r3, [pc, #32]	@ (8003a4c <osKernelInitialize+0x44>)
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003a30:	2300      	movs	r3, #0
 8003a32:	607b      	str	r3, [r7, #4]
 8003a34:	e002      	b.n	8003a3c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003a36:	f04f 33ff 	mov.w	r3, #4294967295
 8003a3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a3c:	687b      	ldr	r3, [r7, #4]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	20000174 	.word	0x20000174

08003a50 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a56:	f3ef 8305 	mrs	r3, IPSR
 8003a5a:	603b      	str	r3, [r7, #0]
  return(result);
 8003a5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003a62:	f06f 0305 	mvn.w	r3, #5
 8003a66:	607b      	str	r3, [r7, #4]
 8003a68:	e010      	b.n	8003a8c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a98 <osKernelStart+0x48>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d109      	bne.n	8003a86 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003a72:	f7ff ffbf 	bl	80039f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003a76:	4b08      	ldr	r3, [pc, #32]	@ (8003a98 <osKernelStart+0x48>)
 8003a78:	2202      	movs	r2, #2
 8003a7a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003a7c:	f001 f892 	bl	8004ba4 <vTaskStartScheduler>
      stat = osOK;
 8003a80:	2300      	movs	r3, #0
 8003a82:	607b      	str	r3, [r7, #4]
 8003a84:	e002      	b.n	8003a8c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003a86:	f04f 33ff 	mov.w	r3, #4294967295
 8003a8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a8c:	687b      	ldr	r3, [r7, #4]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	20000174 	.word	0x20000174

08003a9c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b08e      	sub	sp, #56	@ 0x38
 8003aa0:	af04      	add	r7, sp, #16
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003aac:	f3ef 8305 	mrs	r3, IPSR
 8003ab0:	617b      	str	r3, [r7, #20]
  return(result);
 8003ab2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d17e      	bne.n	8003bb6 <osThreadNew+0x11a>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d07b      	beq.n	8003bb6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003abe:	2380      	movs	r3, #128	@ 0x80
 8003ac0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003ac2:	2318      	movs	r3, #24
 8003ac4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003aca:	f04f 33ff 	mov.w	r3, #4294967295
 8003ace:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d045      	beq.n	8003b62 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d002      	beq.n	8003ae4 <osThreadNew+0x48>
        name = attr->name;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d002      	beq.n	8003af2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d008      	beq.n	8003b0a <osThreadNew+0x6e>
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	2b38      	cmp	r3, #56	@ 0x38
 8003afc:	d805      	bhi.n	8003b0a <osThreadNew+0x6e>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <osThreadNew+0x72>
        return (NULL);
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	e054      	b.n	8003bb8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	089b      	lsrs	r3, r3, #2
 8003b1c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00e      	beq.n	8003b44 <osThreadNew+0xa8>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	2ba7      	cmp	r3, #167	@ 0xa7
 8003b2c:	d90a      	bls.n	8003b44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d006      	beq.n	8003b44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d002      	beq.n	8003b44 <osThreadNew+0xa8>
        mem = 1;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	61bb      	str	r3, [r7, #24]
 8003b42:	e010      	b.n	8003b66 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10c      	bne.n	8003b66 <osThreadNew+0xca>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d108      	bne.n	8003b66 <osThreadNew+0xca>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d104      	bne.n	8003b66 <osThreadNew+0xca>
          mem = 0;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	61bb      	str	r3, [r7, #24]
 8003b60:	e001      	b.n	8003b66 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003b62:	2300      	movs	r3, #0
 8003b64:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d110      	bne.n	8003b8e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b74:	9202      	str	r2, [sp, #8]
 8003b76:	9301      	str	r3, [sp, #4]
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	6a3a      	ldr	r2, [r7, #32]
 8003b80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f000 fe1a 	bl	80047bc <xTaskCreateStatic>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	613b      	str	r3, [r7, #16]
 8003b8c:	e013      	b.n	8003bb6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d110      	bne.n	8003bb6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003b94:	6a3b      	ldr	r3, [r7, #32]
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	f107 0310 	add.w	r3, r7, #16
 8003b9c:	9301      	str	r3, [sp, #4]
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 fe68 	bl	800487c <xTaskCreate>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d001      	beq.n	8003bb6 <osThreadNew+0x11a>
            hTask = NULL;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003bb6:	693b      	ldr	r3, [r7, #16]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3728      	adds	r7, #40	@ 0x28
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bc8:	f3ef 8305 	mrs	r3, IPSR
 8003bcc:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <osDelay+0x1c>
    stat = osErrorISR;
 8003bd4:	f06f 0305 	mvn.w	r3, #5
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	e007      	b.n	8003bec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d002      	beq.n	8003bec <osDelay+0x2c>
      vTaskDelay(ticks);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 ffa6 	bl	8004b38 <vTaskDelay>
    }
  }

  return (stat);
 8003bec:	68fb      	ldr	r3, [r7, #12]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
	...

08003bf8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4a07      	ldr	r2, [pc, #28]	@ (8003c24 <vApplicationGetIdleTaskMemory+0x2c>)
 8003c08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	4a06      	ldr	r2, [pc, #24]	@ (8003c28 <vApplicationGetIdleTaskMemory+0x30>)
 8003c0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2280      	movs	r2, #128	@ 0x80
 8003c14:	601a      	str	r2, [r3, #0]
}
 8003c16:	bf00      	nop
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	20000178 	.word	0x20000178
 8003c28:	20000220 	.word	0x20000220

08003c2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4a07      	ldr	r2, [pc, #28]	@ (8003c58 <vApplicationGetTimerTaskMemory+0x2c>)
 8003c3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	4a06      	ldr	r2, [pc, #24]	@ (8003c5c <vApplicationGetTimerTaskMemory+0x30>)
 8003c42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c4a:	601a      	str	r2, [r3, #0]
}
 8003c4c:	bf00      	nop
 8003c4e:	3714      	adds	r7, #20
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	20000420 	.word	0x20000420
 8003c5c:	200004c8 	.word	0x200004c8

08003c60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f103 0208 	add.w	r2, r3, #8
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f04f 32ff 	mov.w	r2, #4294967295
 8003c78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f103 0208 	add.w	r2, r3, #8
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f103 0208 	add.w	r2, r3, #8
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b085      	sub	sp, #20
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
 8003cc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	1c5a      	adds	r2, r3, #1
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	601a      	str	r2, [r3, #0]
}
 8003cf6:	bf00      	nop
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d02:	b480      	push	{r7}
 8003d04:	b085      	sub	sp, #20
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
 8003d0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d18:	d103      	bne.n	8003d22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	60fb      	str	r3, [r7, #12]
 8003d20:	e00c      	b.n	8003d3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	3308      	adds	r3, #8
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	e002      	b.n	8003d30 <vListInsert+0x2e>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d2f6      	bcs.n	8003d2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	1c5a      	adds	r2, r3, #1
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	601a      	str	r2, [r3, #0]
}
 8003d68:	bf00      	nop
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6892      	ldr	r2, [r2, #8]
 8003d8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6852      	ldr	r2, [r2, #4]
 8003d94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d103      	bne.n	8003da8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	1e5a      	subs	r2, r3, #1
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3714      	adds	r7, #20
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10b      	bne.n	8003df4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003de0:	f383 8811 	msr	BASEPRI, r3
 8003de4:	f3bf 8f6f 	isb	sy
 8003de8:	f3bf 8f4f 	dsb	sy
 8003dec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003dee:	bf00      	nop
 8003df0:	bf00      	nop
 8003df2:	e7fd      	b.n	8003df0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003df4:	f002 f8a8 	bl	8005f48 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e00:	68f9      	ldr	r1, [r7, #12]
 8003e02:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003e04:	fb01 f303 	mul.w	r3, r1, r3
 8003e08:	441a      	add	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e24:	3b01      	subs	r3, #1
 8003e26:	68f9      	ldr	r1, [r7, #12]
 8003e28:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003e2a:	fb01 f303 	mul.w	r3, r1, r3
 8003e2e:	441a      	add	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	22ff      	movs	r2, #255	@ 0xff
 8003e38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	22ff      	movs	r2, #255	@ 0xff
 8003e40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d114      	bne.n	8003e74 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d01a      	beq.n	8003e88 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	3310      	adds	r3, #16
 8003e56:	4618      	mov	r0, r3
 8003e58:	f001 f942 	bl	80050e0 <xTaskRemoveFromEventList>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d012      	beq.n	8003e88 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003e62:	4b0d      	ldr	r3, [pc, #52]	@ (8003e98 <xQueueGenericReset+0xd0>)
 8003e64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	f3bf 8f4f 	dsb	sy
 8003e6e:	f3bf 8f6f 	isb	sy
 8003e72:	e009      	b.n	8003e88 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	3310      	adds	r3, #16
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7ff fef1 	bl	8003c60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	3324      	adds	r3, #36	@ 0x24
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7ff feec 	bl	8003c60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003e88:	f002 f890 	bl	8005fac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003e8c:	2301      	movs	r3, #1
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	e000ed04 	.word	0xe000ed04

08003e9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b08e      	sub	sp, #56	@ 0x38
 8003ea0:	af02      	add	r7, sp, #8
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
 8003ea8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d10b      	bne.n	8003ec8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eb4:	f383 8811 	msr	BASEPRI, r3
 8003eb8:	f3bf 8f6f 	isb	sy
 8003ebc:	f3bf 8f4f 	dsb	sy
 8003ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003ec2:	bf00      	nop
 8003ec4:	bf00      	nop
 8003ec6:	e7fd      	b.n	8003ec4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10b      	bne.n	8003ee6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed2:	f383 8811 	msr	BASEPRI, r3
 8003ed6:	f3bf 8f6f 	isb	sy
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003ee0:	bf00      	nop
 8003ee2:	bf00      	nop
 8003ee4:	e7fd      	b.n	8003ee2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d002      	beq.n	8003ef2 <xQueueGenericCreateStatic+0x56>
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <xQueueGenericCreateStatic+0x5a>
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e000      	b.n	8003ef8 <xQueueGenericCreateStatic+0x5c>
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10b      	bne.n	8003f14 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f00:	f383 8811 	msr	BASEPRI, r3
 8003f04:	f3bf 8f6f 	isb	sy
 8003f08:	f3bf 8f4f 	dsb	sy
 8003f0c:	623b      	str	r3, [r7, #32]
}
 8003f0e:	bf00      	nop
 8003f10:	bf00      	nop
 8003f12:	e7fd      	b.n	8003f10 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d102      	bne.n	8003f20 <xQueueGenericCreateStatic+0x84>
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <xQueueGenericCreateStatic+0x88>
 8003f20:	2301      	movs	r3, #1
 8003f22:	e000      	b.n	8003f26 <xQueueGenericCreateStatic+0x8a>
 8003f24:	2300      	movs	r3, #0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10b      	bne.n	8003f42 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f2e:	f383 8811 	msr	BASEPRI, r3
 8003f32:	f3bf 8f6f 	isb	sy
 8003f36:	f3bf 8f4f 	dsb	sy
 8003f3a:	61fb      	str	r3, [r7, #28]
}
 8003f3c:	bf00      	nop
 8003f3e:	bf00      	nop
 8003f40:	e7fd      	b.n	8003f3e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003f42:	2350      	movs	r3, #80	@ 0x50
 8003f44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	2b50      	cmp	r3, #80	@ 0x50
 8003f4a:	d00b      	beq.n	8003f64 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f50:	f383 8811 	msr	BASEPRI, r3
 8003f54:	f3bf 8f6f 	isb	sy
 8003f58:	f3bf 8f4f 	dsb	sy
 8003f5c:	61bb      	str	r3, [r7, #24]
}
 8003f5e:	bf00      	nop
 8003f60:	bf00      	nop
 8003f62:	e7fd      	b.n	8003f60 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003f64:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00d      	beq.n	8003f8c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f78:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	4613      	mov	r3, r2
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	68b9      	ldr	r1, [r7, #8]
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 f805 	bl	8003f96 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3730      	adds	r7, #48	@ 0x30
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b084      	sub	sp, #16
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	60f8      	str	r0, [r7, #12]
 8003f9e:	60b9      	str	r1, [r7, #8]
 8003fa0:	607a      	str	r2, [r7, #4]
 8003fa2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d103      	bne.n	8003fb2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	e002      	b.n	8003fb8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	69b8      	ldr	r0, [r7, #24]
 8003fc8:	f7ff fefe 	bl	8003dc8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	78fa      	ldrb	r2, [r7, #3]
 8003fd0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003fd4:	bf00      	nop
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08e      	sub	sp, #56	@ 0x38
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
 8003fe8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003fea:	2300      	movs	r3, #0
 8003fec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10b      	bne.n	8004010 <xQueueGenericSend+0x34>
	__asm volatile
 8003ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ffc:	f383 8811 	msr	BASEPRI, r3
 8004000:	f3bf 8f6f 	isb	sy
 8004004:	f3bf 8f4f 	dsb	sy
 8004008:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800400a:	bf00      	nop
 800400c:	bf00      	nop
 800400e:	e7fd      	b.n	800400c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d103      	bne.n	800401e <xQueueGenericSend+0x42>
 8004016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <xQueueGenericSend+0x46>
 800401e:	2301      	movs	r3, #1
 8004020:	e000      	b.n	8004024 <xQueueGenericSend+0x48>
 8004022:	2300      	movs	r3, #0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10b      	bne.n	8004040 <xQueueGenericSend+0x64>
	__asm volatile
 8004028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800402c:	f383 8811 	msr	BASEPRI, r3
 8004030:	f3bf 8f6f 	isb	sy
 8004034:	f3bf 8f4f 	dsb	sy
 8004038:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800403a:	bf00      	nop
 800403c:	bf00      	nop
 800403e:	e7fd      	b.n	800403c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	2b02      	cmp	r3, #2
 8004044:	d103      	bne.n	800404e <xQueueGenericSend+0x72>
 8004046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800404a:	2b01      	cmp	r3, #1
 800404c:	d101      	bne.n	8004052 <xQueueGenericSend+0x76>
 800404e:	2301      	movs	r3, #1
 8004050:	e000      	b.n	8004054 <xQueueGenericSend+0x78>
 8004052:	2300      	movs	r3, #0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10b      	bne.n	8004070 <xQueueGenericSend+0x94>
	__asm volatile
 8004058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800405c:	f383 8811 	msr	BASEPRI, r3
 8004060:	f3bf 8f6f 	isb	sy
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	623b      	str	r3, [r7, #32]
}
 800406a:	bf00      	nop
 800406c:	bf00      	nop
 800406e:	e7fd      	b.n	800406c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004070:	f001 f9fc 	bl	800546c <xTaskGetSchedulerState>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d102      	bne.n	8004080 <xQueueGenericSend+0xa4>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <xQueueGenericSend+0xa8>
 8004080:	2301      	movs	r3, #1
 8004082:	e000      	b.n	8004086 <xQueueGenericSend+0xaa>
 8004084:	2300      	movs	r3, #0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10b      	bne.n	80040a2 <xQueueGenericSend+0xc6>
	__asm volatile
 800408a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800408e:	f383 8811 	msr	BASEPRI, r3
 8004092:	f3bf 8f6f 	isb	sy
 8004096:	f3bf 8f4f 	dsb	sy
 800409a:	61fb      	str	r3, [r7, #28]
}
 800409c:	bf00      	nop
 800409e:	bf00      	nop
 80040a0:	e7fd      	b.n	800409e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80040a2:	f001 ff51 	bl	8005f48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d302      	bcc.n	80040b8 <xQueueGenericSend+0xdc>
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d129      	bne.n	800410c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	68b9      	ldr	r1, [r7, #8]
 80040bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040be:	f000 fa0f 	bl	80044e0 <prvCopyDataToQueue>
 80040c2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d010      	beq.n	80040ee <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ce:	3324      	adds	r3, #36	@ 0x24
 80040d0:	4618      	mov	r0, r3
 80040d2:	f001 f805 	bl	80050e0 <xTaskRemoveFromEventList>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d013      	beq.n	8004104 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80040dc:	4b3f      	ldr	r3, [pc, #252]	@ (80041dc <xQueueGenericSend+0x200>)
 80040de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	f3bf 8f4f 	dsb	sy
 80040e8:	f3bf 8f6f 	isb	sy
 80040ec:	e00a      	b.n	8004104 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80040ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d007      	beq.n	8004104 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80040f4:	4b39      	ldr	r3, [pc, #228]	@ (80041dc <xQueueGenericSend+0x200>)
 80040f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	f3bf 8f4f 	dsb	sy
 8004100:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004104:	f001 ff52 	bl	8005fac <vPortExitCritical>
				return pdPASS;
 8004108:	2301      	movs	r3, #1
 800410a:	e063      	b.n	80041d4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d103      	bne.n	800411a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004112:	f001 ff4b 	bl	8005fac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004116:	2300      	movs	r3, #0
 8004118:	e05c      	b.n	80041d4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800411a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800411c:	2b00      	cmp	r3, #0
 800411e:	d106      	bne.n	800412e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004120:	f107 0314 	add.w	r3, r7, #20
 8004124:	4618      	mov	r0, r3
 8004126:	f001 f83f 	bl	80051a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800412a:	2301      	movs	r3, #1
 800412c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800412e:	f001 ff3d 	bl	8005fac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004132:	f000 fda7 	bl	8004c84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004136:	f001 ff07 	bl	8005f48 <vPortEnterCritical>
 800413a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800413c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004140:	b25b      	sxtb	r3, r3
 8004142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004146:	d103      	bne.n	8004150 <xQueueGenericSend+0x174>
 8004148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004152:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004156:	b25b      	sxtb	r3, r3
 8004158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415c:	d103      	bne.n	8004166 <xQueueGenericSend+0x18a>
 800415e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004166:	f001 ff21 	bl	8005fac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800416a:	1d3a      	adds	r2, r7, #4
 800416c:	f107 0314 	add.w	r3, r7, #20
 8004170:	4611      	mov	r1, r2
 8004172:	4618      	mov	r0, r3
 8004174:	f001 f82e 	bl	80051d4 <xTaskCheckForTimeOut>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d124      	bne.n	80041c8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800417e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004180:	f000 faa6 	bl	80046d0 <prvIsQueueFull>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d018      	beq.n	80041bc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800418a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800418c:	3310      	adds	r3, #16
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	4611      	mov	r1, r2
 8004192:	4618      	mov	r0, r3
 8004194:	f000 ff52 	bl	800503c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004198:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800419a:	f000 fa31 	bl	8004600 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800419e:	f000 fd7f 	bl	8004ca0 <xTaskResumeAll>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f47f af7c 	bne.w	80040a2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80041aa:	4b0c      	ldr	r3, [pc, #48]	@ (80041dc <xQueueGenericSend+0x200>)
 80041ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041b0:	601a      	str	r2, [r3, #0]
 80041b2:	f3bf 8f4f 	dsb	sy
 80041b6:	f3bf 8f6f 	isb	sy
 80041ba:	e772      	b.n	80040a2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80041bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80041be:	f000 fa1f 	bl	8004600 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80041c2:	f000 fd6d 	bl	8004ca0 <xTaskResumeAll>
 80041c6:	e76c      	b.n	80040a2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80041c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80041ca:	f000 fa19 	bl	8004600 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041ce:	f000 fd67 	bl	8004ca0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80041d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3738      	adds	r7, #56	@ 0x38
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	e000ed04 	.word	0xe000ed04

080041e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b090      	sub	sp, #64	@ 0x40
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
 80041ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80041f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10b      	bne.n	8004210 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80041f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041fc:	f383 8811 	msr	BASEPRI, r3
 8004200:	f3bf 8f6f 	isb	sy
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800420a:	bf00      	nop
 800420c:	bf00      	nop
 800420e:	e7fd      	b.n	800420c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d103      	bne.n	800421e <xQueueGenericSendFromISR+0x3e>
 8004216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <xQueueGenericSendFromISR+0x42>
 800421e:	2301      	movs	r3, #1
 8004220:	e000      	b.n	8004224 <xQueueGenericSendFromISR+0x44>
 8004222:	2300      	movs	r3, #0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10b      	bne.n	8004240 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800422c:	f383 8811 	msr	BASEPRI, r3
 8004230:	f3bf 8f6f 	isb	sy
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800423a:	bf00      	nop
 800423c:	bf00      	nop
 800423e:	e7fd      	b.n	800423c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	2b02      	cmp	r3, #2
 8004244:	d103      	bne.n	800424e <xQueueGenericSendFromISR+0x6e>
 8004246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800424a:	2b01      	cmp	r3, #1
 800424c:	d101      	bne.n	8004252 <xQueueGenericSendFromISR+0x72>
 800424e:	2301      	movs	r3, #1
 8004250:	e000      	b.n	8004254 <xQueueGenericSendFromISR+0x74>
 8004252:	2300      	movs	r3, #0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10b      	bne.n	8004270 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800425c:	f383 8811 	msr	BASEPRI, r3
 8004260:	f3bf 8f6f 	isb	sy
 8004264:	f3bf 8f4f 	dsb	sy
 8004268:	623b      	str	r3, [r7, #32]
}
 800426a:	bf00      	nop
 800426c:	bf00      	nop
 800426e:	e7fd      	b.n	800426c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004270:	f001 ff4a 	bl	8006108 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004274:	f3ef 8211 	mrs	r2, BASEPRI
 8004278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800427c:	f383 8811 	msr	BASEPRI, r3
 8004280:	f3bf 8f6f 	isb	sy
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	61fa      	str	r2, [r7, #28]
 800428a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800428c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800428e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004292:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004298:	429a      	cmp	r2, r3
 800429a:	d302      	bcc.n	80042a2 <xQueueGenericSendFromISR+0xc2>
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d12f      	bne.n	8004302 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80042a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80042a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	68b9      	ldr	r1, [r7, #8]
 80042b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80042b8:	f000 f912 	bl	80044e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80042bc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80042c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c4:	d112      	bne.n	80042ec <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d016      	beq.n	80042fc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042d0:	3324      	adds	r3, #36	@ 0x24
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 ff04 	bl	80050e0 <xTaskRemoveFromEventList>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00e      	beq.n	80042fc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00b      	beq.n	80042fc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	e007      	b.n	80042fc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80042ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80042f0:	3301      	adds	r3, #1
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	b25a      	sxtb	r2, r3
 80042f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80042fc:	2301      	movs	r3, #1
 80042fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004300:	e001      	b.n	8004306 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004302:	2300      	movs	r3, #0
 8004304:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004308:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004310:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004312:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004314:	4618      	mov	r0, r3
 8004316:	3740      	adds	r7, #64	@ 0x40
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b08c      	sub	sp, #48	@ 0x30
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004328:	2300      	movs	r3, #0
 800432a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10b      	bne.n	800434e <xQueueReceive+0x32>
	__asm volatile
 8004336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800433a:	f383 8811 	msr	BASEPRI, r3
 800433e:	f3bf 8f6f 	isb	sy
 8004342:	f3bf 8f4f 	dsb	sy
 8004346:	623b      	str	r3, [r7, #32]
}
 8004348:	bf00      	nop
 800434a:	bf00      	nop
 800434c:	e7fd      	b.n	800434a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d103      	bne.n	800435c <xQueueReceive+0x40>
 8004354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <xQueueReceive+0x44>
 800435c:	2301      	movs	r3, #1
 800435e:	e000      	b.n	8004362 <xQueueReceive+0x46>
 8004360:	2300      	movs	r3, #0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10b      	bne.n	800437e <xQueueReceive+0x62>
	__asm volatile
 8004366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800436a:	f383 8811 	msr	BASEPRI, r3
 800436e:	f3bf 8f6f 	isb	sy
 8004372:	f3bf 8f4f 	dsb	sy
 8004376:	61fb      	str	r3, [r7, #28]
}
 8004378:	bf00      	nop
 800437a:	bf00      	nop
 800437c:	e7fd      	b.n	800437a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800437e:	f001 f875 	bl	800546c <xTaskGetSchedulerState>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d102      	bne.n	800438e <xQueueReceive+0x72>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <xQueueReceive+0x76>
 800438e:	2301      	movs	r3, #1
 8004390:	e000      	b.n	8004394 <xQueueReceive+0x78>
 8004392:	2300      	movs	r3, #0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10b      	bne.n	80043b0 <xQueueReceive+0x94>
	__asm volatile
 8004398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800439c:	f383 8811 	msr	BASEPRI, r3
 80043a0:	f3bf 8f6f 	isb	sy
 80043a4:	f3bf 8f4f 	dsb	sy
 80043a8:	61bb      	str	r3, [r7, #24]
}
 80043aa:	bf00      	nop
 80043ac:	bf00      	nop
 80043ae:	e7fd      	b.n	80043ac <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80043b0:	f001 fdca 	bl	8005f48 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80043ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d01f      	beq.n	8004400 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80043c0:	68b9      	ldr	r1, [r7, #8]
 80043c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043c4:	f000 f8f6 	bl	80045b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80043c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ca:	1e5a      	subs	r2, r3, #1
 80043cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ce:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00f      	beq.n	80043f8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043da:	3310      	adds	r3, #16
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 fe7f 	bl	80050e0 <xTaskRemoveFromEventList>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d007      	beq.n	80043f8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80043e8:	4b3c      	ldr	r3, [pc, #240]	@ (80044dc <xQueueReceive+0x1c0>)
 80043ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	f3bf 8f4f 	dsb	sy
 80043f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80043f8:	f001 fdd8 	bl	8005fac <vPortExitCritical>
				return pdPASS;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e069      	b.n	80044d4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d103      	bne.n	800440e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004406:	f001 fdd1 	bl	8005fac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800440a:	2300      	movs	r3, #0
 800440c:	e062      	b.n	80044d4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800440e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004410:	2b00      	cmp	r3, #0
 8004412:	d106      	bne.n	8004422 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004414:	f107 0310 	add.w	r3, r7, #16
 8004418:	4618      	mov	r0, r3
 800441a:	f000 fec5 	bl	80051a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800441e:	2301      	movs	r3, #1
 8004420:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004422:	f001 fdc3 	bl	8005fac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004426:	f000 fc2d 	bl	8004c84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800442a:	f001 fd8d 	bl	8005f48 <vPortEnterCritical>
 800442e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004430:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004434:	b25b      	sxtb	r3, r3
 8004436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443a:	d103      	bne.n	8004444 <xQueueReceive+0x128>
 800443c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004446:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800444a:	b25b      	sxtb	r3, r3
 800444c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004450:	d103      	bne.n	800445a <xQueueReceive+0x13e>
 8004452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800445a:	f001 fda7 	bl	8005fac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800445e:	1d3a      	adds	r2, r7, #4
 8004460:	f107 0310 	add.w	r3, r7, #16
 8004464:	4611      	mov	r1, r2
 8004466:	4618      	mov	r0, r3
 8004468:	f000 feb4 	bl	80051d4 <xTaskCheckForTimeOut>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d123      	bne.n	80044ba <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004472:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004474:	f000 f916 	bl	80046a4 <prvIsQueueEmpty>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d017      	beq.n	80044ae <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800447e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004480:	3324      	adds	r3, #36	@ 0x24
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	4611      	mov	r1, r2
 8004486:	4618      	mov	r0, r3
 8004488:	f000 fdd8 	bl	800503c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800448c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800448e:	f000 f8b7 	bl	8004600 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004492:	f000 fc05 	bl	8004ca0 <xTaskResumeAll>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d189      	bne.n	80043b0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800449c:	4b0f      	ldr	r3, [pc, #60]	@ (80044dc <xQueueReceive+0x1c0>)
 800449e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	f3bf 8f6f 	isb	sy
 80044ac:	e780      	b.n	80043b0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80044ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044b0:	f000 f8a6 	bl	8004600 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044b4:	f000 fbf4 	bl	8004ca0 <xTaskResumeAll>
 80044b8:	e77a      	b.n	80043b0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80044ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044bc:	f000 f8a0 	bl	8004600 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044c0:	f000 fbee 	bl	8004ca0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044c6:	f000 f8ed 	bl	80046a4 <prvIsQueueEmpty>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f43f af6f 	beq.w	80043b0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80044d2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3730      	adds	r7, #48	@ 0x30
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	e000ed04 	.word	0xe000ed04

080044e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80044ec:	2300      	movs	r3, #0
 80044ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10d      	bne.n	800451a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d14d      	bne.n	80045a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	4618      	mov	r0, r3
 800450c:	f000 ffcc 	bl	80054a8 <xTaskPriorityDisinherit>
 8004510:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	609a      	str	r2, [r3, #8]
 8004518:	e043      	b.n	80045a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d119      	bne.n	8004554 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6858      	ldr	r0, [r3, #4]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004528:	461a      	mov	r2, r3
 800452a:	68b9      	ldr	r1, [r7, #8]
 800452c:	f002 f8a0 	bl	8006670 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004538:	441a      	add	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	429a      	cmp	r2, r3
 8004548:	d32b      	bcc.n	80045a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	605a      	str	r2, [r3, #4]
 8004552:	e026      	b.n	80045a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	68d8      	ldr	r0, [r3, #12]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455c:	461a      	mov	r2, r3
 800455e:	68b9      	ldr	r1, [r7, #8]
 8004560:	f002 f886 	bl	8006670 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456c:	425b      	negs	r3, r3
 800456e:	441a      	add	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	68da      	ldr	r2, [r3, #12]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	429a      	cmp	r2, r3
 800457e:	d207      	bcs.n	8004590 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004588:	425b      	negs	r3, r3
 800458a:	441a      	add	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b02      	cmp	r3, #2
 8004594:	d105      	bne.n	80045a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d002      	beq.n	80045a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	3b01      	subs	r3, #1
 80045a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1c5a      	adds	r2, r3, #1
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80045aa:	697b      	ldr	r3, [r7, #20]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3718      	adds	r7, #24
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d018      	beq.n	80045f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ce:	441a      	add	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68da      	ldr	r2, [r3, #12]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d303      	bcc.n	80045e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68d9      	ldr	r1, [r3, #12]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f0:	461a      	mov	r2, r3
 80045f2:	6838      	ldr	r0, [r7, #0]
 80045f4:	f002 f83c 	bl	8006670 <memcpy>
	}
}
 80045f8:	bf00      	nop
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004608:	f001 fc9e 	bl	8005f48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004612:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004614:	e011      	b.n	800463a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461a:	2b00      	cmp	r3, #0
 800461c:	d012      	beq.n	8004644 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	3324      	adds	r3, #36	@ 0x24
 8004622:	4618      	mov	r0, r3
 8004624:	f000 fd5c 	bl	80050e0 <xTaskRemoveFromEventList>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800462e:	f000 fe35 	bl	800529c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004632:	7bfb      	ldrb	r3, [r7, #15]
 8004634:	3b01      	subs	r3, #1
 8004636:	b2db      	uxtb	r3, r3
 8004638:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800463a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800463e:	2b00      	cmp	r3, #0
 8004640:	dce9      	bgt.n	8004616 <prvUnlockQueue+0x16>
 8004642:	e000      	b.n	8004646 <prvUnlockQueue+0x46>
					break;
 8004644:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	22ff      	movs	r2, #255	@ 0xff
 800464a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800464e:	f001 fcad 	bl	8005fac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004652:	f001 fc79 	bl	8005f48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800465c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800465e:	e011      	b.n	8004684 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d012      	beq.n	800468e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	3310      	adds	r3, #16
 800466c:	4618      	mov	r0, r3
 800466e:	f000 fd37 	bl	80050e0 <xTaskRemoveFromEventList>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004678:	f000 fe10 	bl	800529c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800467c:	7bbb      	ldrb	r3, [r7, #14]
 800467e:	3b01      	subs	r3, #1
 8004680:	b2db      	uxtb	r3, r3
 8004682:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004684:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004688:	2b00      	cmp	r3, #0
 800468a:	dce9      	bgt.n	8004660 <prvUnlockQueue+0x60>
 800468c:	e000      	b.n	8004690 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800468e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	22ff      	movs	r2, #255	@ 0xff
 8004694:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004698:	f001 fc88 	bl	8005fac <vPortExitCritical>
}
 800469c:	bf00      	nop
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80046ac:	f001 fc4c 	bl	8005f48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d102      	bne.n	80046be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80046b8:	2301      	movs	r3, #1
 80046ba:	60fb      	str	r3, [r7, #12]
 80046bc:	e001      	b.n	80046c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80046be:	2300      	movs	r3, #0
 80046c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80046c2:	f001 fc73 	bl	8005fac <vPortExitCritical>

	return xReturn;
 80046c6:	68fb      	ldr	r3, [r7, #12]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80046d8:	f001 fc36 	bl	8005f48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d102      	bne.n	80046ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80046e8:	2301      	movs	r3, #1
 80046ea:	60fb      	str	r3, [r7, #12]
 80046ec:	e001      	b.n	80046f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80046ee:	2300      	movs	r3, #0
 80046f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80046f2:	f001 fc5b 	bl	8005fac <vPortExitCritical>

	return xReturn;
 80046f6:	68fb      	ldr	r3, [r7, #12]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800470a:	2300      	movs	r3, #0
 800470c:	60fb      	str	r3, [r7, #12]
 800470e:	e014      	b.n	800473a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004710:	4a0f      	ldr	r2, [pc, #60]	@ (8004750 <vQueueAddToRegistry+0x50>)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10b      	bne.n	8004734 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800471c:	490c      	ldr	r1, [pc, #48]	@ (8004750 <vQueueAddToRegistry+0x50>)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004726:	4a0a      	ldr	r2, [pc, #40]	@ (8004750 <vQueueAddToRegistry+0x50>)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	4413      	add	r3, r2
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004732:	e006      	b.n	8004742 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	3301      	adds	r3, #1
 8004738:	60fb      	str	r3, [r7, #12]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2b07      	cmp	r3, #7
 800473e:	d9e7      	bls.n	8004710 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004740:	bf00      	nop
 8004742:	bf00      	nop
 8004744:	3714      	adds	r7, #20
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	200008c8 	.word	0x200008c8

08004754 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004764:	f001 fbf0 	bl	8005f48 <vPortEnterCritical>
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800476e:	b25b      	sxtb	r3, r3
 8004770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004774:	d103      	bne.n	800477e <vQueueWaitForMessageRestricted+0x2a>
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004784:	b25b      	sxtb	r3, r3
 8004786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800478a:	d103      	bne.n	8004794 <vQueueWaitForMessageRestricted+0x40>
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004794:	f001 fc0a 	bl	8005fac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800479c:	2b00      	cmp	r3, #0
 800479e:	d106      	bne.n	80047ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	3324      	adds	r3, #36	@ 0x24
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	68b9      	ldr	r1, [r7, #8]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 fc6d 	bl	8005088 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80047ae:	6978      	ldr	r0, [r7, #20]
 80047b0:	f7ff ff26 	bl	8004600 <prvUnlockQueue>
	}
 80047b4:	bf00      	nop
 80047b6:	3718      	adds	r7, #24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b08e      	sub	sp, #56	@ 0x38
 80047c0:	af04      	add	r7, sp, #16
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
 80047c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80047ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10b      	bne.n	80047e8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80047d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d4:	f383 8811 	msr	BASEPRI, r3
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	623b      	str	r3, [r7, #32]
}
 80047e2:	bf00      	nop
 80047e4:	bf00      	nop
 80047e6:	e7fd      	b.n	80047e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80047e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10b      	bne.n	8004806 <xTaskCreateStatic+0x4a>
	__asm volatile
 80047ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f2:	f383 8811 	msr	BASEPRI, r3
 80047f6:	f3bf 8f6f 	isb	sy
 80047fa:	f3bf 8f4f 	dsb	sy
 80047fe:	61fb      	str	r3, [r7, #28]
}
 8004800:	bf00      	nop
 8004802:	bf00      	nop
 8004804:	e7fd      	b.n	8004802 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004806:	23a8      	movs	r3, #168	@ 0xa8
 8004808:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	2ba8      	cmp	r3, #168	@ 0xa8
 800480e:	d00b      	beq.n	8004828 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	61bb      	str	r3, [r7, #24]
}
 8004822:	bf00      	nop
 8004824:	bf00      	nop
 8004826:	e7fd      	b.n	8004824 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004828:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800482a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800482c:	2b00      	cmp	r3, #0
 800482e:	d01e      	beq.n	800486e <xTaskCreateStatic+0xb2>
 8004830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004832:	2b00      	cmp	r3, #0
 8004834:	d01b      	beq.n	800486e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004838:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800483a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800483e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004842:	2202      	movs	r2, #2
 8004844:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004848:	2300      	movs	r3, #0
 800484a:	9303      	str	r3, [sp, #12]
 800484c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484e:	9302      	str	r3, [sp, #8]
 8004850:	f107 0314 	add.w	r3, r7, #20
 8004854:	9301      	str	r3, [sp, #4]
 8004856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	68b9      	ldr	r1, [r7, #8]
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 f851 	bl	8004908 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004866:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004868:	f000 f8f6 	bl	8004a58 <prvAddNewTaskToReadyList>
 800486c:	e001      	b.n	8004872 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800486e:	2300      	movs	r3, #0
 8004870:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004872:	697b      	ldr	r3, [r7, #20]
	}
 8004874:	4618      	mov	r0, r3
 8004876:	3728      	adds	r7, #40	@ 0x28
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800487c:	b580      	push	{r7, lr}
 800487e:	b08c      	sub	sp, #48	@ 0x30
 8004880:	af04      	add	r7, sp, #16
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	603b      	str	r3, [r7, #0]
 8004888:	4613      	mov	r3, r2
 800488a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800488c:	88fb      	ldrh	r3, [r7, #6]
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4618      	mov	r0, r3
 8004892:	f001 fc7b 	bl	800618c <pvPortMalloc>
 8004896:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00e      	beq.n	80048bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800489e:	20a8      	movs	r0, #168	@ 0xa8
 80048a0:	f001 fc74 	bl	800618c <pvPortMalloc>
 80048a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80048b2:	e005      	b.n	80048c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80048b4:	6978      	ldr	r0, [r7, #20]
 80048b6:	f001 fd37 	bl	8006328 <vPortFree>
 80048ba:	e001      	b.n	80048c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80048bc:	2300      	movs	r3, #0
 80048be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d017      	beq.n	80048f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80048ce:	88fa      	ldrh	r2, [r7, #6]
 80048d0:	2300      	movs	r3, #0
 80048d2:	9303      	str	r3, [sp, #12]
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	9302      	str	r3, [sp, #8]
 80048d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048da:	9301      	str	r3, [sp, #4]
 80048dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	68b9      	ldr	r1, [r7, #8]
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 f80f 	bl	8004908 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048ea:	69f8      	ldr	r0, [r7, #28]
 80048ec:	f000 f8b4 	bl	8004a58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80048f0:	2301      	movs	r3, #1
 80048f2:	61bb      	str	r3, [r7, #24]
 80048f4:	e002      	b.n	80048fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80048f6:	f04f 33ff 	mov.w	r3, #4294967295
 80048fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80048fc:	69bb      	ldr	r3, [r7, #24]
	}
 80048fe:	4618      	mov	r0, r3
 8004900:	3720      	adds	r7, #32
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
	...

08004908 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b088      	sub	sp, #32
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
 8004914:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004918:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	461a      	mov	r2, r3
 8004920:	21a5      	movs	r1, #165	@ 0xa5
 8004922:	f001 fe21 	bl	8006568 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004928:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004930:	3b01      	subs	r3, #1
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	f023 0307 	bic.w	r3, r3, #7
 800493e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	f003 0307 	and.w	r3, r3, #7
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00b      	beq.n	8004962 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800494a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800494e:	f383 8811 	msr	BASEPRI, r3
 8004952:	f3bf 8f6f 	isb	sy
 8004956:	f3bf 8f4f 	dsb	sy
 800495a:	617b      	str	r3, [r7, #20]
}
 800495c:	bf00      	nop
 800495e:	bf00      	nop
 8004960:	e7fd      	b.n	800495e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d01f      	beq.n	80049a8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004968:	2300      	movs	r3, #0
 800496a:	61fb      	str	r3, [r7, #28]
 800496c:	e012      	b.n	8004994 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	4413      	add	r3, r2
 8004974:	7819      	ldrb	r1, [r3, #0]
 8004976:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	4413      	add	r3, r2
 800497c:	3334      	adds	r3, #52	@ 0x34
 800497e:	460a      	mov	r2, r1
 8004980:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	4413      	add	r3, r2
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d006      	beq.n	800499c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	3301      	adds	r3, #1
 8004992:	61fb      	str	r3, [r7, #28]
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	2b0f      	cmp	r3, #15
 8004998:	d9e9      	bls.n	800496e <prvInitialiseNewTask+0x66>
 800499a:	e000      	b.n	800499e <prvInitialiseNewTask+0x96>
			{
				break;
 800499c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800499e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049a6:	e003      	b.n	80049b0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80049a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80049b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b2:	2b37      	cmp	r3, #55	@ 0x37
 80049b4:	d901      	bls.n	80049ba <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80049b6:	2337      	movs	r3, #55	@ 0x37
 80049b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80049ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049be:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80049c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049c4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80049c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c8:	2200      	movs	r2, #0
 80049ca:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80049cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ce:	3304      	adds	r3, #4
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff f965 	bl	8003ca0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80049d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d8:	3318      	adds	r3, #24
 80049da:	4618      	mov	r0, r3
 80049dc:	f7ff f960 	bl	8003ca0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80049e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049e4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80049ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80049f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049f4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80049f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f8:	2200      	movs	r2, #0
 80049fa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80049fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a08:	3354      	adds	r3, #84	@ 0x54
 8004a0a:	224c      	movs	r2, #76	@ 0x4c
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f001 fdaa 	bl	8006568 <memset>
 8004a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a16:	4a0d      	ldr	r2, [pc, #52]	@ (8004a4c <prvInitialiseNewTask+0x144>)
 8004a18:	659a      	str	r2, [r3, #88]	@ 0x58
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a1c:	4a0c      	ldr	r2, [pc, #48]	@ (8004a50 <prvInitialiseNewTask+0x148>)
 8004a1e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a22:	4a0c      	ldr	r2, [pc, #48]	@ (8004a54 <prvInitialiseNewTask+0x14c>)
 8004a24:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	68f9      	ldr	r1, [r7, #12]
 8004a2a:	69b8      	ldr	r0, [r7, #24]
 8004a2c:	f001 f95a 	bl	8005ce4 <pxPortInitialiseStack>
 8004a30:	4602      	mov	r2, r0
 8004a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a34:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d002      	beq.n	8004a42 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a42:	bf00      	nop
 8004a44:	3720      	adds	r7, #32
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	20004b5c 	.word	0x20004b5c
 8004a50:	20004bc4 	.word	0x20004bc4
 8004a54:	20004c2c 	.word	0x20004c2c

08004a58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004a60:	f001 fa72 	bl	8005f48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a64:	4b2d      	ldr	r3, [pc, #180]	@ (8004b1c <prvAddNewTaskToReadyList+0xc4>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	4a2c      	ldr	r2, [pc, #176]	@ (8004b1c <prvAddNewTaskToReadyList+0xc4>)
 8004a6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a6e:	4b2c      	ldr	r3, [pc, #176]	@ (8004b20 <prvAddNewTaskToReadyList+0xc8>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d109      	bne.n	8004a8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a76:	4a2a      	ldr	r2, [pc, #168]	@ (8004b20 <prvAddNewTaskToReadyList+0xc8>)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a7c:	4b27      	ldr	r3, [pc, #156]	@ (8004b1c <prvAddNewTaskToReadyList+0xc4>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d110      	bne.n	8004aa6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a84:	f000 fc2e 	bl	80052e4 <prvInitialiseTaskLists>
 8004a88:	e00d      	b.n	8004aa6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004a8a:	4b26      	ldr	r3, [pc, #152]	@ (8004b24 <prvAddNewTaskToReadyList+0xcc>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d109      	bne.n	8004aa6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a92:	4b23      	ldr	r3, [pc, #140]	@ (8004b20 <prvAddNewTaskToReadyList+0xc8>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d802      	bhi.n	8004aa6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004aa0:	4a1f      	ldr	r2, [pc, #124]	@ (8004b20 <prvAddNewTaskToReadyList+0xc8>)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004aa6:	4b20      	ldr	r3, [pc, #128]	@ (8004b28 <prvAddNewTaskToReadyList+0xd0>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	4a1e      	ldr	r2, [pc, #120]	@ (8004b28 <prvAddNewTaskToReadyList+0xd0>)
 8004aae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8004b28 <prvAddNewTaskToReadyList+0xd0>)
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004abc:	4b1b      	ldr	r3, [pc, #108]	@ (8004b2c <prvAddNewTaskToReadyList+0xd4>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d903      	bls.n	8004acc <prvAddNewTaskToReadyList+0x74>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac8:	4a18      	ldr	r2, [pc, #96]	@ (8004b2c <prvAddNewTaskToReadyList+0xd4>)
 8004aca:	6013      	str	r3, [r2, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4a15      	ldr	r2, [pc, #84]	@ (8004b30 <prvAddNewTaskToReadyList+0xd8>)
 8004ada:	441a      	add	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	3304      	adds	r3, #4
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	4610      	mov	r0, r2
 8004ae4:	f7ff f8e9 	bl	8003cba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ae8:	f001 fa60 	bl	8005fac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004aec:	4b0d      	ldr	r3, [pc, #52]	@ (8004b24 <prvAddNewTaskToReadyList+0xcc>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00e      	beq.n	8004b12 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004af4:	4b0a      	ldr	r3, [pc, #40]	@ (8004b20 <prvAddNewTaskToReadyList+0xc8>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d207      	bcs.n	8004b12 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004b02:	4b0c      	ldr	r3, [pc, #48]	@ (8004b34 <prvAddNewTaskToReadyList+0xdc>)
 8004b04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b12:	bf00      	nop
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	20000ddc 	.word	0x20000ddc
 8004b20:	20000908 	.word	0x20000908
 8004b24:	20000de8 	.word	0x20000de8
 8004b28:	20000df8 	.word	0x20000df8
 8004b2c:	20000de4 	.word	0x20000de4
 8004b30:	2000090c 	.word	0x2000090c
 8004b34:	e000ed04 	.word	0xe000ed04

08004b38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004b40:	2300      	movs	r3, #0
 8004b42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d018      	beq.n	8004b7c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004b4a:	4b14      	ldr	r3, [pc, #80]	@ (8004b9c <vTaskDelay+0x64>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00b      	beq.n	8004b6a <vTaskDelay+0x32>
	__asm volatile
 8004b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b56:	f383 8811 	msr	BASEPRI, r3
 8004b5a:	f3bf 8f6f 	isb	sy
 8004b5e:	f3bf 8f4f 	dsb	sy
 8004b62:	60bb      	str	r3, [r7, #8]
}
 8004b64:	bf00      	nop
 8004b66:	bf00      	nop
 8004b68:	e7fd      	b.n	8004b66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004b6a:	f000 f88b 	bl	8004c84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b6e:	2100      	movs	r1, #0
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 fd09 	bl	8005588 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004b76:	f000 f893 	bl	8004ca0 <xTaskResumeAll>
 8004b7a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d107      	bne.n	8004b92 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004b82:	4b07      	ldr	r3, [pc, #28]	@ (8004ba0 <vTaskDelay+0x68>)
 8004b84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	f3bf 8f4f 	dsb	sy
 8004b8e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b92:	bf00      	nop
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	20000e04 	.word	0x20000e04
 8004ba0:	e000ed04 	.word	0xe000ed04

08004ba4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b08a      	sub	sp, #40	@ 0x28
 8004ba8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004baa:	2300      	movs	r3, #0
 8004bac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004bb2:	463a      	mov	r2, r7
 8004bb4:	1d39      	adds	r1, r7, #4
 8004bb6:	f107 0308 	add.w	r3, r7, #8
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7ff f81c 	bl	8003bf8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004bc0:	6839      	ldr	r1, [r7, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	9202      	str	r2, [sp, #8]
 8004bc8:	9301      	str	r3, [sp, #4]
 8004bca:	2300      	movs	r3, #0
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	2300      	movs	r3, #0
 8004bd0:	460a      	mov	r2, r1
 8004bd2:	4924      	ldr	r1, [pc, #144]	@ (8004c64 <vTaskStartScheduler+0xc0>)
 8004bd4:	4824      	ldr	r0, [pc, #144]	@ (8004c68 <vTaskStartScheduler+0xc4>)
 8004bd6:	f7ff fdf1 	bl	80047bc <xTaskCreateStatic>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	4a23      	ldr	r2, [pc, #140]	@ (8004c6c <vTaskStartScheduler+0xc8>)
 8004bde:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004be0:	4b22      	ldr	r3, [pc, #136]	@ (8004c6c <vTaskStartScheduler+0xc8>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d002      	beq.n	8004bee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004be8:	2301      	movs	r3, #1
 8004bea:	617b      	str	r3, [r7, #20]
 8004bec:	e001      	b.n	8004bf2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d102      	bne.n	8004bfe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004bf8:	f000 fd1a 	bl	8005630 <xTimerCreateTimerTask>
 8004bfc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d11b      	bne.n	8004c3c <vTaskStartScheduler+0x98>
	__asm volatile
 8004c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	613b      	str	r3, [r7, #16]
}
 8004c16:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c18:	4b15      	ldr	r3, [pc, #84]	@ (8004c70 <vTaskStartScheduler+0xcc>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	3354      	adds	r3, #84	@ 0x54
 8004c1e:	4a15      	ldr	r2, [pc, #84]	@ (8004c74 <vTaskStartScheduler+0xd0>)
 8004c20:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c22:	4b15      	ldr	r3, [pc, #84]	@ (8004c78 <vTaskStartScheduler+0xd4>)
 8004c24:	f04f 32ff 	mov.w	r2, #4294967295
 8004c28:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c2a:	4b14      	ldr	r3, [pc, #80]	@ (8004c7c <vTaskStartScheduler+0xd8>)
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c30:	4b13      	ldr	r3, [pc, #76]	@ (8004c80 <vTaskStartScheduler+0xdc>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c36:	f001 f8e3 	bl	8005e00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c3a:	e00f      	b.n	8004c5c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c42:	d10b      	bne.n	8004c5c <vTaskStartScheduler+0xb8>
	__asm volatile
 8004c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c48:	f383 8811 	msr	BASEPRI, r3
 8004c4c:	f3bf 8f6f 	isb	sy
 8004c50:	f3bf 8f4f 	dsb	sy
 8004c54:	60fb      	str	r3, [r7, #12]
}
 8004c56:	bf00      	nop
 8004c58:	bf00      	nop
 8004c5a:	e7fd      	b.n	8004c58 <vTaskStartScheduler+0xb4>
}
 8004c5c:	bf00      	nop
 8004c5e:	3718      	adds	r7, #24
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	0800677c 	.word	0x0800677c
 8004c68:	080052b5 	.word	0x080052b5
 8004c6c:	20000e00 	.word	0x20000e00
 8004c70:	20000908 	.word	0x20000908
 8004c74:	20000010 	.word	0x20000010
 8004c78:	20000dfc 	.word	0x20000dfc
 8004c7c:	20000de8 	.word	0x20000de8
 8004c80:	20000de0 	.word	0x20000de0

08004c84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c84:	b480      	push	{r7}
 8004c86:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004c88:	4b04      	ldr	r3, [pc, #16]	@ (8004c9c <vTaskSuspendAll+0x18>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	4a03      	ldr	r2, [pc, #12]	@ (8004c9c <vTaskSuspendAll+0x18>)
 8004c90:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004c92:	bf00      	nop
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	20000e04 	.word	0x20000e04

08004ca0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004caa:	2300      	movs	r3, #0
 8004cac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004cae:	4b42      	ldr	r3, [pc, #264]	@ (8004db8 <xTaskResumeAll+0x118>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10b      	bne.n	8004cce <xTaskResumeAll+0x2e>
	__asm volatile
 8004cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cba:	f383 8811 	msr	BASEPRI, r3
 8004cbe:	f3bf 8f6f 	isb	sy
 8004cc2:	f3bf 8f4f 	dsb	sy
 8004cc6:	603b      	str	r3, [r7, #0]
}
 8004cc8:	bf00      	nop
 8004cca:	bf00      	nop
 8004ccc:	e7fd      	b.n	8004cca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004cce:	f001 f93b 	bl	8005f48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004cd2:	4b39      	ldr	r3, [pc, #228]	@ (8004db8 <xTaskResumeAll+0x118>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	4a37      	ldr	r2, [pc, #220]	@ (8004db8 <xTaskResumeAll+0x118>)
 8004cda:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cdc:	4b36      	ldr	r3, [pc, #216]	@ (8004db8 <xTaskResumeAll+0x118>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d162      	bne.n	8004daa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ce4:	4b35      	ldr	r3, [pc, #212]	@ (8004dbc <xTaskResumeAll+0x11c>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d05e      	beq.n	8004daa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cec:	e02f      	b.n	8004d4e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cee:	4b34      	ldr	r3, [pc, #208]	@ (8004dc0 <xTaskResumeAll+0x120>)
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	3318      	adds	r3, #24
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7ff f83a 	bl	8003d74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	3304      	adds	r3, #4
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff f835 	bl	8003d74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d0e:	4b2d      	ldr	r3, [pc, #180]	@ (8004dc4 <xTaskResumeAll+0x124>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d903      	bls.n	8004d1e <xTaskResumeAll+0x7e>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1a:	4a2a      	ldr	r2, [pc, #168]	@ (8004dc4 <xTaskResumeAll+0x124>)
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d22:	4613      	mov	r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4413      	add	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4a27      	ldr	r2, [pc, #156]	@ (8004dc8 <xTaskResumeAll+0x128>)
 8004d2c:	441a      	add	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	3304      	adds	r3, #4
 8004d32:	4619      	mov	r1, r3
 8004d34:	4610      	mov	r0, r2
 8004d36:	f7fe ffc0 	bl	8003cba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d3e:	4b23      	ldr	r3, [pc, #140]	@ (8004dcc <xTaskResumeAll+0x12c>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d302      	bcc.n	8004d4e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004d48:	4b21      	ldr	r3, [pc, #132]	@ (8004dd0 <xTaskResumeAll+0x130>)
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d4e:	4b1c      	ldr	r3, [pc, #112]	@ (8004dc0 <xTaskResumeAll+0x120>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1cb      	bne.n	8004cee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d001      	beq.n	8004d60 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d5c:	f000 fb66 	bl	800542c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004d60:	4b1c      	ldr	r3, [pc, #112]	@ (8004dd4 <xTaskResumeAll+0x134>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d010      	beq.n	8004d8e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d6c:	f000 f846 	bl	8004dfc <xTaskIncrementTick>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d002      	beq.n	8004d7c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004d76:	4b16      	ldr	r3, [pc, #88]	@ (8004dd0 <xTaskResumeAll+0x130>)
 8004d78:	2201      	movs	r2, #1
 8004d7a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1f1      	bne.n	8004d6c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004d88:	4b12      	ldr	r3, [pc, #72]	@ (8004dd4 <xTaskResumeAll+0x134>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d8e:	4b10      	ldr	r3, [pc, #64]	@ (8004dd0 <xTaskResumeAll+0x130>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d009      	beq.n	8004daa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d96:	2301      	movs	r3, #1
 8004d98:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004d9a:	4b0f      	ldr	r3, [pc, #60]	@ (8004dd8 <xTaskResumeAll+0x138>)
 8004d9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004da0:	601a      	str	r2, [r3, #0]
 8004da2:	f3bf 8f4f 	dsb	sy
 8004da6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004daa:	f001 f8ff 	bl	8005fac <vPortExitCritical>

	return xAlreadyYielded;
 8004dae:	68bb      	ldr	r3, [r7, #8]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	20000e04 	.word	0x20000e04
 8004dbc:	20000ddc 	.word	0x20000ddc
 8004dc0:	20000d9c 	.word	0x20000d9c
 8004dc4:	20000de4 	.word	0x20000de4
 8004dc8:	2000090c 	.word	0x2000090c
 8004dcc:	20000908 	.word	0x20000908
 8004dd0:	20000df0 	.word	0x20000df0
 8004dd4:	20000dec 	.word	0x20000dec
 8004dd8:	e000ed04 	.word	0xe000ed04

08004ddc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004de2:	4b05      	ldr	r3, [pc, #20]	@ (8004df8 <xTaskGetTickCount+0x1c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004de8:	687b      	ldr	r3, [r7, #4]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	20000de0 	.word	0x20000de0

08004dfc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004e02:	2300      	movs	r3, #0
 8004e04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e06:	4b4f      	ldr	r3, [pc, #316]	@ (8004f44 <xTaskIncrementTick+0x148>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f040 8090 	bne.w	8004f30 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e10:	4b4d      	ldr	r3, [pc, #308]	@ (8004f48 <xTaskIncrementTick+0x14c>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3301      	adds	r3, #1
 8004e16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e18:	4a4b      	ldr	r2, [pc, #300]	@ (8004f48 <xTaskIncrementTick+0x14c>)
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d121      	bne.n	8004e68 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e24:	4b49      	ldr	r3, [pc, #292]	@ (8004f4c <xTaskIncrementTick+0x150>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00b      	beq.n	8004e46 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e32:	f383 8811 	msr	BASEPRI, r3
 8004e36:	f3bf 8f6f 	isb	sy
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	603b      	str	r3, [r7, #0]
}
 8004e40:	bf00      	nop
 8004e42:	bf00      	nop
 8004e44:	e7fd      	b.n	8004e42 <xTaskIncrementTick+0x46>
 8004e46:	4b41      	ldr	r3, [pc, #260]	@ (8004f4c <xTaskIncrementTick+0x150>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	4b40      	ldr	r3, [pc, #256]	@ (8004f50 <xTaskIncrementTick+0x154>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a3e      	ldr	r2, [pc, #248]	@ (8004f4c <xTaskIncrementTick+0x150>)
 8004e52:	6013      	str	r3, [r2, #0]
 8004e54:	4a3e      	ldr	r2, [pc, #248]	@ (8004f50 <xTaskIncrementTick+0x154>)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6013      	str	r3, [r2, #0]
 8004e5a:	4b3e      	ldr	r3, [pc, #248]	@ (8004f54 <xTaskIncrementTick+0x158>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	3301      	adds	r3, #1
 8004e60:	4a3c      	ldr	r2, [pc, #240]	@ (8004f54 <xTaskIncrementTick+0x158>)
 8004e62:	6013      	str	r3, [r2, #0]
 8004e64:	f000 fae2 	bl	800542c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e68:	4b3b      	ldr	r3, [pc, #236]	@ (8004f58 <xTaskIncrementTick+0x15c>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d349      	bcc.n	8004f06 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e72:	4b36      	ldr	r3, [pc, #216]	@ (8004f4c <xTaskIncrementTick+0x150>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d104      	bne.n	8004e86 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e7c:	4b36      	ldr	r3, [pc, #216]	@ (8004f58 <xTaskIncrementTick+0x15c>)
 8004e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e82:	601a      	str	r2, [r3, #0]
					break;
 8004e84:	e03f      	b.n	8004f06 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e86:	4b31      	ldr	r3, [pc, #196]	@ (8004f4c <xTaskIncrementTick+0x150>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d203      	bcs.n	8004ea6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004e9e:	4a2e      	ldr	r2, [pc, #184]	@ (8004f58 <xTaskIncrementTick+0x15c>)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004ea4:	e02f      	b.n	8004f06 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	3304      	adds	r3, #4
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7fe ff62 	bl	8003d74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d004      	beq.n	8004ec2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	3318      	adds	r3, #24
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7fe ff59 	bl	8003d74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ec6:	4b25      	ldr	r3, [pc, #148]	@ (8004f5c <xTaskIncrementTick+0x160>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d903      	bls.n	8004ed6 <xTaskIncrementTick+0xda>
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed2:	4a22      	ldr	r2, [pc, #136]	@ (8004f5c <xTaskIncrementTick+0x160>)
 8004ed4:	6013      	str	r3, [r2, #0]
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eda:	4613      	mov	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4a1f      	ldr	r2, [pc, #124]	@ (8004f60 <xTaskIncrementTick+0x164>)
 8004ee4:	441a      	add	r2, r3
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	3304      	adds	r3, #4
 8004eea:	4619      	mov	r1, r3
 8004eec:	4610      	mov	r0, r2
 8004eee:	f7fe fee4 	bl	8003cba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ef6:	4b1b      	ldr	r3, [pc, #108]	@ (8004f64 <xTaskIncrementTick+0x168>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d3b8      	bcc.n	8004e72 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004f00:	2301      	movs	r3, #1
 8004f02:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f04:	e7b5      	b.n	8004e72 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f06:	4b17      	ldr	r3, [pc, #92]	@ (8004f64 <xTaskIncrementTick+0x168>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f0c:	4914      	ldr	r1, [pc, #80]	@ (8004f60 <xTaskIncrementTick+0x164>)
 8004f0e:	4613      	mov	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4413      	add	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	440b      	add	r3, r1
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d901      	bls.n	8004f22 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004f22:	4b11      	ldr	r3, [pc, #68]	@ (8004f68 <xTaskIncrementTick+0x16c>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d007      	beq.n	8004f3a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	e004      	b.n	8004f3a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004f30:	4b0e      	ldr	r3, [pc, #56]	@ (8004f6c <xTaskIncrementTick+0x170>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	3301      	adds	r3, #1
 8004f36:	4a0d      	ldr	r2, [pc, #52]	@ (8004f6c <xTaskIncrementTick+0x170>)
 8004f38:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004f3a:	697b      	ldr	r3, [r7, #20]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3718      	adds	r7, #24
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	20000e04 	.word	0x20000e04
 8004f48:	20000de0 	.word	0x20000de0
 8004f4c:	20000d94 	.word	0x20000d94
 8004f50:	20000d98 	.word	0x20000d98
 8004f54:	20000df4 	.word	0x20000df4
 8004f58:	20000dfc 	.word	0x20000dfc
 8004f5c:	20000de4 	.word	0x20000de4
 8004f60:	2000090c 	.word	0x2000090c
 8004f64:	20000908 	.word	0x20000908
 8004f68:	20000df0 	.word	0x20000df0
 8004f6c:	20000dec 	.word	0x20000dec

08004f70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f76:	4b2b      	ldr	r3, [pc, #172]	@ (8005024 <vTaskSwitchContext+0xb4>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004f7e:	4b2a      	ldr	r3, [pc, #168]	@ (8005028 <vTaskSwitchContext+0xb8>)
 8004f80:	2201      	movs	r2, #1
 8004f82:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004f84:	e047      	b.n	8005016 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004f86:	4b28      	ldr	r3, [pc, #160]	@ (8005028 <vTaskSwitchContext+0xb8>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f8c:	4b27      	ldr	r3, [pc, #156]	@ (800502c <vTaskSwitchContext+0xbc>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	60fb      	str	r3, [r7, #12]
 8004f92:	e011      	b.n	8004fb8 <vTaskSwitchContext+0x48>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10b      	bne.n	8004fb2 <vTaskSwitchContext+0x42>
	__asm volatile
 8004f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f9e:	f383 8811 	msr	BASEPRI, r3
 8004fa2:	f3bf 8f6f 	isb	sy
 8004fa6:	f3bf 8f4f 	dsb	sy
 8004faa:	607b      	str	r3, [r7, #4]
}
 8004fac:	bf00      	nop
 8004fae:	bf00      	nop
 8004fb0:	e7fd      	b.n	8004fae <vTaskSwitchContext+0x3e>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	491d      	ldr	r1, [pc, #116]	@ (8005030 <vTaskSwitchContext+0xc0>)
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	440b      	add	r3, r1
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d0e3      	beq.n	8004f94 <vTaskSwitchContext+0x24>
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4a16      	ldr	r2, [pc, #88]	@ (8005030 <vTaskSwitchContext+0xc0>)
 8004fd8:	4413      	add	r3, r2
 8004fda:	60bb      	str	r3, [r7, #8]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	605a      	str	r2, [r3, #4]
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	3308      	adds	r3, #8
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d104      	bne.n	8004ffc <vTaskSwitchContext+0x8c>
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	605a      	str	r2, [r3, #4]
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	4a0c      	ldr	r2, [pc, #48]	@ (8005034 <vTaskSwitchContext+0xc4>)
 8005004:	6013      	str	r3, [r2, #0]
 8005006:	4a09      	ldr	r2, [pc, #36]	@ (800502c <vTaskSwitchContext+0xbc>)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800500c:	4b09      	ldr	r3, [pc, #36]	@ (8005034 <vTaskSwitchContext+0xc4>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	3354      	adds	r3, #84	@ 0x54
 8005012:	4a09      	ldr	r2, [pc, #36]	@ (8005038 <vTaskSwitchContext+0xc8>)
 8005014:	6013      	str	r3, [r2, #0]
}
 8005016:	bf00      	nop
 8005018:	3714      	adds	r7, #20
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	20000e04 	.word	0x20000e04
 8005028:	20000df0 	.word	0x20000df0
 800502c:	20000de4 	.word	0x20000de4
 8005030:	2000090c 	.word	0x2000090c
 8005034:	20000908 	.word	0x20000908
 8005038:	20000010 	.word	0x20000010

0800503c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d10b      	bne.n	8005064 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800504c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005050:	f383 8811 	msr	BASEPRI, r3
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	60fb      	str	r3, [r7, #12]
}
 800505e:	bf00      	nop
 8005060:	bf00      	nop
 8005062:	e7fd      	b.n	8005060 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005064:	4b07      	ldr	r3, [pc, #28]	@ (8005084 <vTaskPlaceOnEventList+0x48>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	3318      	adds	r3, #24
 800506a:	4619      	mov	r1, r3
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f7fe fe48 	bl	8003d02 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005072:	2101      	movs	r1, #1
 8005074:	6838      	ldr	r0, [r7, #0]
 8005076:	f000 fa87 	bl	8005588 <prvAddCurrentTaskToDelayedList>
}
 800507a:	bf00      	nop
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	20000908 	.word	0x20000908

08005088 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10b      	bne.n	80050b2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800509a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800509e:	f383 8811 	msr	BASEPRI, r3
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	f3bf 8f4f 	dsb	sy
 80050aa:	617b      	str	r3, [r7, #20]
}
 80050ac:	bf00      	nop
 80050ae:	bf00      	nop
 80050b0:	e7fd      	b.n	80050ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050b2:	4b0a      	ldr	r3, [pc, #40]	@ (80050dc <vTaskPlaceOnEventListRestricted+0x54>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	3318      	adds	r3, #24
 80050b8:	4619      	mov	r1, r3
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f7fe fdfd 	bl	8003cba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d002      	beq.n	80050cc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80050c6:	f04f 33ff 	mov.w	r3, #4294967295
 80050ca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80050cc:	6879      	ldr	r1, [r7, #4]
 80050ce:	68b8      	ldr	r0, [r7, #8]
 80050d0:	f000 fa5a 	bl	8005588 <prvAddCurrentTaskToDelayedList>
	}
 80050d4:	bf00      	nop
 80050d6:	3718      	adds	r7, #24
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	20000908 	.word	0x20000908

080050e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10b      	bne.n	800510e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80050f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050fa:	f383 8811 	msr	BASEPRI, r3
 80050fe:	f3bf 8f6f 	isb	sy
 8005102:	f3bf 8f4f 	dsb	sy
 8005106:	60fb      	str	r3, [r7, #12]
}
 8005108:	bf00      	nop
 800510a:	bf00      	nop
 800510c:	e7fd      	b.n	800510a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	3318      	adds	r3, #24
 8005112:	4618      	mov	r0, r3
 8005114:	f7fe fe2e 	bl	8003d74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005118:	4b1d      	ldr	r3, [pc, #116]	@ (8005190 <xTaskRemoveFromEventList+0xb0>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d11d      	bne.n	800515c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	3304      	adds	r3, #4
 8005124:	4618      	mov	r0, r3
 8005126:	f7fe fe25 	bl	8003d74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800512e:	4b19      	ldr	r3, [pc, #100]	@ (8005194 <xTaskRemoveFromEventList+0xb4>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	429a      	cmp	r2, r3
 8005134:	d903      	bls.n	800513e <xTaskRemoveFromEventList+0x5e>
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800513a:	4a16      	ldr	r2, [pc, #88]	@ (8005194 <xTaskRemoveFromEventList+0xb4>)
 800513c:	6013      	str	r3, [r2, #0]
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005142:	4613      	mov	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4a13      	ldr	r2, [pc, #76]	@ (8005198 <xTaskRemoveFromEventList+0xb8>)
 800514c:	441a      	add	r2, r3
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	3304      	adds	r3, #4
 8005152:	4619      	mov	r1, r3
 8005154:	4610      	mov	r0, r2
 8005156:	f7fe fdb0 	bl	8003cba <vListInsertEnd>
 800515a:	e005      	b.n	8005168 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	3318      	adds	r3, #24
 8005160:	4619      	mov	r1, r3
 8005162:	480e      	ldr	r0, [pc, #56]	@ (800519c <xTaskRemoveFromEventList+0xbc>)
 8005164:	f7fe fda9 	bl	8003cba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800516c:	4b0c      	ldr	r3, [pc, #48]	@ (80051a0 <xTaskRemoveFromEventList+0xc0>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005172:	429a      	cmp	r2, r3
 8005174:	d905      	bls.n	8005182 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005176:	2301      	movs	r3, #1
 8005178:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800517a:	4b0a      	ldr	r3, [pc, #40]	@ (80051a4 <xTaskRemoveFromEventList+0xc4>)
 800517c:	2201      	movs	r2, #1
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	e001      	b.n	8005186 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005182:	2300      	movs	r3, #0
 8005184:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005186:	697b      	ldr	r3, [r7, #20]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3718      	adds	r7, #24
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	20000e04 	.word	0x20000e04
 8005194:	20000de4 	.word	0x20000de4
 8005198:	2000090c 	.word	0x2000090c
 800519c:	20000d9c 	.word	0x20000d9c
 80051a0:	20000908 	.word	0x20000908
 80051a4:	20000df0 	.word	0x20000df0

080051a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80051b0:	4b06      	ldr	r3, [pc, #24]	@ (80051cc <vTaskInternalSetTimeOutState+0x24>)
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80051b8:	4b05      	ldr	r3, [pc, #20]	@ (80051d0 <vTaskInternalSetTimeOutState+0x28>)
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	605a      	str	r2, [r3, #4]
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr
 80051cc:	20000df4 	.word	0x20000df4
 80051d0:	20000de0 	.word	0x20000de0

080051d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b088      	sub	sp, #32
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10b      	bne.n	80051fc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80051e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	613b      	str	r3, [r7, #16]
}
 80051f6:	bf00      	nop
 80051f8:	bf00      	nop
 80051fa:	e7fd      	b.n	80051f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10b      	bne.n	800521a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005206:	f383 8811 	msr	BASEPRI, r3
 800520a:	f3bf 8f6f 	isb	sy
 800520e:	f3bf 8f4f 	dsb	sy
 8005212:	60fb      	str	r3, [r7, #12]
}
 8005214:	bf00      	nop
 8005216:	bf00      	nop
 8005218:	e7fd      	b.n	8005216 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800521a:	f000 fe95 	bl	8005f48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800521e:	4b1d      	ldr	r3, [pc, #116]	@ (8005294 <xTaskCheckForTimeOut+0xc0>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005236:	d102      	bne.n	800523e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005238:	2300      	movs	r3, #0
 800523a:	61fb      	str	r3, [r7, #28]
 800523c:	e023      	b.n	8005286 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	4b15      	ldr	r3, [pc, #84]	@ (8005298 <xTaskCheckForTimeOut+0xc4>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	429a      	cmp	r2, r3
 8005248:	d007      	beq.n	800525a <xTaskCheckForTimeOut+0x86>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	69ba      	ldr	r2, [r7, #24]
 8005250:	429a      	cmp	r2, r3
 8005252:	d302      	bcc.n	800525a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005254:	2301      	movs	r3, #1
 8005256:	61fb      	str	r3, [r7, #28]
 8005258:	e015      	b.n	8005286 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	429a      	cmp	r2, r3
 8005262:	d20b      	bcs.n	800527c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	1ad2      	subs	r2, r2, r3
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f7ff ff99 	bl	80051a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005276:	2300      	movs	r3, #0
 8005278:	61fb      	str	r3, [r7, #28]
 800527a:	e004      	b.n	8005286 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	2200      	movs	r2, #0
 8005280:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005282:	2301      	movs	r3, #1
 8005284:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005286:	f000 fe91 	bl	8005fac <vPortExitCritical>

	return xReturn;
 800528a:	69fb      	ldr	r3, [r7, #28]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3720      	adds	r7, #32
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	20000de0 	.word	0x20000de0
 8005298:	20000df4 	.word	0x20000df4

0800529c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800529c:	b480      	push	{r7}
 800529e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80052a0:	4b03      	ldr	r3, [pc, #12]	@ (80052b0 <vTaskMissedYield+0x14>)
 80052a2:	2201      	movs	r2, #1
 80052a4:	601a      	str	r2, [r3, #0]
}
 80052a6:	bf00      	nop
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr
 80052b0:	20000df0 	.word	0x20000df0

080052b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80052bc:	f000 f852 	bl	8005364 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80052c0:	4b06      	ldr	r3, [pc, #24]	@ (80052dc <prvIdleTask+0x28>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d9f9      	bls.n	80052bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80052c8:	4b05      	ldr	r3, [pc, #20]	@ (80052e0 <prvIdleTask+0x2c>)
 80052ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052ce:	601a      	str	r2, [r3, #0]
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80052d8:	e7f0      	b.n	80052bc <prvIdleTask+0x8>
 80052da:	bf00      	nop
 80052dc:	2000090c 	.word	0x2000090c
 80052e0:	e000ed04 	.word	0xe000ed04

080052e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052ea:	2300      	movs	r3, #0
 80052ec:	607b      	str	r3, [r7, #4]
 80052ee:	e00c      	b.n	800530a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	4613      	mov	r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	4413      	add	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4a12      	ldr	r2, [pc, #72]	@ (8005344 <prvInitialiseTaskLists+0x60>)
 80052fc:	4413      	add	r3, r2
 80052fe:	4618      	mov	r0, r3
 8005300:	f7fe fcae 	bl	8003c60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	3301      	adds	r3, #1
 8005308:	607b      	str	r3, [r7, #4]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b37      	cmp	r3, #55	@ 0x37
 800530e:	d9ef      	bls.n	80052f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005310:	480d      	ldr	r0, [pc, #52]	@ (8005348 <prvInitialiseTaskLists+0x64>)
 8005312:	f7fe fca5 	bl	8003c60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005316:	480d      	ldr	r0, [pc, #52]	@ (800534c <prvInitialiseTaskLists+0x68>)
 8005318:	f7fe fca2 	bl	8003c60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800531c:	480c      	ldr	r0, [pc, #48]	@ (8005350 <prvInitialiseTaskLists+0x6c>)
 800531e:	f7fe fc9f 	bl	8003c60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005322:	480c      	ldr	r0, [pc, #48]	@ (8005354 <prvInitialiseTaskLists+0x70>)
 8005324:	f7fe fc9c 	bl	8003c60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005328:	480b      	ldr	r0, [pc, #44]	@ (8005358 <prvInitialiseTaskLists+0x74>)
 800532a:	f7fe fc99 	bl	8003c60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800532e:	4b0b      	ldr	r3, [pc, #44]	@ (800535c <prvInitialiseTaskLists+0x78>)
 8005330:	4a05      	ldr	r2, [pc, #20]	@ (8005348 <prvInitialiseTaskLists+0x64>)
 8005332:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005334:	4b0a      	ldr	r3, [pc, #40]	@ (8005360 <prvInitialiseTaskLists+0x7c>)
 8005336:	4a05      	ldr	r2, [pc, #20]	@ (800534c <prvInitialiseTaskLists+0x68>)
 8005338:	601a      	str	r2, [r3, #0]
}
 800533a:	bf00      	nop
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	2000090c 	.word	0x2000090c
 8005348:	20000d6c 	.word	0x20000d6c
 800534c:	20000d80 	.word	0x20000d80
 8005350:	20000d9c 	.word	0x20000d9c
 8005354:	20000db0 	.word	0x20000db0
 8005358:	20000dc8 	.word	0x20000dc8
 800535c:	20000d94 	.word	0x20000d94
 8005360:	20000d98 	.word	0x20000d98

08005364 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800536a:	e019      	b.n	80053a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800536c:	f000 fdec 	bl	8005f48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005370:	4b10      	ldr	r3, [pc, #64]	@ (80053b4 <prvCheckTasksWaitingTermination+0x50>)
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	3304      	adds	r3, #4
 800537c:	4618      	mov	r0, r3
 800537e:	f7fe fcf9 	bl	8003d74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005382:	4b0d      	ldr	r3, [pc, #52]	@ (80053b8 <prvCheckTasksWaitingTermination+0x54>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	3b01      	subs	r3, #1
 8005388:	4a0b      	ldr	r2, [pc, #44]	@ (80053b8 <prvCheckTasksWaitingTermination+0x54>)
 800538a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800538c:	4b0b      	ldr	r3, [pc, #44]	@ (80053bc <prvCheckTasksWaitingTermination+0x58>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	3b01      	subs	r3, #1
 8005392:	4a0a      	ldr	r2, [pc, #40]	@ (80053bc <prvCheckTasksWaitingTermination+0x58>)
 8005394:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005396:	f000 fe09 	bl	8005fac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f810 	bl	80053c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053a0:	4b06      	ldr	r3, [pc, #24]	@ (80053bc <prvCheckTasksWaitingTermination+0x58>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1e1      	bne.n	800536c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80053a8:	bf00      	nop
 80053aa:	bf00      	nop
 80053ac:	3708      	adds	r7, #8
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	20000db0 	.word	0x20000db0
 80053b8:	20000ddc 	.word	0x20000ddc
 80053bc:	20000dc4 	.word	0x20000dc4

080053c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	3354      	adds	r3, #84	@ 0x54
 80053cc:	4618      	mov	r0, r3
 80053ce:	f001 f8d3 	bl	8006578 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d108      	bne.n	80053ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 ffa1 	bl	8006328 <vPortFree>
				vPortFree( pxTCB );
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 ff9e 	bl	8006328 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80053ec:	e019      	b.n	8005422 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d103      	bne.n	8005400 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 ff95 	bl	8006328 <vPortFree>
	}
 80053fe:	e010      	b.n	8005422 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005406:	2b02      	cmp	r3, #2
 8005408:	d00b      	beq.n	8005422 <prvDeleteTCB+0x62>
	__asm volatile
 800540a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	60fb      	str	r3, [r7, #12]
}
 800541c:	bf00      	nop
 800541e:	bf00      	nop
 8005420:	e7fd      	b.n	800541e <prvDeleteTCB+0x5e>
	}
 8005422:	bf00      	nop
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
	...

0800542c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005432:	4b0c      	ldr	r3, [pc, #48]	@ (8005464 <prvResetNextTaskUnblockTime+0x38>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d104      	bne.n	8005446 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800543c:	4b0a      	ldr	r3, [pc, #40]	@ (8005468 <prvResetNextTaskUnblockTime+0x3c>)
 800543e:	f04f 32ff 	mov.w	r2, #4294967295
 8005442:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005444:	e008      	b.n	8005458 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005446:	4b07      	ldr	r3, [pc, #28]	@ (8005464 <prvResetNextTaskUnblockTime+0x38>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	4a04      	ldr	r2, [pc, #16]	@ (8005468 <prvResetNextTaskUnblockTime+0x3c>)
 8005456:	6013      	str	r3, [r2, #0]
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	20000d94 	.word	0x20000d94
 8005468:	20000dfc 	.word	0x20000dfc

0800546c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005472:	4b0b      	ldr	r3, [pc, #44]	@ (80054a0 <xTaskGetSchedulerState+0x34>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d102      	bne.n	8005480 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800547a:	2301      	movs	r3, #1
 800547c:	607b      	str	r3, [r7, #4]
 800547e:	e008      	b.n	8005492 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005480:	4b08      	ldr	r3, [pc, #32]	@ (80054a4 <xTaskGetSchedulerState+0x38>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d102      	bne.n	800548e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005488:	2302      	movs	r3, #2
 800548a:	607b      	str	r3, [r7, #4]
 800548c:	e001      	b.n	8005492 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800548e:	2300      	movs	r3, #0
 8005490:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005492:	687b      	ldr	r3, [r7, #4]
	}
 8005494:	4618      	mov	r0, r3
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr
 80054a0:	20000de8 	.word	0x20000de8
 80054a4:	20000e04 	.word	0x20000e04

080054a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80054b4:	2300      	movs	r3, #0
 80054b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d058      	beq.n	8005570 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80054be:	4b2f      	ldr	r3, [pc, #188]	@ (800557c <xTaskPriorityDisinherit+0xd4>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d00b      	beq.n	80054e0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80054c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054cc:	f383 8811 	msr	BASEPRI, r3
 80054d0:	f3bf 8f6f 	isb	sy
 80054d4:	f3bf 8f4f 	dsb	sy
 80054d8:	60fb      	str	r3, [r7, #12]
}
 80054da:	bf00      	nop
 80054dc:	bf00      	nop
 80054de:	e7fd      	b.n	80054dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10b      	bne.n	8005500 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80054e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ec:	f383 8811 	msr	BASEPRI, r3
 80054f0:	f3bf 8f6f 	isb	sy
 80054f4:	f3bf 8f4f 	dsb	sy
 80054f8:	60bb      	str	r3, [r7, #8]
}
 80054fa:	bf00      	nop
 80054fc:	bf00      	nop
 80054fe:	e7fd      	b.n	80054fc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005504:	1e5a      	subs	r2, r3, #1
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005512:	429a      	cmp	r2, r3
 8005514:	d02c      	beq.n	8005570 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800551a:	2b00      	cmp	r3, #0
 800551c:	d128      	bne.n	8005570 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	3304      	adds	r3, #4
 8005522:	4618      	mov	r0, r3
 8005524:	f7fe fc26 	bl	8003d74 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005534:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005540:	4b0f      	ldr	r3, [pc, #60]	@ (8005580 <xTaskPriorityDisinherit+0xd8>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	429a      	cmp	r2, r3
 8005546:	d903      	bls.n	8005550 <xTaskPriorityDisinherit+0xa8>
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554c:	4a0c      	ldr	r2, [pc, #48]	@ (8005580 <xTaskPriorityDisinherit+0xd8>)
 800554e:	6013      	str	r3, [r2, #0]
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005554:	4613      	mov	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4413      	add	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4a09      	ldr	r2, [pc, #36]	@ (8005584 <xTaskPriorityDisinherit+0xdc>)
 800555e:	441a      	add	r2, r3
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	3304      	adds	r3, #4
 8005564:	4619      	mov	r1, r3
 8005566:	4610      	mov	r0, r2
 8005568:	f7fe fba7 	bl	8003cba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800556c:	2301      	movs	r3, #1
 800556e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005570:	697b      	ldr	r3, [r7, #20]
	}
 8005572:	4618      	mov	r0, r3
 8005574:	3718      	adds	r7, #24
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	20000908 	.word	0x20000908
 8005580:	20000de4 	.word	0x20000de4
 8005584:	2000090c 	.word	0x2000090c

08005588 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005592:	4b21      	ldr	r3, [pc, #132]	@ (8005618 <prvAddCurrentTaskToDelayedList+0x90>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005598:	4b20      	ldr	r3, [pc, #128]	@ (800561c <prvAddCurrentTaskToDelayedList+0x94>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	3304      	adds	r3, #4
 800559e:	4618      	mov	r0, r3
 80055a0:	f7fe fbe8 	bl	8003d74 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055aa:	d10a      	bne.n	80055c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d007      	beq.n	80055c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055b2:	4b1a      	ldr	r3, [pc, #104]	@ (800561c <prvAddCurrentTaskToDelayedList+0x94>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	3304      	adds	r3, #4
 80055b8:	4619      	mov	r1, r3
 80055ba:	4819      	ldr	r0, [pc, #100]	@ (8005620 <prvAddCurrentTaskToDelayedList+0x98>)
 80055bc:	f7fe fb7d 	bl	8003cba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80055c0:	e026      	b.n	8005610 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4413      	add	r3, r2
 80055c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80055ca:	4b14      	ldr	r3, [pc, #80]	@ (800561c <prvAddCurrentTaskToDelayedList+0x94>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d209      	bcs.n	80055ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055da:	4b12      	ldr	r3, [pc, #72]	@ (8005624 <prvAddCurrentTaskToDelayedList+0x9c>)
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	4b0f      	ldr	r3, [pc, #60]	@ (800561c <prvAddCurrentTaskToDelayedList+0x94>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	3304      	adds	r3, #4
 80055e4:	4619      	mov	r1, r3
 80055e6:	4610      	mov	r0, r2
 80055e8:	f7fe fb8b 	bl	8003d02 <vListInsert>
}
 80055ec:	e010      	b.n	8005610 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055ee:	4b0e      	ldr	r3, [pc, #56]	@ (8005628 <prvAddCurrentTaskToDelayedList+0xa0>)
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	4b0a      	ldr	r3, [pc, #40]	@ (800561c <prvAddCurrentTaskToDelayedList+0x94>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	3304      	adds	r3, #4
 80055f8:	4619      	mov	r1, r3
 80055fa:	4610      	mov	r0, r2
 80055fc:	f7fe fb81 	bl	8003d02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005600:	4b0a      	ldr	r3, [pc, #40]	@ (800562c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68ba      	ldr	r2, [r7, #8]
 8005606:	429a      	cmp	r2, r3
 8005608:	d202      	bcs.n	8005610 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800560a:	4a08      	ldr	r2, [pc, #32]	@ (800562c <prvAddCurrentTaskToDelayedList+0xa4>)
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	6013      	str	r3, [r2, #0]
}
 8005610:	bf00      	nop
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	20000de0 	.word	0x20000de0
 800561c:	20000908 	.word	0x20000908
 8005620:	20000dc8 	.word	0x20000dc8
 8005624:	20000d98 	.word	0x20000d98
 8005628:	20000d94 	.word	0x20000d94
 800562c:	20000dfc 	.word	0x20000dfc

08005630 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b08a      	sub	sp, #40	@ 0x28
 8005634:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005636:	2300      	movs	r3, #0
 8005638:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800563a:	f000 fb13 	bl	8005c64 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800563e:	4b1d      	ldr	r3, [pc, #116]	@ (80056b4 <xTimerCreateTimerTask+0x84>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d021      	beq.n	800568a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005646:	2300      	movs	r3, #0
 8005648:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800564a:	2300      	movs	r3, #0
 800564c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800564e:	1d3a      	adds	r2, r7, #4
 8005650:	f107 0108 	add.w	r1, r7, #8
 8005654:	f107 030c 	add.w	r3, r7, #12
 8005658:	4618      	mov	r0, r3
 800565a:	f7fe fae7 	bl	8003c2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800565e:	6879      	ldr	r1, [r7, #4]
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	9202      	str	r2, [sp, #8]
 8005666:	9301      	str	r3, [sp, #4]
 8005668:	2302      	movs	r3, #2
 800566a:	9300      	str	r3, [sp, #0]
 800566c:	2300      	movs	r3, #0
 800566e:	460a      	mov	r2, r1
 8005670:	4911      	ldr	r1, [pc, #68]	@ (80056b8 <xTimerCreateTimerTask+0x88>)
 8005672:	4812      	ldr	r0, [pc, #72]	@ (80056bc <xTimerCreateTimerTask+0x8c>)
 8005674:	f7ff f8a2 	bl	80047bc <xTaskCreateStatic>
 8005678:	4603      	mov	r3, r0
 800567a:	4a11      	ldr	r2, [pc, #68]	@ (80056c0 <xTimerCreateTimerTask+0x90>)
 800567c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800567e:	4b10      	ldr	r3, [pc, #64]	@ (80056c0 <xTimerCreateTimerTask+0x90>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005686:	2301      	movs	r3, #1
 8005688:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10b      	bne.n	80056a8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	613b      	str	r3, [r7, #16]
}
 80056a2:	bf00      	nop
 80056a4:	bf00      	nop
 80056a6:	e7fd      	b.n	80056a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80056a8:	697b      	ldr	r3, [r7, #20]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3718      	adds	r7, #24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	20000e38 	.word	0x20000e38
 80056b8:	08006784 	.word	0x08006784
 80056bc:	080057fd 	.word	0x080057fd
 80056c0:	20000e3c 	.word	0x20000e3c

080056c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b08a      	sub	sp, #40	@ 0x28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
 80056d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80056d2:	2300      	movs	r3, #0
 80056d4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10b      	bne.n	80056f4 <xTimerGenericCommand+0x30>
	__asm volatile
 80056dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e0:	f383 8811 	msr	BASEPRI, r3
 80056e4:	f3bf 8f6f 	isb	sy
 80056e8:	f3bf 8f4f 	dsb	sy
 80056ec:	623b      	str	r3, [r7, #32]
}
 80056ee:	bf00      	nop
 80056f0:	bf00      	nop
 80056f2:	e7fd      	b.n	80056f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80056f4:	4b19      	ldr	r3, [pc, #100]	@ (800575c <xTimerGenericCommand+0x98>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d02a      	beq.n	8005752 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	2b05      	cmp	r3, #5
 800570c:	dc18      	bgt.n	8005740 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800570e:	f7ff fead 	bl	800546c <xTaskGetSchedulerState>
 8005712:	4603      	mov	r3, r0
 8005714:	2b02      	cmp	r3, #2
 8005716:	d109      	bne.n	800572c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005718:	4b10      	ldr	r3, [pc, #64]	@ (800575c <xTimerGenericCommand+0x98>)
 800571a:	6818      	ldr	r0, [r3, #0]
 800571c:	f107 0110 	add.w	r1, r7, #16
 8005720:	2300      	movs	r3, #0
 8005722:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005724:	f7fe fc5a 	bl	8003fdc <xQueueGenericSend>
 8005728:	6278      	str	r0, [r7, #36]	@ 0x24
 800572a:	e012      	b.n	8005752 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800572c:	4b0b      	ldr	r3, [pc, #44]	@ (800575c <xTimerGenericCommand+0x98>)
 800572e:	6818      	ldr	r0, [r3, #0]
 8005730:	f107 0110 	add.w	r1, r7, #16
 8005734:	2300      	movs	r3, #0
 8005736:	2200      	movs	r2, #0
 8005738:	f7fe fc50 	bl	8003fdc <xQueueGenericSend>
 800573c:	6278      	str	r0, [r7, #36]	@ 0x24
 800573e:	e008      	b.n	8005752 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005740:	4b06      	ldr	r3, [pc, #24]	@ (800575c <xTimerGenericCommand+0x98>)
 8005742:	6818      	ldr	r0, [r3, #0]
 8005744:	f107 0110 	add.w	r1, r7, #16
 8005748:	2300      	movs	r3, #0
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	f7fe fd48 	bl	80041e0 <xQueueGenericSendFromISR>
 8005750:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005754:	4618      	mov	r0, r3
 8005756:	3728      	adds	r7, #40	@ 0x28
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	20000e38 	.word	0x20000e38

08005760 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b088      	sub	sp, #32
 8005764:	af02      	add	r7, sp, #8
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800576a:	4b23      	ldr	r3, [pc, #140]	@ (80057f8 <prvProcessExpiredTimer+0x98>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	3304      	adds	r3, #4
 8005778:	4618      	mov	r0, r3
 800577a:	f7fe fafb 	bl	8003d74 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005784:	f003 0304 	and.w	r3, r3, #4
 8005788:	2b00      	cmp	r3, #0
 800578a:	d023      	beq.n	80057d4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	699a      	ldr	r2, [r3, #24]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	18d1      	adds	r1, r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	6978      	ldr	r0, [r7, #20]
 800579a:	f000 f8d5 	bl	8005948 <prvInsertTimerInActiveList>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d020      	beq.n	80057e6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80057a4:	2300      	movs	r3, #0
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	2300      	movs	r3, #0
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	2100      	movs	r1, #0
 80057ae:	6978      	ldr	r0, [r7, #20]
 80057b0:	f7ff ff88 	bl	80056c4 <xTimerGenericCommand>
 80057b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d114      	bne.n	80057e6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80057bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057c0:	f383 8811 	msr	BASEPRI, r3
 80057c4:	f3bf 8f6f 	isb	sy
 80057c8:	f3bf 8f4f 	dsb	sy
 80057cc:	60fb      	str	r3, [r7, #12]
}
 80057ce:	bf00      	nop
 80057d0:	bf00      	nop
 80057d2:	e7fd      	b.n	80057d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057da:	f023 0301 	bic.w	r3, r3, #1
 80057de:	b2da      	uxtb	r2, r3
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	6978      	ldr	r0, [r7, #20]
 80057ec:	4798      	blx	r3
}
 80057ee:	bf00      	nop
 80057f0:	3718      	adds	r7, #24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	20000e30 	.word	0x20000e30

080057fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005804:	f107 0308 	add.w	r3, r7, #8
 8005808:	4618      	mov	r0, r3
 800580a:	f000 f859 	bl	80058c0 <prvGetNextExpireTime>
 800580e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	4619      	mov	r1, r3
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f000 f805 	bl	8005824 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800581a:	f000 f8d7 	bl	80059cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800581e:	bf00      	nop
 8005820:	e7f0      	b.n	8005804 <prvTimerTask+0x8>
	...

08005824 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800582e:	f7ff fa29 	bl	8004c84 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005832:	f107 0308 	add.w	r3, r7, #8
 8005836:	4618      	mov	r0, r3
 8005838:	f000 f866 	bl	8005908 <prvSampleTimeNow>
 800583c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d130      	bne.n	80058a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10a      	bne.n	8005860 <prvProcessTimerOrBlockTask+0x3c>
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	429a      	cmp	r2, r3
 8005850:	d806      	bhi.n	8005860 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005852:	f7ff fa25 	bl	8004ca0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005856:	68f9      	ldr	r1, [r7, #12]
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f7ff ff81 	bl	8005760 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800585e:	e024      	b.n	80058aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d008      	beq.n	8005878 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005866:	4b13      	ldr	r3, [pc, #76]	@ (80058b4 <prvProcessTimerOrBlockTask+0x90>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d101      	bne.n	8005874 <prvProcessTimerOrBlockTask+0x50>
 8005870:	2301      	movs	r3, #1
 8005872:	e000      	b.n	8005876 <prvProcessTimerOrBlockTask+0x52>
 8005874:	2300      	movs	r3, #0
 8005876:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005878:	4b0f      	ldr	r3, [pc, #60]	@ (80058b8 <prvProcessTimerOrBlockTask+0x94>)
 800587a:	6818      	ldr	r0, [r3, #0]
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	683a      	ldr	r2, [r7, #0]
 8005884:	4619      	mov	r1, r3
 8005886:	f7fe ff65 	bl	8004754 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800588a:	f7ff fa09 	bl	8004ca0 <xTaskResumeAll>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10a      	bne.n	80058aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005894:	4b09      	ldr	r3, [pc, #36]	@ (80058bc <prvProcessTimerOrBlockTask+0x98>)
 8005896:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800589a:	601a      	str	r2, [r3, #0]
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	f3bf 8f6f 	isb	sy
}
 80058a4:	e001      	b.n	80058aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80058a6:	f7ff f9fb 	bl	8004ca0 <xTaskResumeAll>
}
 80058aa:	bf00      	nop
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	20000e34 	.word	0x20000e34
 80058b8:	20000e38 	.word	0x20000e38
 80058bc:	e000ed04 	.word	0xe000ed04

080058c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80058c8:	4b0e      	ldr	r3, [pc, #56]	@ (8005904 <prvGetNextExpireTime+0x44>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <prvGetNextExpireTime+0x16>
 80058d2:	2201      	movs	r2, #1
 80058d4:	e000      	b.n	80058d8 <prvGetNextExpireTime+0x18>
 80058d6:	2200      	movs	r2, #0
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d105      	bne.n	80058f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80058e4:	4b07      	ldr	r3, [pc, #28]	@ (8005904 <prvGetNextExpireTime+0x44>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	60fb      	str	r3, [r7, #12]
 80058ee:	e001      	b.n	80058f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80058f0:	2300      	movs	r3, #0
 80058f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80058f4:	68fb      	ldr	r3, [r7, #12]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3714      	adds	r7, #20
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	20000e30 	.word	0x20000e30

08005908 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005910:	f7ff fa64 	bl	8004ddc <xTaskGetTickCount>
 8005914:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005916:	4b0b      	ldr	r3, [pc, #44]	@ (8005944 <prvSampleTimeNow+0x3c>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	429a      	cmp	r2, r3
 800591e:	d205      	bcs.n	800592c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005920:	f000 f93a 	bl	8005b98 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	e002      	b.n	8005932 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005932:	4a04      	ldr	r2, [pc, #16]	@ (8005944 <prvSampleTimeNow+0x3c>)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005938:	68fb      	ldr	r3, [r7, #12]
}
 800593a:	4618      	mov	r0, r3
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	20000e40 	.word	0x20000e40

08005948 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
 8005954:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005956:	2300      	movs	r3, #0
 8005958:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	68ba      	ldr	r2, [r7, #8]
 800595e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	429a      	cmp	r2, r3
 800596c:	d812      	bhi.n	8005994 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	1ad2      	subs	r2, r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	429a      	cmp	r2, r3
 800597a:	d302      	bcc.n	8005982 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800597c:	2301      	movs	r3, #1
 800597e:	617b      	str	r3, [r7, #20]
 8005980:	e01b      	b.n	80059ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005982:	4b10      	ldr	r3, [pc, #64]	@ (80059c4 <prvInsertTimerInActiveList+0x7c>)
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	3304      	adds	r3, #4
 800598a:	4619      	mov	r1, r3
 800598c:	4610      	mov	r0, r2
 800598e:	f7fe f9b8 	bl	8003d02 <vListInsert>
 8005992:	e012      	b.n	80059ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	429a      	cmp	r2, r3
 800599a:	d206      	bcs.n	80059aa <prvInsertTimerInActiveList+0x62>
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d302      	bcc.n	80059aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80059a4:	2301      	movs	r3, #1
 80059a6:	617b      	str	r3, [r7, #20]
 80059a8:	e007      	b.n	80059ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80059aa:	4b07      	ldr	r3, [pc, #28]	@ (80059c8 <prvInsertTimerInActiveList+0x80>)
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	3304      	adds	r3, #4
 80059b2:	4619      	mov	r1, r3
 80059b4:	4610      	mov	r0, r2
 80059b6:	f7fe f9a4 	bl	8003d02 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80059ba:	697b      	ldr	r3, [r7, #20]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3718      	adds	r7, #24
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	20000e34 	.word	0x20000e34
 80059c8:	20000e30 	.word	0x20000e30

080059cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b08e      	sub	sp, #56	@ 0x38
 80059d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80059d2:	e0ce      	b.n	8005b72 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	da19      	bge.n	8005a0e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80059da:	1d3b      	adds	r3, r7, #4
 80059dc:	3304      	adds	r3, #4
 80059de:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80059e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10b      	bne.n	80059fe <prvProcessReceivedCommands+0x32>
	__asm volatile
 80059e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ea:	f383 8811 	msr	BASEPRI, r3
 80059ee:	f3bf 8f6f 	isb	sy
 80059f2:	f3bf 8f4f 	dsb	sy
 80059f6:	61fb      	str	r3, [r7, #28]
}
 80059f8:	bf00      	nop
 80059fa:	bf00      	nop
 80059fc:	e7fd      	b.n	80059fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80059fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a04:	6850      	ldr	r0, [r2, #4]
 8005a06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a08:	6892      	ldr	r2, [r2, #8]
 8005a0a:	4611      	mov	r1, r2
 8005a0c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f2c0 80ae 	blt.w	8005b72 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d004      	beq.n	8005a2c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a24:	3304      	adds	r3, #4
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7fe f9a4 	bl	8003d74 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a2c:	463b      	mov	r3, r7
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7ff ff6a 	bl	8005908 <prvSampleTimeNow>
 8005a34:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2b09      	cmp	r3, #9
 8005a3a:	f200 8097 	bhi.w	8005b6c <prvProcessReceivedCommands+0x1a0>
 8005a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a44 <prvProcessReceivedCommands+0x78>)
 8005a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a44:	08005a6d 	.word	0x08005a6d
 8005a48:	08005a6d 	.word	0x08005a6d
 8005a4c:	08005a6d 	.word	0x08005a6d
 8005a50:	08005ae3 	.word	0x08005ae3
 8005a54:	08005af7 	.word	0x08005af7
 8005a58:	08005b43 	.word	0x08005b43
 8005a5c:	08005a6d 	.word	0x08005a6d
 8005a60:	08005a6d 	.word	0x08005a6d
 8005a64:	08005ae3 	.word	0x08005ae3
 8005a68:	08005af7 	.word	0x08005af7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a72:	f043 0301 	orr.w	r3, r3, #1
 8005a76:	b2da      	uxtb	r2, r3
 8005a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	18d1      	adds	r1, r2, r3
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a8c:	f7ff ff5c 	bl	8005948 <prvInsertTimerInActiveList>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d06c      	beq.n	8005b70 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005aa4:	f003 0304 	and.w	r3, r3, #4
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d061      	beq.n	8005b70 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	441a      	add	r2, r3
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	9300      	str	r3, [sp, #0]
 8005ab8:	2300      	movs	r3, #0
 8005aba:	2100      	movs	r1, #0
 8005abc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005abe:	f7ff fe01 	bl	80056c4 <xTimerGenericCommand>
 8005ac2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005ac4:	6a3b      	ldr	r3, [r7, #32]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d152      	bne.n	8005b70 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ace:	f383 8811 	msr	BASEPRI, r3
 8005ad2:	f3bf 8f6f 	isb	sy
 8005ad6:	f3bf 8f4f 	dsb	sy
 8005ada:	61bb      	str	r3, [r7, #24]
}
 8005adc:	bf00      	nop
 8005ade:	bf00      	nop
 8005ae0:	e7fd      	b.n	8005ade <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ae8:	f023 0301 	bic.w	r3, r3, #1
 8005aec:	b2da      	uxtb	r2, r3
 8005aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005af4:	e03d      	b.n	8005b72 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005afc:	f043 0301 	orr.w	r3, r3, #1
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b04:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b0c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d10b      	bne.n	8005b2e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b1a:	f383 8811 	msr	BASEPRI, r3
 8005b1e:	f3bf 8f6f 	isb	sy
 8005b22:	f3bf 8f4f 	dsb	sy
 8005b26:	617b      	str	r3, [r7, #20]
}
 8005b28:	bf00      	nop
 8005b2a:	bf00      	nop
 8005b2c:	e7fd      	b.n	8005b2a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b30:	699a      	ldr	r2, [r3, #24]
 8005b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b34:	18d1      	adds	r1, r2, r3
 8005b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b3c:	f7ff ff04 	bl	8005948 <prvInsertTimerInActiveList>
					break;
 8005b40:	e017      	b.n	8005b72 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b48:	f003 0302 	and.w	r3, r3, #2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d103      	bne.n	8005b58 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005b50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b52:	f000 fbe9 	bl	8006328 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005b56:	e00c      	b.n	8005b72 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b5e:	f023 0301 	bic.w	r3, r3, #1
 8005b62:	b2da      	uxtb	r2, r3
 8005b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005b6a:	e002      	b.n	8005b72 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005b6c:	bf00      	nop
 8005b6e:	e000      	b.n	8005b72 <prvProcessReceivedCommands+0x1a6>
					break;
 8005b70:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b72:	4b08      	ldr	r3, [pc, #32]	@ (8005b94 <prvProcessReceivedCommands+0x1c8>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	1d39      	adds	r1, r7, #4
 8005b78:	2200      	movs	r2, #0
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fe fbce 	bl	800431c <xQueueReceive>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f47f af26 	bne.w	80059d4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005b88:	bf00      	nop
 8005b8a:	bf00      	nop
 8005b8c:	3730      	adds	r7, #48	@ 0x30
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	20000e38 	.word	0x20000e38

08005b98 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b088      	sub	sp, #32
 8005b9c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b9e:	e049      	b.n	8005c34 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ba0:	4b2e      	ldr	r3, [pc, #184]	@ (8005c5c <prvSwitchTimerLists+0xc4>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005baa:	4b2c      	ldr	r3, [pc, #176]	@ (8005c5c <prvSwitchTimerLists+0xc4>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	3304      	adds	r3, #4
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7fe f8db 	bl	8003d74 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005bcc:	f003 0304 	and.w	r3, r3, #4
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d02f      	beq.n	8005c34 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	4413      	add	r3, r2
 8005bdc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d90e      	bls.n	8005c04 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8005c5c <prvSwitchTimerLists+0xc4>)
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	3304      	adds	r3, #4
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	4610      	mov	r0, r2
 8005bfe:	f7fe f880 	bl	8003d02 <vListInsert>
 8005c02:	e017      	b.n	8005c34 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c04:	2300      	movs	r3, #0
 8005c06:	9300      	str	r3, [sp, #0]
 8005c08:	2300      	movs	r3, #0
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f7ff fd58 	bl	80056c4 <xTimerGenericCommand>
 8005c14:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10b      	bne.n	8005c34 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c20:	f383 8811 	msr	BASEPRI, r3
 8005c24:	f3bf 8f6f 	isb	sy
 8005c28:	f3bf 8f4f 	dsb	sy
 8005c2c:	603b      	str	r3, [r7, #0]
}
 8005c2e:	bf00      	nop
 8005c30:	bf00      	nop
 8005c32:	e7fd      	b.n	8005c30 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c34:	4b09      	ldr	r3, [pc, #36]	@ (8005c5c <prvSwitchTimerLists+0xc4>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1b0      	bne.n	8005ba0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005c3e:	4b07      	ldr	r3, [pc, #28]	@ (8005c5c <prvSwitchTimerLists+0xc4>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005c44:	4b06      	ldr	r3, [pc, #24]	@ (8005c60 <prvSwitchTimerLists+0xc8>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a04      	ldr	r2, [pc, #16]	@ (8005c5c <prvSwitchTimerLists+0xc4>)
 8005c4a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005c4c:	4a04      	ldr	r2, [pc, #16]	@ (8005c60 <prvSwitchTimerLists+0xc8>)
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	6013      	str	r3, [r2, #0]
}
 8005c52:	bf00      	nop
 8005c54:	3718      	adds	r7, #24
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	20000e30 	.word	0x20000e30
 8005c60:	20000e34 	.word	0x20000e34

08005c64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005c6a:	f000 f96d 	bl	8005f48 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005c6e:	4b15      	ldr	r3, [pc, #84]	@ (8005cc4 <prvCheckForValidListAndQueue+0x60>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d120      	bne.n	8005cb8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005c76:	4814      	ldr	r0, [pc, #80]	@ (8005cc8 <prvCheckForValidListAndQueue+0x64>)
 8005c78:	f7fd fff2 	bl	8003c60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005c7c:	4813      	ldr	r0, [pc, #76]	@ (8005ccc <prvCheckForValidListAndQueue+0x68>)
 8005c7e:	f7fd ffef 	bl	8003c60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005c82:	4b13      	ldr	r3, [pc, #76]	@ (8005cd0 <prvCheckForValidListAndQueue+0x6c>)
 8005c84:	4a10      	ldr	r2, [pc, #64]	@ (8005cc8 <prvCheckForValidListAndQueue+0x64>)
 8005c86:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005c88:	4b12      	ldr	r3, [pc, #72]	@ (8005cd4 <prvCheckForValidListAndQueue+0x70>)
 8005c8a:	4a10      	ldr	r2, [pc, #64]	@ (8005ccc <prvCheckForValidListAndQueue+0x68>)
 8005c8c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005c8e:	2300      	movs	r3, #0
 8005c90:	9300      	str	r3, [sp, #0]
 8005c92:	4b11      	ldr	r3, [pc, #68]	@ (8005cd8 <prvCheckForValidListAndQueue+0x74>)
 8005c94:	4a11      	ldr	r2, [pc, #68]	@ (8005cdc <prvCheckForValidListAndQueue+0x78>)
 8005c96:	2110      	movs	r1, #16
 8005c98:	200a      	movs	r0, #10
 8005c9a:	f7fe f8ff 	bl	8003e9c <xQueueGenericCreateStatic>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	4a08      	ldr	r2, [pc, #32]	@ (8005cc4 <prvCheckForValidListAndQueue+0x60>)
 8005ca2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005ca4:	4b07      	ldr	r3, [pc, #28]	@ (8005cc4 <prvCheckForValidListAndQueue+0x60>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d005      	beq.n	8005cb8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005cac:	4b05      	ldr	r3, [pc, #20]	@ (8005cc4 <prvCheckForValidListAndQueue+0x60>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	490b      	ldr	r1, [pc, #44]	@ (8005ce0 <prvCheckForValidListAndQueue+0x7c>)
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7fe fd24 	bl	8004700 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005cb8:	f000 f978 	bl	8005fac <vPortExitCritical>
}
 8005cbc:	bf00      	nop
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	20000e38 	.word	0x20000e38
 8005cc8:	20000e08 	.word	0x20000e08
 8005ccc:	20000e1c 	.word	0x20000e1c
 8005cd0:	20000e30 	.word	0x20000e30
 8005cd4:	20000e34 	.word	0x20000e34
 8005cd8:	20000ee4 	.word	0x20000ee4
 8005cdc:	20000e44 	.word	0x20000e44
 8005ce0:	0800678c 	.word	0x0800678c

08005ce4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	3b04      	subs	r3, #4
 8005cf4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005cfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	3b04      	subs	r3, #4
 8005d02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	f023 0201 	bic.w	r2, r3, #1
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	3b04      	subs	r3, #4
 8005d12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d14:	4a0c      	ldr	r2, [pc, #48]	@ (8005d48 <pxPortInitialiseStack+0x64>)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	3b14      	subs	r3, #20
 8005d1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	3b04      	subs	r3, #4
 8005d2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f06f 0202 	mvn.w	r2, #2
 8005d32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	3b20      	subs	r3, #32
 8005d38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3714      	adds	r7, #20
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	08005d4d 	.word	0x08005d4d

08005d4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005d52:	2300      	movs	r3, #0
 8005d54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005d56:	4b13      	ldr	r3, [pc, #76]	@ (8005da4 <prvTaskExitError+0x58>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d5e:	d00b      	beq.n	8005d78 <prvTaskExitError+0x2c>
	__asm volatile
 8005d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d64:	f383 8811 	msr	BASEPRI, r3
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	60fb      	str	r3, [r7, #12]
}
 8005d72:	bf00      	nop
 8005d74:	bf00      	nop
 8005d76:	e7fd      	b.n	8005d74 <prvTaskExitError+0x28>
	__asm volatile
 8005d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d7c:	f383 8811 	msr	BASEPRI, r3
 8005d80:	f3bf 8f6f 	isb	sy
 8005d84:	f3bf 8f4f 	dsb	sy
 8005d88:	60bb      	str	r3, [r7, #8]
}
 8005d8a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005d8c:	bf00      	nop
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d0fc      	beq.n	8005d8e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005d94:	bf00      	nop
 8005d96:	bf00      	nop
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	2000000c 	.word	0x2000000c
	...

08005db0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005db0:	4b07      	ldr	r3, [pc, #28]	@ (8005dd0 <pxCurrentTCBConst2>)
 8005db2:	6819      	ldr	r1, [r3, #0]
 8005db4:	6808      	ldr	r0, [r1, #0]
 8005db6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dba:	f380 8809 	msr	PSP, r0
 8005dbe:	f3bf 8f6f 	isb	sy
 8005dc2:	f04f 0000 	mov.w	r0, #0
 8005dc6:	f380 8811 	msr	BASEPRI, r0
 8005dca:	4770      	bx	lr
 8005dcc:	f3af 8000 	nop.w

08005dd0 <pxCurrentTCBConst2>:
 8005dd0:	20000908 	.word	0x20000908
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005dd4:	bf00      	nop
 8005dd6:	bf00      	nop

08005dd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005dd8:	4808      	ldr	r0, [pc, #32]	@ (8005dfc <prvPortStartFirstTask+0x24>)
 8005dda:	6800      	ldr	r0, [r0, #0]
 8005ddc:	6800      	ldr	r0, [r0, #0]
 8005dde:	f380 8808 	msr	MSP, r0
 8005de2:	f04f 0000 	mov.w	r0, #0
 8005de6:	f380 8814 	msr	CONTROL, r0
 8005dea:	b662      	cpsie	i
 8005dec:	b661      	cpsie	f
 8005dee:	f3bf 8f4f 	dsb	sy
 8005df2:	f3bf 8f6f 	isb	sy
 8005df6:	df00      	svc	0
 8005df8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005dfa:	bf00      	nop
 8005dfc:	e000ed08 	.word	0xe000ed08

08005e00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005e06:	4b47      	ldr	r3, [pc, #284]	@ (8005f24 <xPortStartScheduler+0x124>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a47      	ldr	r2, [pc, #284]	@ (8005f28 <xPortStartScheduler+0x128>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d10b      	bne.n	8005e28 <xPortStartScheduler+0x28>
	__asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	613b      	str	r3, [r7, #16]
}
 8005e22:	bf00      	nop
 8005e24:	bf00      	nop
 8005e26:	e7fd      	b.n	8005e24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005e28:	4b3e      	ldr	r3, [pc, #248]	@ (8005f24 <xPortStartScheduler+0x124>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a3f      	ldr	r2, [pc, #252]	@ (8005f2c <xPortStartScheduler+0x12c>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d10b      	bne.n	8005e4a <xPortStartScheduler+0x4a>
	__asm volatile
 8005e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e36:	f383 8811 	msr	BASEPRI, r3
 8005e3a:	f3bf 8f6f 	isb	sy
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	60fb      	str	r3, [r7, #12]
}
 8005e44:	bf00      	nop
 8005e46:	bf00      	nop
 8005e48:	e7fd      	b.n	8005e46 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005e4a:	4b39      	ldr	r3, [pc, #228]	@ (8005f30 <xPortStartScheduler+0x130>)
 8005e4c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	22ff      	movs	r2, #255	@ 0xff
 8005e5a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e64:	78fb      	ldrb	r3, [r7, #3]
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	4b31      	ldr	r3, [pc, #196]	@ (8005f34 <xPortStartScheduler+0x134>)
 8005e70:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e72:	4b31      	ldr	r3, [pc, #196]	@ (8005f38 <xPortStartScheduler+0x138>)
 8005e74:	2207      	movs	r2, #7
 8005e76:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e78:	e009      	b.n	8005e8e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005e7a:	4b2f      	ldr	r3, [pc, #188]	@ (8005f38 <xPortStartScheduler+0x138>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	4a2d      	ldr	r2, [pc, #180]	@ (8005f38 <xPortStartScheduler+0x138>)
 8005e82:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e84:	78fb      	ldrb	r3, [r7, #3]
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	005b      	lsls	r3, r3, #1
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e8e:	78fb      	ldrb	r3, [r7, #3]
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e96:	2b80      	cmp	r3, #128	@ 0x80
 8005e98:	d0ef      	beq.n	8005e7a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e9a:	4b27      	ldr	r3, [pc, #156]	@ (8005f38 <xPortStartScheduler+0x138>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f1c3 0307 	rsb	r3, r3, #7
 8005ea2:	2b04      	cmp	r3, #4
 8005ea4:	d00b      	beq.n	8005ebe <xPortStartScheduler+0xbe>
	__asm volatile
 8005ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eaa:	f383 8811 	msr	BASEPRI, r3
 8005eae:	f3bf 8f6f 	isb	sy
 8005eb2:	f3bf 8f4f 	dsb	sy
 8005eb6:	60bb      	str	r3, [r7, #8]
}
 8005eb8:	bf00      	nop
 8005eba:	bf00      	nop
 8005ebc:	e7fd      	b.n	8005eba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ebe:	4b1e      	ldr	r3, [pc, #120]	@ (8005f38 <xPortStartScheduler+0x138>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	021b      	lsls	r3, r3, #8
 8005ec4:	4a1c      	ldr	r2, [pc, #112]	@ (8005f38 <xPortStartScheduler+0x138>)
 8005ec6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8005f38 <xPortStartScheduler+0x138>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005ed0:	4a19      	ldr	r2, [pc, #100]	@ (8005f38 <xPortStartScheduler+0x138>)
 8005ed2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	b2da      	uxtb	r2, r3
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005edc:	4b17      	ldr	r3, [pc, #92]	@ (8005f3c <xPortStartScheduler+0x13c>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a16      	ldr	r2, [pc, #88]	@ (8005f3c <xPortStartScheduler+0x13c>)
 8005ee2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005ee6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ee8:	4b14      	ldr	r3, [pc, #80]	@ (8005f3c <xPortStartScheduler+0x13c>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a13      	ldr	r2, [pc, #76]	@ (8005f3c <xPortStartScheduler+0x13c>)
 8005eee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005ef2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005ef4:	f000 f8da 	bl	80060ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ef8:	4b11      	ldr	r3, [pc, #68]	@ (8005f40 <xPortStartScheduler+0x140>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005efe:	f000 f8f9 	bl	80060f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005f02:	4b10      	ldr	r3, [pc, #64]	@ (8005f44 <xPortStartScheduler+0x144>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a0f      	ldr	r2, [pc, #60]	@ (8005f44 <xPortStartScheduler+0x144>)
 8005f08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005f0c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005f0e:	f7ff ff63 	bl	8005dd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005f12:	f7ff f82d 	bl	8004f70 <vTaskSwitchContext>
	prvTaskExitError();
 8005f16:	f7ff ff19 	bl	8005d4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3718      	adds	r7, #24
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	e000ed00 	.word	0xe000ed00
 8005f28:	410fc271 	.word	0x410fc271
 8005f2c:	410fc270 	.word	0x410fc270
 8005f30:	e000e400 	.word	0xe000e400
 8005f34:	20000f34 	.word	0x20000f34
 8005f38:	20000f38 	.word	0x20000f38
 8005f3c:	e000ed20 	.word	0xe000ed20
 8005f40:	2000000c 	.word	0x2000000c
 8005f44:	e000ef34 	.word	0xe000ef34

08005f48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f52:	f383 8811 	msr	BASEPRI, r3
 8005f56:	f3bf 8f6f 	isb	sy
 8005f5a:	f3bf 8f4f 	dsb	sy
 8005f5e:	607b      	str	r3, [r7, #4]
}
 8005f60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005f62:	4b10      	ldr	r3, [pc, #64]	@ (8005fa4 <vPortEnterCritical+0x5c>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	3301      	adds	r3, #1
 8005f68:	4a0e      	ldr	r2, [pc, #56]	@ (8005fa4 <vPortEnterCritical+0x5c>)
 8005f6a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005f6c:	4b0d      	ldr	r3, [pc, #52]	@ (8005fa4 <vPortEnterCritical+0x5c>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d110      	bne.n	8005f96 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f74:	4b0c      	ldr	r3, [pc, #48]	@ (8005fa8 <vPortEnterCritical+0x60>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00b      	beq.n	8005f96 <vPortEnterCritical+0x4e>
	__asm volatile
 8005f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f82:	f383 8811 	msr	BASEPRI, r3
 8005f86:	f3bf 8f6f 	isb	sy
 8005f8a:	f3bf 8f4f 	dsb	sy
 8005f8e:	603b      	str	r3, [r7, #0]
}
 8005f90:	bf00      	nop
 8005f92:	bf00      	nop
 8005f94:	e7fd      	b.n	8005f92 <vPortEnterCritical+0x4a>
	}
}
 8005f96:	bf00      	nop
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	2000000c 	.word	0x2000000c
 8005fa8:	e000ed04 	.word	0xe000ed04

08005fac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005fb2:	4b12      	ldr	r3, [pc, #72]	@ (8005ffc <vPortExitCritical+0x50>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10b      	bne.n	8005fd2 <vPortExitCritical+0x26>
	__asm volatile
 8005fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	607b      	str	r3, [r7, #4]
}
 8005fcc:	bf00      	nop
 8005fce:	bf00      	nop
 8005fd0:	e7fd      	b.n	8005fce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8005ffc <vPortExitCritical+0x50>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	4a08      	ldr	r2, [pc, #32]	@ (8005ffc <vPortExitCritical+0x50>)
 8005fda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005fdc:	4b07      	ldr	r3, [pc, #28]	@ (8005ffc <vPortExitCritical+0x50>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d105      	bne.n	8005ff0 <vPortExitCritical+0x44>
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	f383 8811 	msr	BASEPRI, r3
}
 8005fee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr
 8005ffc:	2000000c 	.word	0x2000000c

08006000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006000:	f3ef 8009 	mrs	r0, PSP
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	4b15      	ldr	r3, [pc, #84]	@ (8006060 <pxCurrentTCBConst>)
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	f01e 0f10 	tst.w	lr, #16
 8006010:	bf08      	it	eq
 8006012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800601a:	6010      	str	r0, [r2, #0]
 800601c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006020:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006024:	f380 8811 	msr	BASEPRI, r0
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	f3bf 8f6f 	isb	sy
 8006030:	f7fe ff9e 	bl	8004f70 <vTaskSwitchContext>
 8006034:	f04f 0000 	mov.w	r0, #0
 8006038:	f380 8811 	msr	BASEPRI, r0
 800603c:	bc09      	pop	{r0, r3}
 800603e:	6819      	ldr	r1, [r3, #0]
 8006040:	6808      	ldr	r0, [r1, #0]
 8006042:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006046:	f01e 0f10 	tst.w	lr, #16
 800604a:	bf08      	it	eq
 800604c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006050:	f380 8809 	msr	PSP, r0
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	f3af 8000 	nop.w

08006060 <pxCurrentTCBConst>:
 8006060:	20000908 	.word	0x20000908
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006064:	bf00      	nop
 8006066:	bf00      	nop

08006068 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
	__asm volatile
 800606e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006072:	f383 8811 	msr	BASEPRI, r3
 8006076:	f3bf 8f6f 	isb	sy
 800607a:	f3bf 8f4f 	dsb	sy
 800607e:	607b      	str	r3, [r7, #4]
}
 8006080:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006082:	f7fe febb 	bl	8004dfc <xTaskIncrementTick>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d003      	beq.n	8006094 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800608c:	4b06      	ldr	r3, [pc, #24]	@ (80060a8 <xPortSysTickHandler+0x40>)
 800608e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006092:	601a      	str	r2, [r3, #0]
 8006094:	2300      	movs	r3, #0
 8006096:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	f383 8811 	msr	BASEPRI, r3
}
 800609e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80060a0:	bf00      	nop
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	e000ed04 	.word	0xe000ed04

080060ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80060ac:	b480      	push	{r7}
 80060ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80060b0:	4b0b      	ldr	r3, [pc, #44]	@ (80060e0 <vPortSetupTimerInterrupt+0x34>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80060b6:	4b0b      	ldr	r3, [pc, #44]	@ (80060e4 <vPortSetupTimerInterrupt+0x38>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80060bc:	4b0a      	ldr	r3, [pc, #40]	@ (80060e8 <vPortSetupTimerInterrupt+0x3c>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a0a      	ldr	r2, [pc, #40]	@ (80060ec <vPortSetupTimerInterrupt+0x40>)
 80060c2:	fba2 2303 	umull	r2, r3, r2, r3
 80060c6:	099b      	lsrs	r3, r3, #6
 80060c8:	4a09      	ldr	r2, [pc, #36]	@ (80060f0 <vPortSetupTimerInterrupt+0x44>)
 80060ca:	3b01      	subs	r3, #1
 80060cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80060ce:	4b04      	ldr	r3, [pc, #16]	@ (80060e0 <vPortSetupTimerInterrupt+0x34>)
 80060d0:	2207      	movs	r2, #7
 80060d2:	601a      	str	r2, [r3, #0]
}
 80060d4:	bf00      	nop
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	e000e010 	.word	0xe000e010
 80060e4:	e000e018 	.word	0xe000e018
 80060e8:	20000000 	.word	0x20000000
 80060ec:	10624dd3 	.word	0x10624dd3
 80060f0:	e000e014 	.word	0xe000e014

080060f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80060f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006104 <vPortEnableVFP+0x10>
 80060f8:	6801      	ldr	r1, [r0, #0]
 80060fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80060fe:	6001      	str	r1, [r0, #0]
 8006100:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006102:	bf00      	nop
 8006104:	e000ed88 	.word	0xe000ed88

08006108 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800610e:	f3ef 8305 	mrs	r3, IPSR
 8006112:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2b0f      	cmp	r3, #15
 8006118:	d915      	bls.n	8006146 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800611a:	4a18      	ldr	r2, [pc, #96]	@ (800617c <vPortValidateInterruptPriority+0x74>)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	4413      	add	r3, r2
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006124:	4b16      	ldr	r3, [pc, #88]	@ (8006180 <vPortValidateInterruptPriority+0x78>)
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	7afa      	ldrb	r2, [r7, #11]
 800612a:	429a      	cmp	r2, r3
 800612c:	d20b      	bcs.n	8006146 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800612e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006132:	f383 8811 	msr	BASEPRI, r3
 8006136:	f3bf 8f6f 	isb	sy
 800613a:	f3bf 8f4f 	dsb	sy
 800613e:	607b      	str	r3, [r7, #4]
}
 8006140:	bf00      	nop
 8006142:	bf00      	nop
 8006144:	e7fd      	b.n	8006142 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006146:	4b0f      	ldr	r3, [pc, #60]	@ (8006184 <vPortValidateInterruptPriority+0x7c>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800614e:	4b0e      	ldr	r3, [pc, #56]	@ (8006188 <vPortValidateInterruptPriority+0x80>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	429a      	cmp	r2, r3
 8006154:	d90b      	bls.n	800616e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800615a:	f383 8811 	msr	BASEPRI, r3
 800615e:	f3bf 8f6f 	isb	sy
 8006162:	f3bf 8f4f 	dsb	sy
 8006166:	603b      	str	r3, [r7, #0]
}
 8006168:	bf00      	nop
 800616a:	bf00      	nop
 800616c:	e7fd      	b.n	800616a <vPortValidateInterruptPriority+0x62>
	}
 800616e:	bf00      	nop
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	e000e3f0 	.word	0xe000e3f0
 8006180:	20000f34 	.word	0x20000f34
 8006184:	e000ed0c 	.word	0xe000ed0c
 8006188:	20000f38 	.word	0x20000f38

0800618c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b08a      	sub	sp, #40	@ 0x28
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006194:	2300      	movs	r3, #0
 8006196:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006198:	f7fe fd74 	bl	8004c84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800619c:	4b5c      	ldr	r3, [pc, #368]	@ (8006310 <pvPortMalloc+0x184>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d101      	bne.n	80061a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80061a4:	f000 f924 	bl	80063f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80061a8:	4b5a      	ldr	r3, [pc, #360]	@ (8006314 <pvPortMalloc+0x188>)
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4013      	ands	r3, r2
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f040 8095 	bne.w	80062e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d01e      	beq.n	80061fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80061bc:	2208      	movs	r2, #8
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4413      	add	r3, r2
 80061c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f003 0307 	and.w	r3, r3, #7
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d015      	beq.n	80061fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f023 0307 	bic.w	r3, r3, #7
 80061d4:	3308      	adds	r3, #8
 80061d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f003 0307 	and.w	r3, r3, #7
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00b      	beq.n	80061fa <pvPortMalloc+0x6e>
	__asm volatile
 80061e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e6:	f383 8811 	msr	BASEPRI, r3
 80061ea:	f3bf 8f6f 	isb	sy
 80061ee:	f3bf 8f4f 	dsb	sy
 80061f2:	617b      	str	r3, [r7, #20]
}
 80061f4:	bf00      	nop
 80061f6:	bf00      	nop
 80061f8:	e7fd      	b.n	80061f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d06f      	beq.n	80062e0 <pvPortMalloc+0x154>
 8006200:	4b45      	ldr	r3, [pc, #276]	@ (8006318 <pvPortMalloc+0x18c>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	429a      	cmp	r2, r3
 8006208:	d86a      	bhi.n	80062e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800620a:	4b44      	ldr	r3, [pc, #272]	@ (800631c <pvPortMalloc+0x190>)
 800620c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800620e:	4b43      	ldr	r3, [pc, #268]	@ (800631c <pvPortMalloc+0x190>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006214:	e004      	b.n	8006220 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006218:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800621a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	429a      	cmp	r2, r3
 8006228:	d903      	bls.n	8006232 <pvPortMalloc+0xa6>
 800622a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1f1      	bne.n	8006216 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006232:	4b37      	ldr	r3, [pc, #220]	@ (8006310 <pvPortMalloc+0x184>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006238:	429a      	cmp	r2, r3
 800623a:	d051      	beq.n	80062e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800623c:	6a3b      	ldr	r3, [r7, #32]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2208      	movs	r2, #8
 8006242:	4413      	add	r3, r2
 8006244:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	6a3b      	ldr	r3, [r7, #32]
 800624c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800624e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006250:	685a      	ldr	r2, [r3, #4]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	1ad2      	subs	r2, r2, r3
 8006256:	2308      	movs	r3, #8
 8006258:	005b      	lsls	r3, r3, #1
 800625a:	429a      	cmp	r2, r3
 800625c:	d920      	bls.n	80062a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800625e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4413      	add	r3, r2
 8006264:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	f003 0307 	and.w	r3, r3, #7
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00b      	beq.n	8006288 <pvPortMalloc+0xfc>
	__asm volatile
 8006270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006274:	f383 8811 	msr	BASEPRI, r3
 8006278:	f3bf 8f6f 	isb	sy
 800627c:	f3bf 8f4f 	dsb	sy
 8006280:	613b      	str	r3, [r7, #16]
}
 8006282:	bf00      	nop
 8006284:	bf00      	nop
 8006286:	e7fd      	b.n	8006284 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	1ad2      	subs	r2, r2, r3
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800629a:	69b8      	ldr	r0, [r7, #24]
 800629c:	f000 f90a 	bl	80064b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80062a0:	4b1d      	ldr	r3, [pc, #116]	@ (8006318 <pvPortMalloc+0x18c>)
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	4a1b      	ldr	r2, [pc, #108]	@ (8006318 <pvPortMalloc+0x18c>)
 80062ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80062ae:	4b1a      	ldr	r3, [pc, #104]	@ (8006318 <pvPortMalloc+0x18c>)
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	4b1b      	ldr	r3, [pc, #108]	@ (8006320 <pvPortMalloc+0x194>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d203      	bcs.n	80062c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80062ba:	4b17      	ldr	r3, [pc, #92]	@ (8006318 <pvPortMalloc+0x18c>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a18      	ldr	r2, [pc, #96]	@ (8006320 <pvPortMalloc+0x194>)
 80062c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80062c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c4:	685a      	ldr	r2, [r3, #4]
 80062c6:	4b13      	ldr	r3, [pc, #76]	@ (8006314 <pvPortMalloc+0x188>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	431a      	orrs	r2, r3
 80062cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80062d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d2:	2200      	movs	r2, #0
 80062d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80062d6:	4b13      	ldr	r3, [pc, #76]	@ (8006324 <pvPortMalloc+0x198>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	3301      	adds	r3, #1
 80062dc:	4a11      	ldr	r2, [pc, #68]	@ (8006324 <pvPortMalloc+0x198>)
 80062de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80062e0:	f7fe fcde 	bl	8004ca0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	f003 0307 	and.w	r3, r3, #7
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00b      	beq.n	8006306 <pvPortMalloc+0x17a>
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	60fb      	str	r3, [r7, #12]
}
 8006300:	bf00      	nop
 8006302:	bf00      	nop
 8006304:	e7fd      	b.n	8006302 <pvPortMalloc+0x176>
	return pvReturn;
 8006306:	69fb      	ldr	r3, [r7, #28]
}
 8006308:	4618      	mov	r0, r3
 800630a:	3728      	adds	r7, #40	@ 0x28
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	20004b44 	.word	0x20004b44
 8006314:	20004b58 	.word	0x20004b58
 8006318:	20004b48 	.word	0x20004b48
 800631c:	20004b3c 	.word	0x20004b3c
 8006320:	20004b4c 	.word	0x20004b4c
 8006324:	20004b50 	.word	0x20004b50

08006328 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d04f      	beq.n	80063da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800633a:	2308      	movs	r3, #8
 800633c:	425b      	negs	r3, r3
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	4413      	add	r3, r2
 8006342:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	4b25      	ldr	r3, [pc, #148]	@ (80063e4 <vPortFree+0xbc>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4013      	ands	r3, r2
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10b      	bne.n	800636e <vPortFree+0x46>
	__asm volatile
 8006356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800635a:	f383 8811 	msr	BASEPRI, r3
 800635e:	f3bf 8f6f 	isb	sy
 8006362:	f3bf 8f4f 	dsb	sy
 8006366:	60fb      	str	r3, [r7, #12]
}
 8006368:	bf00      	nop
 800636a:	bf00      	nop
 800636c:	e7fd      	b.n	800636a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00b      	beq.n	800638e <vPortFree+0x66>
	__asm volatile
 8006376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800637a:	f383 8811 	msr	BASEPRI, r3
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	f3bf 8f4f 	dsb	sy
 8006386:	60bb      	str	r3, [r7, #8]
}
 8006388:	bf00      	nop
 800638a:	bf00      	nop
 800638c:	e7fd      	b.n	800638a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	685a      	ldr	r2, [r3, #4]
 8006392:	4b14      	ldr	r3, [pc, #80]	@ (80063e4 <vPortFree+0xbc>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4013      	ands	r3, r2
 8006398:	2b00      	cmp	r3, #0
 800639a:	d01e      	beq.n	80063da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d11a      	bne.n	80063da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	685a      	ldr	r2, [r3, #4]
 80063a8:	4b0e      	ldr	r3, [pc, #56]	@ (80063e4 <vPortFree+0xbc>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	43db      	mvns	r3, r3
 80063ae:	401a      	ands	r2, r3
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80063b4:	f7fe fc66 	bl	8004c84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	4b0a      	ldr	r3, [pc, #40]	@ (80063e8 <vPortFree+0xc0>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4413      	add	r3, r2
 80063c2:	4a09      	ldr	r2, [pc, #36]	@ (80063e8 <vPortFree+0xc0>)
 80063c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80063c6:	6938      	ldr	r0, [r7, #16]
 80063c8:	f000 f874 	bl	80064b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80063cc:	4b07      	ldr	r3, [pc, #28]	@ (80063ec <vPortFree+0xc4>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	3301      	adds	r3, #1
 80063d2:	4a06      	ldr	r2, [pc, #24]	@ (80063ec <vPortFree+0xc4>)
 80063d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80063d6:	f7fe fc63 	bl	8004ca0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80063da:	bf00      	nop
 80063dc:	3718      	adds	r7, #24
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	20004b58 	.word	0x20004b58
 80063e8:	20004b48 	.word	0x20004b48
 80063ec:	20004b54 	.word	0x20004b54

080063f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80063f0:	b480      	push	{r7}
 80063f2:	b085      	sub	sp, #20
 80063f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80063f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80063fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80063fc:	4b27      	ldr	r3, [pc, #156]	@ (800649c <prvHeapInit+0xac>)
 80063fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f003 0307 	and.w	r3, r3, #7
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00c      	beq.n	8006424 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	3307      	adds	r3, #7
 800640e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f023 0307 	bic.w	r3, r3, #7
 8006416:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006418:	68ba      	ldr	r2, [r7, #8]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	4a1f      	ldr	r2, [pc, #124]	@ (800649c <prvHeapInit+0xac>)
 8006420:	4413      	add	r3, r2
 8006422:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006428:	4a1d      	ldr	r2, [pc, #116]	@ (80064a0 <prvHeapInit+0xb0>)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800642e:	4b1c      	ldr	r3, [pc, #112]	@ (80064a0 <prvHeapInit+0xb0>)
 8006430:	2200      	movs	r2, #0
 8006432:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	4413      	add	r3, r2
 800643a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800643c:	2208      	movs	r2, #8
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	1a9b      	subs	r3, r3, r2
 8006442:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f023 0307 	bic.w	r3, r3, #7
 800644a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	4a15      	ldr	r2, [pc, #84]	@ (80064a4 <prvHeapInit+0xb4>)
 8006450:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006452:	4b14      	ldr	r3, [pc, #80]	@ (80064a4 <prvHeapInit+0xb4>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2200      	movs	r2, #0
 8006458:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800645a:	4b12      	ldr	r3, [pc, #72]	@ (80064a4 <prvHeapInit+0xb4>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2200      	movs	r2, #0
 8006460:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	1ad2      	subs	r2, r2, r3
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006470:	4b0c      	ldr	r3, [pc, #48]	@ (80064a4 <prvHeapInit+0xb4>)
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	4a0a      	ldr	r2, [pc, #40]	@ (80064a8 <prvHeapInit+0xb8>)
 800647e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	4a09      	ldr	r2, [pc, #36]	@ (80064ac <prvHeapInit+0xbc>)
 8006486:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006488:	4b09      	ldr	r3, [pc, #36]	@ (80064b0 <prvHeapInit+0xc0>)
 800648a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800648e:	601a      	str	r2, [r3, #0]
}
 8006490:	bf00      	nop
 8006492:	3714      	adds	r7, #20
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr
 800649c:	20000f3c 	.word	0x20000f3c
 80064a0:	20004b3c 	.word	0x20004b3c
 80064a4:	20004b44 	.word	0x20004b44
 80064a8:	20004b4c 	.word	0x20004b4c
 80064ac:	20004b48 	.word	0x20004b48
 80064b0:	20004b58 	.word	0x20004b58

080064b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80064bc:	4b28      	ldr	r3, [pc, #160]	@ (8006560 <prvInsertBlockIntoFreeList+0xac>)
 80064be:	60fb      	str	r3, [r7, #12]
 80064c0:	e002      	b.n	80064c8 <prvInsertBlockIntoFreeList+0x14>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	60fb      	str	r3, [r7, #12]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d8f7      	bhi.n	80064c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	68ba      	ldr	r2, [r7, #8]
 80064dc:	4413      	add	r3, r2
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d108      	bne.n	80064f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	441a      	add	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	441a      	add	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	429a      	cmp	r2, r3
 8006508:	d118      	bne.n	800653c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	4b15      	ldr	r3, [pc, #84]	@ (8006564 <prvInsertBlockIntoFreeList+0xb0>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	429a      	cmp	r2, r3
 8006514:	d00d      	beq.n	8006532 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685a      	ldr	r2, [r3, #4]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	441a      	add	r2, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	601a      	str	r2, [r3, #0]
 8006530:	e008      	b.n	8006544 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006532:	4b0c      	ldr	r3, [pc, #48]	@ (8006564 <prvInsertBlockIntoFreeList+0xb0>)
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	601a      	str	r2, [r3, #0]
 800653a:	e003      	b.n	8006544 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	429a      	cmp	r2, r3
 800654a:	d002      	beq.n	8006552 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006552:	bf00      	nop
 8006554:	3714      	adds	r7, #20
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	20004b3c 	.word	0x20004b3c
 8006564:	20004b44 	.word	0x20004b44

08006568 <memset>:
 8006568:	4402      	add	r2, r0
 800656a:	4603      	mov	r3, r0
 800656c:	4293      	cmp	r3, r2
 800656e:	d100      	bne.n	8006572 <memset+0xa>
 8006570:	4770      	bx	lr
 8006572:	f803 1b01 	strb.w	r1, [r3], #1
 8006576:	e7f9      	b.n	800656c <memset+0x4>

08006578 <_reclaim_reent>:
 8006578:	4b29      	ldr	r3, [pc, #164]	@ (8006620 <_reclaim_reent+0xa8>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4283      	cmp	r3, r0
 800657e:	b570      	push	{r4, r5, r6, lr}
 8006580:	4604      	mov	r4, r0
 8006582:	d04b      	beq.n	800661c <_reclaim_reent+0xa4>
 8006584:	69c3      	ldr	r3, [r0, #28]
 8006586:	b1ab      	cbz	r3, 80065b4 <_reclaim_reent+0x3c>
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	b16b      	cbz	r3, 80065a8 <_reclaim_reent+0x30>
 800658c:	2500      	movs	r5, #0
 800658e:	69e3      	ldr	r3, [r4, #28]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	5959      	ldr	r1, [r3, r5]
 8006594:	2900      	cmp	r1, #0
 8006596:	d13b      	bne.n	8006610 <_reclaim_reent+0x98>
 8006598:	3504      	adds	r5, #4
 800659a:	2d80      	cmp	r5, #128	@ 0x80
 800659c:	d1f7      	bne.n	800658e <_reclaim_reent+0x16>
 800659e:	69e3      	ldr	r3, [r4, #28]
 80065a0:	4620      	mov	r0, r4
 80065a2:	68d9      	ldr	r1, [r3, #12]
 80065a4:	f000 f872 	bl	800668c <_free_r>
 80065a8:	69e3      	ldr	r3, [r4, #28]
 80065aa:	6819      	ldr	r1, [r3, #0]
 80065ac:	b111      	cbz	r1, 80065b4 <_reclaim_reent+0x3c>
 80065ae:	4620      	mov	r0, r4
 80065b0:	f000 f86c 	bl	800668c <_free_r>
 80065b4:	6961      	ldr	r1, [r4, #20]
 80065b6:	b111      	cbz	r1, 80065be <_reclaim_reent+0x46>
 80065b8:	4620      	mov	r0, r4
 80065ba:	f000 f867 	bl	800668c <_free_r>
 80065be:	69e1      	ldr	r1, [r4, #28]
 80065c0:	b111      	cbz	r1, 80065c8 <_reclaim_reent+0x50>
 80065c2:	4620      	mov	r0, r4
 80065c4:	f000 f862 	bl	800668c <_free_r>
 80065c8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80065ca:	b111      	cbz	r1, 80065d2 <_reclaim_reent+0x5a>
 80065cc:	4620      	mov	r0, r4
 80065ce:	f000 f85d 	bl	800668c <_free_r>
 80065d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80065d4:	b111      	cbz	r1, 80065dc <_reclaim_reent+0x64>
 80065d6:	4620      	mov	r0, r4
 80065d8:	f000 f858 	bl	800668c <_free_r>
 80065dc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80065de:	b111      	cbz	r1, 80065e6 <_reclaim_reent+0x6e>
 80065e0:	4620      	mov	r0, r4
 80065e2:	f000 f853 	bl	800668c <_free_r>
 80065e6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80065e8:	b111      	cbz	r1, 80065f0 <_reclaim_reent+0x78>
 80065ea:	4620      	mov	r0, r4
 80065ec:	f000 f84e 	bl	800668c <_free_r>
 80065f0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80065f2:	b111      	cbz	r1, 80065fa <_reclaim_reent+0x82>
 80065f4:	4620      	mov	r0, r4
 80065f6:	f000 f849 	bl	800668c <_free_r>
 80065fa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80065fc:	b111      	cbz	r1, 8006604 <_reclaim_reent+0x8c>
 80065fe:	4620      	mov	r0, r4
 8006600:	f000 f844 	bl	800668c <_free_r>
 8006604:	6a23      	ldr	r3, [r4, #32]
 8006606:	b14b      	cbz	r3, 800661c <_reclaim_reent+0xa4>
 8006608:	4620      	mov	r0, r4
 800660a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800660e:	4718      	bx	r3
 8006610:	680e      	ldr	r6, [r1, #0]
 8006612:	4620      	mov	r0, r4
 8006614:	f000 f83a 	bl	800668c <_free_r>
 8006618:	4631      	mov	r1, r6
 800661a:	e7bb      	b.n	8006594 <_reclaim_reent+0x1c>
 800661c:	bd70      	pop	{r4, r5, r6, pc}
 800661e:	bf00      	nop
 8006620:	20000010 	.word	0x20000010

08006624 <__libc_init_array>:
 8006624:	b570      	push	{r4, r5, r6, lr}
 8006626:	4d0d      	ldr	r5, [pc, #52]	@ (800665c <__libc_init_array+0x38>)
 8006628:	4c0d      	ldr	r4, [pc, #52]	@ (8006660 <__libc_init_array+0x3c>)
 800662a:	1b64      	subs	r4, r4, r5
 800662c:	10a4      	asrs	r4, r4, #2
 800662e:	2600      	movs	r6, #0
 8006630:	42a6      	cmp	r6, r4
 8006632:	d109      	bne.n	8006648 <__libc_init_array+0x24>
 8006634:	4d0b      	ldr	r5, [pc, #44]	@ (8006664 <__libc_init_array+0x40>)
 8006636:	4c0c      	ldr	r4, [pc, #48]	@ (8006668 <__libc_init_array+0x44>)
 8006638:	f000 f87e 	bl	8006738 <_init>
 800663c:	1b64      	subs	r4, r4, r5
 800663e:	10a4      	asrs	r4, r4, #2
 8006640:	2600      	movs	r6, #0
 8006642:	42a6      	cmp	r6, r4
 8006644:	d105      	bne.n	8006652 <__libc_init_array+0x2e>
 8006646:	bd70      	pop	{r4, r5, r6, pc}
 8006648:	f855 3b04 	ldr.w	r3, [r5], #4
 800664c:	4798      	blx	r3
 800664e:	3601      	adds	r6, #1
 8006650:	e7ee      	b.n	8006630 <__libc_init_array+0xc>
 8006652:	f855 3b04 	ldr.w	r3, [r5], #4
 8006656:	4798      	blx	r3
 8006658:	3601      	adds	r6, #1
 800665a:	e7f2      	b.n	8006642 <__libc_init_array+0x1e>
 800665c:	08006844 	.word	0x08006844
 8006660:	08006844 	.word	0x08006844
 8006664:	08006844 	.word	0x08006844
 8006668:	08006848 	.word	0x08006848

0800666c <__retarget_lock_acquire_recursive>:
 800666c:	4770      	bx	lr

0800666e <__retarget_lock_release_recursive>:
 800666e:	4770      	bx	lr

08006670 <memcpy>:
 8006670:	440a      	add	r2, r1
 8006672:	4291      	cmp	r1, r2
 8006674:	f100 33ff 	add.w	r3, r0, #4294967295
 8006678:	d100      	bne.n	800667c <memcpy+0xc>
 800667a:	4770      	bx	lr
 800667c:	b510      	push	{r4, lr}
 800667e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006682:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006686:	4291      	cmp	r1, r2
 8006688:	d1f9      	bne.n	800667e <memcpy+0xe>
 800668a:	bd10      	pop	{r4, pc}

0800668c <_free_r>:
 800668c:	b538      	push	{r3, r4, r5, lr}
 800668e:	4605      	mov	r5, r0
 8006690:	2900      	cmp	r1, #0
 8006692:	d041      	beq.n	8006718 <_free_r+0x8c>
 8006694:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006698:	1f0c      	subs	r4, r1, #4
 800669a:	2b00      	cmp	r3, #0
 800669c:	bfb8      	it	lt
 800669e:	18e4      	addlt	r4, r4, r3
 80066a0:	f000 f83e 	bl	8006720 <__malloc_lock>
 80066a4:	4a1d      	ldr	r2, [pc, #116]	@ (800671c <_free_r+0x90>)
 80066a6:	6813      	ldr	r3, [r2, #0]
 80066a8:	b933      	cbnz	r3, 80066b8 <_free_r+0x2c>
 80066aa:	6063      	str	r3, [r4, #4]
 80066ac:	6014      	str	r4, [r2, #0]
 80066ae:	4628      	mov	r0, r5
 80066b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066b4:	f000 b83a 	b.w	800672c <__malloc_unlock>
 80066b8:	42a3      	cmp	r3, r4
 80066ba:	d908      	bls.n	80066ce <_free_r+0x42>
 80066bc:	6820      	ldr	r0, [r4, #0]
 80066be:	1821      	adds	r1, r4, r0
 80066c0:	428b      	cmp	r3, r1
 80066c2:	bf01      	itttt	eq
 80066c4:	6819      	ldreq	r1, [r3, #0]
 80066c6:	685b      	ldreq	r3, [r3, #4]
 80066c8:	1809      	addeq	r1, r1, r0
 80066ca:	6021      	streq	r1, [r4, #0]
 80066cc:	e7ed      	b.n	80066aa <_free_r+0x1e>
 80066ce:	461a      	mov	r2, r3
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	b10b      	cbz	r3, 80066d8 <_free_r+0x4c>
 80066d4:	42a3      	cmp	r3, r4
 80066d6:	d9fa      	bls.n	80066ce <_free_r+0x42>
 80066d8:	6811      	ldr	r1, [r2, #0]
 80066da:	1850      	adds	r0, r2, r1
 80066dc:	42a0      	cmp	r0, r4
 80066de:	d10b      	bne.n	80066f8 <_free_r+0x6c>
 80066e0:	6820      	ldr	r0, [r4, #0]
 80066e2:	4401      	add	r1, r0
 80066e4:	1850      	adds	r0, r2, r1
 80066e6:	4283      	cmp	r3, r0
 80066e8:	6011      	str	r1, [r2, #0]
 80066ea:	d1e0      	bne.n	80066ae <_free_r+0x22>
 80066ec:	6818      	ldr	r0, [r3, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	6053      	str	r3, [r2, #4]
 80066f2:	4408      	add	r0, r1
 80066f4:	6010      	str	r0, [r2, #0]
 80066f6:	e7da      	b.n	80066ae <_free_r+0x22>
 80066f8:	d902      	bls.n	8006700 <_free_r+0x74>
 80066fa:	230c      	movs	r3, #12
 80066fc:	602b      	str	r3, [r5, #0]
 80066fe:	e7d6      	b.n	80066ae <_free_r+0x22>
 8006700:	6820      	ldr	r0, [r4, #0]
 8006702:	1821      	adds	r1, r4, r0
 8006704:	428b      	cmp	r3, r1
 8006706:	bf04      	itt	eq
 8006708:	6819      	ldreq	r1, [r3, #0]
 800670a:	685b      	ldreq	r3, [r3, #4]
 800670c:	6063      	str	r3, [r4, #4]
 800670e:	bf04      	itt	eq
 8006710:	1809      	addeq	r1, r1, r0
 8006712:	6021      	streq	r1, [r4, #0]
 8006714:	6054      	str	r4, [r2, #4]
 8006716:	e7ca      	b.n	80066ae <_free_r+0x22>
 8006718:	bd38      	pop	{r3, r4, r5, pc}
 800671a:	bf00      	nop
 800671c:	20004c98 	.word	0x20004c98

08006720 <__malloc_lock>:
 8006720:	4801      	ldr	r0, [pc, #4]	@ (8006728 <__malloc_lock+0x8>)
 8006722:	f7ff bfa3 	b.w	800666c <__retarget_lock_acquire_recursive>
 8006726:	bf00      	nop
 8006728:	20004c94 	.word	0x20004c94

0800672c <__malloc_unlock>:
 800672c:	4801      	ldr	r0, [pc, #4]	@ (8006734 <__malloc_unlock+0x8>)
 800672e:	f7ff bf9e 	b.w	800666e <__retarget_lock_release_recursive>
 8006732:	bf00      	nop
 8006734:	20004c94 	.word	0x20004c94

08006738 <_init>:
 8006738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800673a:	bf00      	nop
 800673c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800673e:	bc08      	pop	{r3}
 8006740:	469e      	mov	lr, r3
 8006742:	4770      	bx	lr

08006744 <_fini>:
 8006744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006746:	bf00      	nop
 8006748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800674a:	bc08      	pop	{r3}
 800674c:	469e      	mov	lr, r3
 800674e:	4770      	bx	lr
