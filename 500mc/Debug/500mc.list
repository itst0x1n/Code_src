
500mc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050c0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005260  08005260  00006260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800531c  0800531c  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  0800531c  0800531c  0000631c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005324  08005324  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005324  08005324  00006324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005328  08005328  00006328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800532c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004be4  20000060  0800538c  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c44  0800538c  00007c44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001795e  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000353a  00000000  00000000  0001e9ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  00021f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f7c  00000000  00000000  00023320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001855e  00000000  00000000  0002429c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000175ee  00000000  00000000  0003c7fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000977a9  00000000  00000000  00053de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eb591  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005658  00000000  00000000  000eb5d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003f  00000000  00000000  000f0c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005248 	.word	0x08005248

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08005248 	.word	0x08005248

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004d4:	4a0c      	ldr	r2, [pc, #48]	@ (8000508 <MX_FREERTOS_Init+0x38>)
 80004d6:	2100      	movs	r1, #0
 80004d8:	480c      	ldr	r0, [pc, #48]	@ (800050c <MX_FREERTOS_Init+0x3c>)
 80004da:	f002 f867 	bl	80025ac <osThreadNew>
 80004de:	4603      	mov	r3, r0
 80004e0:	4a0b      	ldr	r2, [pc, #44]	@ (8000510 <MX_FREERTOS_Init+0x40>)
 80004e2:	6013      	str	r3, [r2, #0]

  /* creation of myLed */
  myLedHandle = osThreadNew(StartLed, NULL, &myLed_attributes);
 80004e4:	4a0b      	ldr	r2, [pc, #44]	@ (8000514 <MX_FREERTOS_Init+0x44>)
 80004e6:	2100      	movs	r1, #0
 80004e8:	480b      	ldr	r0, [pc, #44]	@ (8000518 <MX_FREERTOS_Init+0x48>)
 80004ea:	f002 f85f 	bl	80025ac <osThreadNew>
 80004ee:	4603      	mov	r3, r0
 80004f0:	4a0a      	ldr	r2, [pc, #40]	@ (800051c <MX_FREERTOS_Init+0x4c>)
 80004f2:	6013      	str	r3, [r2, #0]

  /* creation of myButton */
  myButtonHandle = osThreadNew(StartButton, NULL, &myButton_attributes);
 80004f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000520 <MX_FREERTOS_Init+0x50>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	480a      	ldr	r0, [pc, #40]	@ (8000524 <MX_FREERTOS_Init+0x54>)
 80004fa:	f002 f857 	bl	80025ac <osThreadNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a09      	ldr	r2, [pc, #36]	@ (8000528 <MX_FREERTOS_Init+0x58>)
 8000502:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}
 8000508:	08005298 	.word	0x08005298
 800050c:	0800052d 	.word	0x0800052d
 8000510:	2000007c 	.word	0x2000007c
 8000514:	080052bc 	.word	0x080052bc
 8000518:	0800053d 	.word	0x0800053d
 800051c:	20000080 	.word	0x20000080
 8000520:	080052e0 	.word	0x080052e0
 8000524:	0800055d 	.word	0x0800055d
 8000528:	20000084 	.word	0x20000084

0800052c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000534:	2001      	movs	r0, #1
 8000536:	f002 f8cb 	bl	80026d0 <osDelay>
 800053a:	e7fb      	b.n	8000534 <StartDefaultTask+0x8>

0800053c <StartLed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLed */
void StartLed(void *argument)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLed */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 8000544:	2120      	movs	r1, #32
 8000546:	4804      	ldr	r0, [pc, #16]	@ (8000558 <StartLed+0x1c>)
 8000548:	f000 fd85 	bl	8001056 <HAL_GPIO_TogglePin>
    osDelay(500);
 800054c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000550:	f002 f8be 	bl	80026d0 <osDelay>
	HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 8000554:	bf00      	nop
 8000556:	e7f5      	b.n	8000544 <StartLed+0x8>
 8000558:	40020000 	.word	0x40020000

0800055c <StartButton>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButton */
void StartButton(void *argument)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButton */
  /* Infinite loop */
  for(;;)
  {
	if(HAL_GPIO_ReadPin(GPIOC, B1_Pin)){
 8000564:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000568:	480c      	ldr	r0, [pc, #48]	@ (800059c <StartButton+0x40>)
 800056a:	f000 fd43 	bl	8000ff4 <HAL_GPIO_ReadPin>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d009      	beq.n	8000588 <StartButton+0x2c>
		HAL_GPIO_TogglePin(GPIOA, Led2_Pin);
 8000574:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000578:	4809      	ldr	r0, [pc, #36]	@ (80005a0 <StartButton+0x44>)
 800057a:	f000 fd6c 	bl	8001056 <HAL_GPIO_TogglePin>
		osDelay(500);
 800057e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000582:	f002 f8a5 	bl	80026d0 <osDelay>
 8000586:	e7ed      	b.n	8000564 <StartButton+0x8>
	}
	else{
		HAL_GPIO_TogglePin(GPIOA, Led2_Pin);
 8000588:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800058c:	4804      	ldr	r0, [pc, #16]	@ (80005a0 <StartButton+0x44>)
 800058e:	f000 fd62 	bl	8001056 <HAL_GPIO_TogglePin>
		osDelay(300);
 8000592:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000596:	f002 f89b 	bl	80026d0 <osDelay>
	if(HAL_GPIO_ReadPin(GPIOC, B1_Pin)){
 800059a:	e7e3      	b.n	8000564 <StartButton+0x8>
 800059c:	40020800 	.word	0x40020800
 80005a0:	40020000 	.word	0x40020000

080005a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	@ 0x28
 80005a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005aa:	f107 0314 	add.w	r3, r7, #20
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	613b      	str	r3, [r7, #16]
 80005be:	4b2e      	ldr	r3, [pc, #184]	@ (8000678 <MX_GPIO_Init+0xd4>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c2:	4a2d      	ldr	r2, [pc, #180]	@ (8000678 <MX_GPIO_Init+0xd4>)
 80005c4:	f043 0304 	orr.w	r3, r3, #4
 80005c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ca:	4b2b      	ldr	r3, [pc, #172]	@ (8000678 <MX_GPIO_Init+0xd4>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	f003 0304 	and.w	r3, r3, #4
 80005d2:	613b      	str	r3, [r7, #16]
 80005d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	4b27      	ldr	r3, [pc, #156]	@ (8000678 <MX_GPIO_Init+0xd4>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	4a26      	ldr	r2, [pc, #152]	@ (8000678 <MX_GPIO_Init+0xd4>)
 80005e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e6:	4b24      	ldr	r3, [pc, #144]	@ (8000678 <MX_GPIO_Init+0xd4>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	4b20      	ldr	r3, [pc, #128]	@ (8000678 <MX_GPIO_Init+0xd4>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	4a1f      	ldr	r2, [pc, #124]	@ (8000678 <MX_GPIO_Init+0xd4>)
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	6313      	str	r3, [r2, #48]	@ 0x30
 8000602:	4b1d      	ldr	r3, [pc, #116]	@ (8000678 <MX_GPIO_Init+0xd4>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	4b19      	ldr	r3, [pc, #100]	@ (8000678 <MX_GPIO_Init+0xd4>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	4a18      	ldr	r2, [pc, #96]	@ (8000678 <MX_GPIO_Init+0xd4>)
 8000618:	f043 0302 	orr.w	r3, r3, #2
 800061c:	6313      	str	r3, [r2, #48]	@ 0x30
 800061e:	4b16      	ldr	r3, [pc, #88]	@ (8000678 <MX_GPIO_Init+0xd4>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	f003 0302 	and.w	r3, r3, #2
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Led2_Pin, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8000630:	4812      	ldr	r0, [pc, #72]	@ (800067c <MX_GPIO_Init+0xd8>)
 8000632:	f000 fcf7 	bl	8001024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000636:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800063a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800063c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4619      	mov	r1, r3
 800064c:	480c      	ldr	r0, [pc, #48]	@ (8000680 <MX_GPIO_Init+0xdc>)
 800064e:	f000 fb4d 	bl	8000cec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Led2_Pin;
 8000652:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8000656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000658:	2301      	movs	r3, #1
 800065a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000660:	2300      	movs	r3, #0
 8000662:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	4619      	mov	r1, r3
 800066a:	4804      	ldr	r0, [pc, #16]	@ (800067c <MX_GPIO_Init+0xd8>)
 800066c:	f000 fb3e 	bl	8000cec <HAL_GPIO_Init>

}
 8000670:	bf00      	nop
 8000672:	3728      	adds	r7, #40	@ 0x28
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40023800 	.word	0x40023800
 800067c:	40020000 	.word	0x40020000
 8000680:	40020800 	.word	0x40020800

08000684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000688:	f000 fa0c 	bl	8000aa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068c:	f000 f80c 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000690:	f7ff ff88 	bl	80005a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000694:	f000 f96a 	bl	800096c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000698:	f001 ff3e 	bl	8002518 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800069c:	f7ff ff18 	bl	80004d0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80006a0:	f001 ff5e 	bl	8002560 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a4:	bf00      	nop
 80006a6:	e7fd      	b.n	80006a4 <main+0x20>

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b094      	sub	sp, #80	@ 0x50
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 0320 	add.w	r3, r7, #32
 80006b2:	2230      	movs	r2, #48	@ 0x30
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f004 fcde 	bl	8005078 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	4b29      	ldr	r3, [pc, #164]	@ (8000778 <SystemClock_Config+0xd0>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d4:	4a28      	ldr	r2, [pc, #160]	@ (8000778 <SystemClock_Config+0xd0>)
 80006d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006da:	6413      	str	r3, [r2, #64]	@ 0x40
 80006dc:	4b26      	ldr	r3, [pc, #152]	@ (8000778 <SystemClock_Config+0xd0>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006e8:	2300      	movs	r3, #0
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	4b23      	ldr	r3, [pc, #140]	@ (800077c <SystemClock_Config+0xd4>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006f4:	4a21      	ldr	r2, [pc, #132]	@ (800077c <SystemClock_Config+0xd4>)
 80006f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006fa:	6013      	str	r3, [r2, #0]
 80006fc:	4b1f      	ldr	r3, [pc, #124]	@ (800077c <SystemClock_Config+0xd4>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000708:	2302      	movs	r3, #2
 800070a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800070c:	2301      	movs	r3, #1
 800070e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000710:	2310      	movs	r3, #16
 8000712:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000714:	2302      	movs	r3, #2
 8000716:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000718:	2300      	movs	r3, #0
 800071a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800071c:	2310      	movs	r3, #16
 800071e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000720:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000724:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000726:	2304      	movs	r3, #4
 8000728:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800072a:	2307      	movs	r3, #7
 800072c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072e:	f107 0320 	add.w	r3, r7, #32
 8000732:	4618      	mov	r0, r3
 8000734:	f000 fcaa 	bl	800108c <HAL_RCC_OscConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800073e:	f000 f82e 	bl	800079e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000742:	230f      	movs	r3, #15
 8000744:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000746:	2302      	movs	r3, #2
 8000748:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800074e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000752:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	2102      	movs	r1, #2
 800075e:	4618      	mov	r0, r3
 8000760:	f000 ff0c 	bl	800157c <HAL_RCC_ClockConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800076a:	f000 f818 	bl	800079e <Error_Handler>
  }
}
 800076e:	bf00      	nop
 8000770:	3750      	adds	r7, #80	@ 0x50
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800
 800077c:	40007000 	.word	0x40007000

08000780 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000790:	d101      	bne.n	8000796 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000792:	f000 f9a9 	bl	8000ae8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a2:	b672      	cpsid	i
}
 80007a4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a6:	bf00      	nop
 80007a8:	e7fd      	b.n	80007a6 <Error_Handler+0x8>
	...

080007ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	4b12      	ldr	r3, [pc, #72]	@ (8000800 <HAL_MspInit+0x54>)
 80007b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ba:	4a11      	ldr	r2, [pc, #68]	@ (8000800 <HAL_MspInit+0x54>)
 80007bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80007c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000800 <HAL_MspInit+0x54>)
 80007c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000800 <HAL_MspInit+0x54>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000800 <HAL_MspInit+0x54>)
 80007d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80007de:	4b08      	ldr	r3, [pc, #32]	@ (8000800 <HAL_MspInit+0x54>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	210f      	movs	r1, #15
 80007ee:	f06f 0001 	mvn.w	r0, #1
 80007f2:	f000 fa51 	bl	8000c98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800

08000804 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08e      	sub	sp, #56	@ 0x38
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800080c:	2300      	movs	r3, #0
 800080e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000810:	2300      	movs	r3, #0
 8000812:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000814:	2300      	movs	r3, #0
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	4b34      	ldr	r3, [pc, #208]	@ (80008ec <HAL_InitTick+0xe8>)
 800081a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800081c:	4a33      	ldr	r2, [pc, #204]	@ (80008ec <HAL_InitTick+0xe8>)
 800081e:	f043 0301 	orr.w	r3, r3, #1
 8000822:	6413      	str	r3, [r2, #64]	@ 0x40
 8000824:	4b31      	ldr	r3, [pc, #196]	@ (80008ec <HAL_InitTick+0xe8>)
 8000826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000828:	f003 0301 	and.w	r3, r3, #1
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000830:	f107 0210 	add.w	r2, r7, #16
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4611      	mov	r1, r2
 800083a:	4618      	mov	r0, r3
 800083c:	f001 f8be 	bl	80019bc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000840:	6a3b      	ldr	r3, [r7, #32]
 8000842:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000846:	2b00      	cmp	r3, #0
 8000848:	d103      	bne.n	8000852 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800084a:	f001 f88f 	bl	800196c <HAL_RCC_GetPCLK1Freq>
 800084e:	6378      	str	r0, [r7, #52]	@ 0x34
 8000850:	e004      	b.n	800085c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000852:	f001 f88b 	bl	800196c <HAL_RCC_GetPCLK1Freq>
 8000856:	4603      	mov	r3, r0
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800085c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800085e:	4a24      	ldr	r2, [pc, #144]	@ (80008f0 <HAL_InitTick+0xec>)
 8000860:	fba2 2303 	umull	r2, r3, r2, r3
 8000864:	0c9b      	lsrs	r3, r3, #18
 8000866:	3b01      	subs	r3, #1
 8000868:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800086a:	4b22      	ldr	r3, [pc, #136]	@ (80008f4 <HAL_InitTick+0xf0>)
 800086c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000870:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000872:	4b20      	ldr	r3, [pc, #128]	@ (80008f4 <HAL_InitTick+0xf0>)
 8000874:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000878:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800087a:	4a1e      	ldr	r2, [pc, #120]	@ (80008f4 <HAL_InitTick+0xf0>)
 800087c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800087e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000880:	4b1c      	ldr	r3, [pc, #112]	@ (80008f4 <HAL_InitTick+0xf0>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000886:	4b1b      	ldr	r3, [pc, #108]	@ (80008f4 <HAL_InitTick+0xf0>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088c:	4b19      	ldr	r3, [pc, #100]	@ (80008f4 <HAL_InitTick+0xf0>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000892:	4818      	ldr	r0, [pc, #96]	@ (80008f4 <HAL_InitTick+0xf0>)
 8000894:	f001 f8c4 	bl	8001a20 <HAL_TIM_Base_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800089e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d11b      	bne.n	80008de <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80008a6:	4813      	ldr	r0, [pc, #76]	@ (80008f4 <HAL_InitTick+0xf0>)
 80008a8:	f001 f914 	bl	8001ad4 <HAL_TIM_Base_Start_IT>
 80008ac:	4603      	mov	r3, r0
 80008ae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80008b2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d111      	bne.n	80008de <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008ba:	201c      	movs	r0, #28
 80008bc:	f000 fa08 	bl	8000cd0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2b0f      	cmp	r3, #15
 80008c4:	d808      	bhi.n	80008d8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80008c6:	2200      	movs	r2, #0
 80008c8:	6879      	ldr	r1, [r7, #4]
 80008ca:	201c      	movs	r0, #28
 80008cc:	f000 f9e4 	bl	8000c98 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008d0:	4a09      	ldr	r2, [pc, #36]	@ (80008f8 <HAL_InitTick+0xf4>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6013      	str	r3, [r2, #0]
 80008d6:	e002      	b.n	80008de <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80008d8:	2301      	movs	r3, #1
 80008da:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80008de:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3738      	adds	r7, #56	@ 0x38
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800
 80008f0:	431bde83 	.word	0x431bde83
 80008f4:	20000088 	.word	0x20000088
 80008f8:	20000004 	.word	0x20000004

080008fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <NMI_Handler+0x4>

08000904 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <HardFault_Handler+0x4>

0800090c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <MemManage_Handler+0x4>

08000914 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <BusFault_Handler+0x4>

0800091c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <UsageFault_Handler+0x4>

08000924 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
	...

08000934 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000938:	4802      	ldr	r0, [pc, #8]	@ (8000944 <TIM2_IRQHandler+0x10>)
 800093a:	f001 f92d 	bl	8001b98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000088 	.word	0x20000088

08000948 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800094c:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <SystemInit+0x20>)
 800094e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000952:	4a05      	ldr	r2, [pc, #20]	@ (8000968 <SystemInit+0x20>)
 8000954:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000958:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000970:	4b11      	ldr	r3, [pc, #68]	@ (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000972:	4a12      	ldr	r2, [pc, #72]	@ (80009bc <MX_USART2_UART_Init+0x50>)
 8000974:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000976:	4b10      	ldr	r3, [pc, #64]	@ (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000978:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800097c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800097e:	4b0e      	ldr	r3, [pc, #56]	@ (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000984:	4b0c      	ldr	r3, [pc, #48]	@ (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800098a:	4b0b      	ldr	r3, [pc, #44]	@ (80009b8 <MX_USART2_UART_Init+0x4c>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000990:	4b09      	ldr	r3, [pc, #36]	@ (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000992:	220c      	movs	r2, #12
 8000994:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000996:	4b08      	ldr	r3, [pc, #32]	@ (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800099c:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <MX_USART2_UART_Init+0x4c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009a2:	4805      	ldr	r0, [pc, #20]	@ (80009b8 <MX_USART2_UART_Init+0x4c>)
 80009a4:	f001 fab0 	bl	8001f08 <HAL_UART_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009ae:	f7ff fef6 	bl	800079e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200000d0 	.word	0x200000d0
 80009bc:	40004400 	.word	0x40004400

080009c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	@ 0x28
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a19      	ldr	r2, [pc, #100]	@ (8000a44 <HAL_UART_MspInit+0x84>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d12b      	bne.n	8000a3a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	4b18      	ldr	r3, [pc, #96]	@ (8000a48 <HAL_UART_MspInit+0x88>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ea:	4a17      	ldr	r2, [pc, #92]	@ (8000a48 <HAL_UART_MspInit+0x88>)
 80009ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f2:	4b15      	ldr	r3, [pc, #84]	@ (8000a48 <HAL_UART_MspInit+0x88>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	4b11      	ldr	r3, [pc, #68]	@ (8000a48 <HAL_UART_MspInit+0x88>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	4a10      	ldr	r2, [pc, #64]	@ (8000a48 <HAL_UART_MspInit+0x88>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a48 <HAL_UART_MspInit+0x88>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a1a:	230c      	movs	r3, #12
 8000a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a2a:	2307      	movs	r3, #7
 8000a2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	4619      	mov	r1, r3
 8000a34:	4805      	ldr	r0, [pc, #20]	@ (8000a4c <HAL_UART_MspInit+0x8c>)
 8000a36:	f000 f959 	bl	8000cec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a3a:	bf00      	nop
 8000a3c:	3728      	adds	r7, #40	@ 0x28
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40004400 	.word	0x40004400
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40020000 	.word	0x40020000

08000a50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a54:	f7ff ff78 	bl	8000948 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a58:	480c      	ldr	r0, [pc, #48]	@ (8000a8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a5a:	490d      	ldr	r1, [pc, #52]	@ (8000a90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a60:	e002      	b.n	8000a68 <LoopCopyDataInit>

08000a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a66:	3304      	adds	r3, #4

08000a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a6c:	d3f9      	bcc.n	8000a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a70:	4c0a      	ldr	r4, [pc, #40]	@ (8000a9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a74:	e001      	b.n	8000a7a <LoopFillZerobss>

08000a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a78:	3204      	adds	r2, #4

08000a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a7c:	d3fb      	bcc.n	8000a76 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000a7e:	f004 fb59 	bl	8005134 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a82:	f7ff fdff 	bl	8000684 <main>
  bx  lr    
 8000a86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a88:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a90:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000a94:	0800532c 	.word	0x0800532c
  ldr r2, =_sbss
 8000a98:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000a9c:	20004c44 	.word	0x20004c44

08000aa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa0:	e7fe      	b.n	8000aa0 <ADC_IRQHandler>
	...

08000aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae4 <HAL_Init+0x40>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae4 <HAL_Init+0x40>)
 8000aae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ab2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae4 <HAL_Init+0x40>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae4 <HAL_Init+0x40>)
 8000aba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000abe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac0:	4b08      	ldr	r3, [pc, #32]	@ (8000ae4 <HAL_Init+0x40>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a07      	ldr	r2, [pc, #28]	@ (8000ae4 <HAL_Init+0x40>)
 8000ac6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000aca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000acc:	2003      	movs	r0, #3
 8000ace:	f000 f8d8 	bl	8000c82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad2:	200f      	movs	r0, #15
 8000ad4:	f7ff fe96 	bl	8000804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad8:	f7ff fe68 	bl	80007ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023c00 	.word	0x40023c00

08000ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aec:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <HAL_IncTick+0x20>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <HAL_IncTick+0x24>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4413      	add	r3, r2
 8000af8:	4a04      	ldr	r2, [pc, #16]	@ (8000b0c <HAL_IncTick+0x24>)
 8000afa:	6013      	str	r3, [r2, #0]
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	20000118 	.word	0x20000118

08000b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return uwTick;
 8000b14:	4b03      	ldr	r3, [pc, #12]	@ (8000b24 <HAL_GetTick+0x14>)
 8000b16:	681b      	ldr	r3, [r3, #0]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20000118 	.word	0x20000118

08000b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f003 0307 	and.w	r3, r3, #7
 8000b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b38:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <__NVIC_SetPriorityGrouping+0x44>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b3e:	68ba      	ldr	r2, [r7, #8]
 8000b40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b44:	4013      	ands	r3, r2
 8000b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b5a:	4a04      	ldr	r2, [pc, #16]	@ (8000b6c <__NVIC_SetPriorityGrouping+0x44>)
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	60d3      	str	r3, [r2, #12]
}
 8000b60:	bf00      	nop
 8000b62:	3714      	adds	r7, #20
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b74:	4b04      	ldr	r3, [pc, #16]	@ (8000b88 <__NVIC_GetPriorityGrouping+0x18>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	0a1b      	lsrs	r3, r3, #8
 8000b7a:	f003 0307 	and.w	r3, r3, #7
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	db0b      	blt.n	8000bb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	f003 021f 	and.w	r2, r3, #31
 8000ba4:	4907      	ldr	r1, [pc, #28]	@ (8000bc4 <__NVIC_EnableIRQ+0x38>)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	095b      	lsrs	r3, r3, #5
 8000bac:	2001      	movs	r0, #1
 8000bae:	fa00 f202 	lsl.w	r2, r0, r2
 8000bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000e100 	.word	0xe000e100

08000bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	6039      	str	r1, [r7, #0]
 8000bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	db0a      	blt.n	8000bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	490c      	ldr	r1, [pc, #48]	@ (8000c14 <__NVIC_SetPriority+0x4c>)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	0112      	lsls	r2, r2, #4
 8000be8:	b2d2      	uxtb	r2, r2
 8000bea:	440b      	add	r3, r1
 8000bec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf0:	e00a      	b.n	8000c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	4908      	ldr	r1, [pc, #32]	@ (8000c18 <__NVIC_SetPriority+0x50>)
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	f003 030f 	and.w	r3, r3, #15
 8000bfe:	3b04      	subs	r3, #4
 8000c00:	0112      	lsls	r2, r2, #4
 8000c02:	b2d2      	uxtb	r2, r2
 8000c04:	440b      	add	r3, r1
 8000c06:	761a      	strb	r2, [r3, #24]
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000e100 	.word	0xe000e100
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b089      	sub	sp, #36	@ 0x24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	f1c3 0307 	rsb	r3, r3, #7
 8000c36:	2b04      	cmp	r3, #4
 8000c38:	bf28      	it	cs
 8000c3a:	2304      	movcs	r3, #4
 8000c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	3304      	adds	r3, #4
 8000c42:	2b06      	cmp	r3, #6
 8000c44:	d902      	bls.n	8000c4c <NVIC_EncodePriority+0x30>
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3b03      	subs	r3, #3
 8000c4a:	e000      	b.n	8000c4e <NVIC_EncodePriority+0x32>
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	f04f 32ff 	mov.w	r2, #4294967295
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	43da      	mvns	r2, r3
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	401a      	ands	r2, r3
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c64:	f04f 31ff 	mov.w	r1, #4294967295
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6e:	43d9      	mvns	r1, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	4313      	orrs	r3, r2
         );
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3724      	adds	r7, #36	@ 0x24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff ff4c 	bl	8000b28 <__NVIC_SetPriorityGrouping>
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
 8000ca4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000caa:	f7ff ff61 	bl	8000b70 <__NVIC_GetPriorityGrouping>
 8000cae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	68b9      	ldr	r1, [r7, #8]
 8000cb4:	6978      	ldr	r0, [r7, #20]
 8000cb6:	f7ff ffb1 	bl	8000c1c <NVIC_EncodePriority>
 8000cba:	4602      	mov	r2, r0
 8000cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc0:	4611      	mov	r1, r2
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff ff80 	bl	8000bc8 <__NVIC_SetPriority>
}
 8000cc8:	bf00      	nop
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff ff54 	bl	8000b8c <__NVIC_EnableIRQ>
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b089      	sub	sp, #36	@ 0x24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
 8000d06:	e159      	b.n	8000fbc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d08:	2201      	movs	r2, #1
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	697a      	ldr	r2, [r7, #20]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	f040 8148 	bne.w	8000fb6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f003 0303 	and.w	r3, r3, #3
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d005      	beq.n	8000d3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d130      	bne.n	8000da0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	2203      	movs	r2, #3
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	4013      	ands	r3, r2
 8000d54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	68da      	ldr	r2, [r3, #12]
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d74:	2201      	movs	r2, #1
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4013      	ands	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	091b      	lsrs	r3, r3, #4
 8000d8a:	f003 0201 	and.w	r2, r3, #1
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 0303 	and.w	r3, r3, #3
 8000da8:	2b03      	cmp	r3, #3
 8000daa:	d017      	beq.n	8000ddc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	2203      	movs	r2, #3
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	689a      	ldr	r2, [r3, #8]
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 0303 	and.w	r3, r3, #3
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d123      	bne.n	8000e30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	08da      	lsrs	r2, r3, #3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3208      	adds	r2, #8
 8000df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	f003 0307 	and.w	r3, r3, #7
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	220f      	movs	r2, #15
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	691a      	ldr	r2, [r3, #16]
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	08da      	lsrs	r2, r3, #3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	3208      	adds	r2, #8
 8000e2a:	69b9      	ldr	r1, [r7, #24]
 8000e2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 0203 	and.w	r2, r3, #3
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	f000 80a2 	beq.w	8000fb6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	4b57      	ldr	r3, [pc, #348]	@ (8000fd4 <HAL_GPIO_Init+0x2e8>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e7a:	4a56      	ldr	r2, [pc, #344]	@ (8000fd4 <HAL_GPIO_Init+0x2e8>)
 8000e7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e82:	4b54      	ldr	r3, [pc, #336]	@ (8000fd4 <HAL_GPIO_Init+0x2e8>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e8e:	4a52      	ldr	r2, [pc, #328]	@ (8000fd8 <HAL_GPIO_Init+0x2ec>)
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	089b      	lsrs	r3, r3, #2
 8000e94:	3302      	adds	r3, #2
 8000e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	f003 0303 	and.w	r3, r3, #3
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	220f      	movs	r2, #15
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a49      	ldr	r2, [pc, #292]	@ (8000fdc <HAL_GPIO_Init+0x2f0>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d019      	beq.n	8000eee <HAL_GPIO_Init+0x202>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a48      	ldr	r2, [pc, #288]	@ (8000fe0 <HAL_GPIO_Init+0x2f4>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d013      	beq.n	8000eea <HAL_GPIO_Init+0x1fe>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a47      	ldr	r2, [pc, #284]	@ (8000fe4 <HAL_GPIO_Init+0x2f8>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d00d      	beq.n	8000ee6 <HAL_GPIO_Init+0x1fa>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a46      	ldr	r2, [pc, #280]	@ (8000fe8 <HAL_GPIO_Init+0x2fc>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d007      	beq.n	8000ee2 <HAL_GPIO_Init+0x1f6>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a45      	ldr	r2, [pc, #276]	@ (8000fec <HAL_GPIO_Init+0x300>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d101      	bne.n	8000ede <HAL_GPIO_Init+0x1f2>
 8000eda:	2304      	movs	r3, #4
 8000edc:	e008      	b.n	8000ef0 <HAL_GPIO_Init+0x204>
 8000ede:	2307      	movs	r3, #7
 8000ee0:	e006      	b.n	8000ef0 <HAL_GPIO_Init+0x204>
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e004      	b.n	8000ef0 <HAL_GPIO_Init+0x204>
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	e002      	b.n	8000ef0 <HAL_GPIO_Init+0x204>
 8000eea:	2301      	movs	r3, #1
 8000eec:	e000      	b.n	8000ef0 <HAL_GPIO_Init+0x204>
 8000eee:	2300      	movs	r3, #0
 8000ef0:	69fa      	ldr	r2, [r7, #28]
 8000ef2:	f002 0203 	and.w	r2, r2, #3
 8000ef6:	0092      	lsls	r2, r2, #2
 8000ef8:	4093      	lsls	r3, r2
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f00:	4935      	ldr	r1, [pc, #212]	@ (8000fd8 <HAL_GPIO_Init+0x2ec>)
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	089b      	lsrs	r3, r3, #2
 8000f06:	3302      	adds	r3, #2
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f0e:	4b38      	ldr	r3, [pc, #224]	@ (8000ff0 <HAL_GPIO_Init+0x304>)
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f32:	4a2f      	ldr	r2, [pc, #188]	@ (8000ff0 <HAL_GPIO_Init+0x304>)
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f38:	4b2d      	ldr	r3, [pc, #180]	@ (8000ff0 <HAL_GPIO_Init+0x304>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f5c:	4a24      	ldr	r2, [pc, #144]	@ (8000ff0 <HAL_GPIO_Init+0x304>)
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f62:	4b23      	ldr	r3, [pc, #140]	@ (8000ff0 <HAL_GPIO_Init+0x304>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f86:	4a1a      	ldr	r2, [pc, #104]	@ (8000ff0 <HAL_GPIO_Init+0x304>)
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f8c:	4b18      	ldr	r3, [pc, #96]	@ (8000ff0 <HAL_GPIO_Init+0x304>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d003      	beq.n	8000fb0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fb0:	4a0f      	ldr	r2, [pc, #60]	@ (8000ff0 <HAL_GPIO_Init+0x304>)
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	61fb      	str	r3, [r7, #28]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	2b0f      	cmp	r3, #15
 8000fc0:	f67f aea2 	bls.w	8000d08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	bf00      	nop
 8000fc8:	3724      	adds	r7, #36	@ 0x24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40013800 	.word	0x40013800
 8000fdc:	40020000 	.word	0x40020000
 8000fe0:	40020400 	.word	0x40020400
 8000fe4:	40020800 	.word	0x40020800
 8000fe8:	40020c00 	.word	0x40020c00
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40013c00 	.word	0x40013c00

08000ff4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	691a      	ldr	r2, [r3, #16]
 8001004:	887b      	ldrh	r3, [r7, #2]
 8001006:	4013      	ands	r3, r2
 8001008:	2b00      	cmp	r3, #0
 800100a:	d002      	beq.n	8001012 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800100c:	2301      	movs	r3, #1
 800100e:	73fb      	strb	r3, [r7, #15]
 8001010:	e001      	b.n	8001016 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001012:	2300      	movs	r3, #0
 8001014:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001016:	7bfb      	ldrb	r3, [r7, #15]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	460b      	mov	r3, r1
 800102e:	807b      	strh	r3, [r7, #2]
 8001030:	4613      	mov	r3, r2
 8001032:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001034:	787b      	ldrb	r3, [r7, #1]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800103a:	887a      	ldrh	r2, [r7, #2]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001040:	e003      	b.n	800104a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001042:	887b      	ldrh	r3, [r7, #2]
 8001044:	041a      	lsls	r2, r3, #16
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	619a      	str	r2, [r3, #24]
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001056:	b480      	push	{r7}
 8001058:	b085      	sub	sp, #20
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
 800105e:	460b      	mov	r3, r1
 8001060:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001068:	887a      	ldrh	r2, [r7, #2]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	4013      	ands	r3, r2
 800106e:	041a      	lsls	r2, r3, #16
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	43d9      	mvns	r1, r3
 8001074:	887b      	ldrh	r3, [r7, #2]
 8001076:	400b      	ands	r3, r1
 8001078:	431a      	orrs	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	619a      	str	r2, [r3, #24]
}
 800107e:	bf00      	nop
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
	...

0800108c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d101      	bne.n	800109e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e267      	b.n	800156e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d075      	beq.n	8001196 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010aa:	4b88      	ldr	r3, [pc, #544]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f003 030c 	and.w	r3, r3, #12
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	d00c      	beq.n	80010d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010b6:	4b85      	ldr	r3, [pc, #532]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010be:	2b08      	cmp	r3, #8
 80010c0:	d112      	bne.n	80010e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010c2:	4b82      	ldr	r3, [pc, #520]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80010ce:	d10b      	bne.n	80010e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d0:	4b7e      	ldr	r3, [pc, #504]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d05b      	beq.n	8001194 <HAL_RCC_OscConfig+0x108>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d157      	bne.n	8001194 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e242      	b.n	800156e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010f0:	d106      	bne.n	8001100 <HAL_RCC_OscConfig+0x74>
 80010f2:	4b76      	ldr	r3, [pc, #472]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a75      	ldr	r2, [pc, #468]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 80010f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	e01d      	b.n	800113c <HAL_RCC_OscConfig+0xb0>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001108:	d10c      	bne.n	8001124 <HAL_RCC_OscConfig+0x98>
 800110a:	4b70      	ldr	r3, [pc, #448]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a6f      	ldr	r2, [pc, #444]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 8001110:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	4b6d      	ldr	r3, [pc, #436]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a6c      	ldr	r2, [pc, #432]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 800111c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	e00b      	b.n	800113c <HAL_RCC_OscConfig+0xb0>
 8001124:	4b69      	ldr	r3, [pc, #420]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a68      	ldr	r2, [pc, #416]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 800112a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800112e:	6013      	str	r3, [r2, #0]
 8001130:	4b66      	ldr	r3, [pc, #408]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a65      	ldr	r2, [pc, #404]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 8001136:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800113a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d013      	beq.n	800116c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001144:	f7ff fce4 	bl	8000b10 <HAL_GetTick>
 8001148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800114a:	e008      	b.n	800115e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800114c:	f7ff fce0 	bl	8000b10 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b64      	cmp	r3, #100	@ 0x64
 8001158:	d901      	bls.n	800115e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e207      	b.n	800156e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115e:	4b5b      	ldr	r3, [pc, #364]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d0f0      	beq.n	800114c <HAL_RCC_OscConfig+0xc0>
 800116a:	e014      	b.n	8001196 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116c:	f7ff fcd0 	bl	8000b10 <HAL_GetTick>
 8001170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001172:	e008      	b.n	8001186 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001174:	f7ff fccc 	bl	8000b10 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b64      	cmp	r3, #100	@ 0x64
 8001180:	d901      	bls.n	8001186 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e1f3      	b.n	800156e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001186:	4b51      	ldr	r3, [pc, #324]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1f0      	bne.n	8001174 <HAL_RCC_OscConfig+0xe8>
 8001192:	e000      	b.n	8001196 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d063      	beq.n	800126a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011a2:	4b4a      	ldr	r3, [pc, #296]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f003 030c 	and.w	r3, r3, #12
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d00b      	beq.n	80011c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ae:	4b47      	ldr	r3, [pc, #284]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011b6:	2b08      	cmp	r3, #8
 80011b8:	d11c      	bne.n	80011f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ba:	4b44      	ldr	r3, [pc, #272]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d116      	bne.n	80011f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011c6:	4b41      	ldr	r3, [pc, #260]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d005      	beq.n	80011de <HAL_RCC_OscConfig+0x152>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d001      	beq.n	80011de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e1c7      	b.n	800156e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011de:	4b3b      	ldr	r3, [pc, #236]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	4937      	ldr	r1, [pc, #220]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 80011ee:	4313      	orrs	r3, r2
 80011f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011f2:	e03a      	b.n	800126a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d020      	beq.n	800123e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011fc:	4b34      	ldr	r3, [pc, #208]	@ (80012d0 <HAL_RCC_OscConfig+0x244>)
 80011fe:	2201      	movs	r2, #1
 8001200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001202:	f7ff fc85 	bl	8000b10 <HAL_GetTick>
 8001206:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001208:	e008      	b.n	800121c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800120a:	f7ff fc81 	bl	8000b10 <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d901      	bls.n	800121c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e1a8      	b.n	800156e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800121c:	4b2b      	ldr	r3, [pc, #172]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d0f0      	beq.n	800120a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001228:	4b28      	ldr	r3, [pc, #160]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	691b      	ldr	r3, [r3, #16]
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	4925      	ldr	r1, [pc, #148]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 8001238:	4313      	orrs	r3, r2
 800123a:	600b      	str	r3, [r1, #0]
 800123c:	e015      	b.n	800126a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800123e:	4b24      	ldr	r3, [pc, #144]	@ (80012d0 <HAL_RCC_OscConfig+0x244>)
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001244:	f7ff fc64 	bl	8000b10 <HAL_GetTick>
 8001248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800124c:	f7ff fc60 	bl	8000b10 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e187      	b.n	800156e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800125e:	4b1b      	ldr	r3, [pc, #108]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1f0      	bne.n	800124c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	2b00      	cmp	r3, #0
 8001274:	d036      	beq.n	80012e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d016      	beq.n	80012ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800127e:	4b15      	ldr	r3, [pc, #84]	@ (80012d4 <HAL_RCC_OscConfig+0x248>)
 8001280:	2201      	movs	r2, #1
 8001282:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001284:	f7ff fc44 	bl	8000b10 <HAL_GetTick>
 8001288:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800128c:	f7ff fc40 	bl	8000b10 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b02      	cmp	r3, #2
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e167      	b.n	800156e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800129e:	4b0b      	ldr	r3, [pc, #44]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 80012a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d0f0      	beq.n	800128c <HAL_RCC_OscConfig+0x200>
 80012aa:	e01b      	b.n	80012e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012ac:	4b09      	ldr	r3, [pc, #36]	@ (80012d4 <HAL_RCC_OscConfig+0x248>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b2:	f7ff fc2d 	bl	8000b10 <HAL_GetTick>
 80012b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b8:	e00e      	b.n	80012d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ba:	f7ff fc29 	bl	8000b10 <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d907      	bls.n	80012d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e150      	b.n	800156e <HAL_RCC_OscConfig+0x4e2>
 80012cc:	40023800 	.word	0x40023800
 80012d0:	42470000 	.word	0x42470000
 80012d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d8:	4b88      	ldr	r3, [pc, #544]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 80012da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1ea      	bne.n	80012ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 8097 	beq.w	8001420 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012f2:	2300      	movs	r3, #0
 80012f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012f6:	4b81      	ldr	r3, [pc, #516]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d10f      	bne.n	8001322 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	4b7d      	ldr	r3, [pc, #500]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130a:	4a7c      	ldr	r2, [pc, #496]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 800130c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001310:	6413      	str	r3, [r2, #64]	@ 0x40
 8001312:	4b7a      	ldr	r3, [pc, #488]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800131e:	2301      	movs	r3, #1
 8001320:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001322:	4b77      	ldr	r3, [pc, #476]	@ (8001500 <HAL_RCC_OscConfig+0x474>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800132a:	2b00      	cmp	r3, #0
 800132c:	d118      	bne.n	8001360 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800132e:	4b74      	ldr	r3, [pc, #464]	@ (8001500 <HAL_RCC_OscConfig+0x474>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a73      	ldr	r2, [pc, #460]	@ (8001500 <HAL_RCC_OscConfig+0x474>)
 8001334:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001338:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800133a:	f7ff fbe9 	bl	8000b10 <HAL_GetTick>
 800133e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001340:	e008      	b.n	8001354 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001342:	f7ff fbe5 	bl	8000b10 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e10c      	b.n	800156e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001354:	4b6a      	ldr	r3, [pc, #424]	@ (8001500 <HAL_RCC_OscConfig+0x474>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800135c:	2b00      	cmp	r3, #0
 800135e:	d0f0      	beq.n	8001342 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d106      	bne.n	8001376 <HAL_RCC_OscConfig+0x2ea>
 8001368:	4b64      	ldr	r3, [pc, #400]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 800136a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800136c:	4a63      	ldr	r2, [pc, #396]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	6713      	str	r3, [r2, #112]	@ 0x70
 8001374:	e01c      	b.n	80013b0 <HAL_RCC_OscConfig+0x324>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	2b05      	cmp	r3, #5
 800137c:	d10c      	bne.n	8001398 <HAL_RCC_OscConfig+0x30c>
 800137e:	4b5f      	ldr	r3, [pc, #380]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 8001380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001382:	4a5e      	ldr	r2, [pc, #376]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	6713      	str	r3, [r2, #112]	@ 0x70
 800138a:	4b5c      	ldr	r3, [pc, #368]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 800138c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800138e:	4a5b      	ldr	r2, [pc, #364]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6713      	str	r3, [r2, #112]	@ 0x70
 8001396:	e00b      	b.n	80013b0 <HAL_RCC_OscConfig+0x324>
 8001398:	4b58      	ldr	r3, [pc, #352]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 800139a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800139c:	4a57      	ldr	r2, [pc, #348]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 800139e:	f023 0301 	bic.w	r3, r3, #1
 80013a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80013a4:	4b55      	ldr	r3, [pc, #340]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 80013a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013a8:	4a54      	ldr	r2, [pc, #336]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 80013aa:	f023 0304 	bic.w	r3, r3, #4
 80013ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d015      	beq.n	80013e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b8:	f7ff fbaa 	bl	8000b10 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013be:	e00a      	b.n	80013d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013c0:	f7ff fba6 	bl	8000b10 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e0cb      	b.n	800156e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d6:	4b49      	ldr	r3, [pc, #292]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 80013d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0ee      	beq.n	80013c0 <HAL_RCC_OscConfig+0x334>
 80013e2:	e014      	b.n	800140e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e4:	f7ff fb94 	bl	8000b10 <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ea:	e00a      	b.n	8001402 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ec:	f7ff fb90 	bl	8000b10 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e0b5      	b.n	800156e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001402:	4b3e      	ldr	r3, [pc, #248]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 8001404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1ee      	bne.n	80013ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800140e:	7dfb      	ldrb	r3, [r7, #23]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d105      	bne.n	8001420 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001414:	4b39      	ldr	r3, [pc, #228]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 8001416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001418:	4a38      	ldr	r2, [pc, #224]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 800141a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800141e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	2b00      	cmp	r3, #0
 8001426:	f000 80a1 	beq.w	800156c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800142a:	4b34      	ldr	r3, [pc, #208]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f003 030c 	and.w	r3, r3, #12
 8001432:	2b08      	cmp	r3, #8
 8001434:	d05c      	beq.n	80014f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	2b02      	cmp	r3, #2
 800143c:	d141      	bne.n	80014c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800143e:	4b31      	ldr	r3, [pc, #196]	@ (8001504 <HAL_RCC_OscConfig+0x478>)
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001444:	f7ff fb64 	bl	8000b10 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800144c:	f7ff fb60 	bl	8000b10 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e087      	b.n	800156e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800145e:	4b27      	ldr	r3, [pc, #156]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f0      	bne.n	800144c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	69da      	ldr	r2, [r3, #28]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a1b      	ldr	r3, [r3, #32]
 8001472:	431a      	orrs	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001478:	019b      	lsls	r3, r3, #6
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001480:	085b      	lsrs	r3, r3, #1
 8001482:	3b01      	subs	r3, #1
 8001484:	041b      	lsls	r3, r3, #16
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800148c:	061b      	lsls	r3, r3, #24
 800148e:	491b      	ldr	r1, [pc, #108]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 8001490:	4313      	orrs	r3, r2
 8001492:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001494:	4b1b      	ldr	r3, [pc, #108]	@ (8001504 <HAL_RCC_OscConfig+0x478>)
 8001496:	2201      	movs	r2, #1
 8001498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149a:	f7ff fb39 	bl	8000b10 <HAL_GetTick>
 800149e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a0:	e008      	b.n	80014b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a2:	f7ff fb35 	bl	8000b10 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e05c      	b.n	800156e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b4:	4b11      	ldr	r3, [pc, #68]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d0f0      	beq.n	80014a2 <HAL_RCC_OscConfig+0x416>
 80014c0:	e054      	b.n	800156c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c2:	4b10      	ldr	r3, [pc, #64]	@ (8001504 <HAL_RCC_OscConfig+0x478>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c8:	f7ff fb22 	bl	8000b10 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014d0:	f7ff fb1e 	bl	8000b10 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e045      	b.n	800156e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e2:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1f0      	bne.n	80014d0 <HAL_RCC_OscConfig+0x444>
 80014ee:	e03d      	b.n	800156c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d107      	bne.n	8001508 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e038      	b.n	800156e <HAL_RCC_OscConfig+0x4e2>
 80014fc:	40023800 	.word	0x40023800
 8001500:	40007000 	.word	0x40007000
 8001504:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001508:	4b1b      	ldr	r3, [pc, #108]	@ (8001578 <HAL_RCC_OscConfig+0x4ec>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d028      	beq.n	8001568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001520:	429a      	cmp	r2, r3
 8001522:	d121      	bne.n	8001568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800152e:	429a      	cmp	r2, r3
 8001530:	d11a      	bne.n	8001568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001538:	4013      	ands	r3, r2
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800153e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001540:	4293      	cmp	r3, r2
 8001542:	d111      	bne.n	8001568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800154e:	085b      	lsrs	r3, r3, #1
 8001550:	3b01      	subs	r3, #1
 8001552:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001554:	429a      	cmp	r2, r3
 8001556:	d107      	bne.n	8001568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001562:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001564:	429a      	cmp	r2, r3
 8001566:	d001      	beq.n	800156c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e000      	b.n	800156e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3718      	adds	r7, #24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800

0800157c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e0cc      	b.n	800172a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001590:	4b68      	ldr	r3, [pc, #416]	@ (8001734 <HAL_RCC_ClockConfig+0x1b8>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0307 	and.w	r3, r3, #7
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	429a      	cmp	r2, r3
 800159c:	d90c      	bls.n	80015b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159e:	4b65      	ldr	r3, [pc, #404]	@ (8001734 <HAL_RCC_ClockConfig+0x1b8>)
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a6:	4b63      	ldr	r3, [pc, #396]	@ (8001734 <HAL_RCC_ClockConfig+0x1b8>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d001      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e0b8      	b.n	800172a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d020      	beq.n	8001606 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d005      	beq.n	80015dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015d0:	4b59      	ldr	r3, [pc, #356]	@ (8001738 <HAL_RCC_ClockConfig+0x1bc>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	4a58      	ldr	r2, [pc, #352]	@ (8001738 <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0308 	and.w	r3, r3, #8
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d005      	beq.n	80015f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015e8:	4b53      	ldr	r3, [pc, #332]	@ (8001738 <HAL_RCC_ClockConfig+0x1bc>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	4a52      	ldr	r2, [pc, #328]	@ (8001738 <HAL_RCC_ClockConfig+0x1bc>)
 80015ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80015f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015f4:	4b50      	ldr	r3, [pc, #320]	@ (8001738 <HAL_RCC_ClockConfig+0x1bc>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	494d      	ldr	r1, [pc, #308]	@ (8001738 <HAL_RCC_ClockConfig+0x1bc>)
 8001602:	4313      	orrs	r3, r2
 8001604:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d044      	beq.n	800169c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d107      	bne.n	800162a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161a:	4b47      	ldr	r3, [pc, #284]	@ (8001738 <HAL_RCC_ClockConfig+0x1bc>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d119      	bne.n	800165a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e07f      	b.n	800172a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b02      	cmp	r3, #2
 8001630:	d003      	beq.n	800163a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001636:	2b03      	cmp	r3, #3
 8001638:	d107      	bne.n	800164a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800163a:	4b3f      	ldr	r3, [pc, #252]	@ (8001738 <HAL_RCC_ClockConfig+0x1bc>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d109      	bne.n	800165a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e06f      	b.n	800172a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800164a:	4b3b      	ldr	r3, [pc, #236]	@ (8001738 <HAL_RCC_ClockConfig+0x1bc>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e067      	b.n	800172a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800165a:	4b37      	ldr	r3, [pc, #220]	@ (8001738 <HAL_RCC_ClockConfig+0x1bc>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f023 0203 	bic.w	r2, r3, #3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	4934      	ldr	r1, [pc, #208]	@ (8001738 <HAL_RCC_ClockConfig+0x1bc>)
 8001668:	4313      	orrs	r3, r2
 800166a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800166c:	f7ff fa50 	bl	8000b10 <HAL_GetTick>
 8001670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001672:	e00a      	b.n	800168a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001674:	f7ff fa4c 	bl	8000b10 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001682:	4293      	cmp	r3, r2
 8001684:	d901      	bls.n	800168a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e04f      	b.n	800172a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168a:	4b2b      	ldr	r3, [pc, #172]	@ (8001738 <HAL_RCC_ClockConfig+0x1bc>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 020c 	and.w	r2, r3, #12
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	429a      	cmp	r2, r3
 800169a:	d1eb      	bne.n	8001674 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800169c:	4b25      	ldr	r3, [pc, #148]	@ (8001734 <HAL_RCC_ClockConfig+0x1b8>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d20c      	bcs.n	80016c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016aa:	4b22      	ldr	r3, [pc, #136]	@ (8001734 <HAL_RCC_ClockConfig+0x1b8>)
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016b2:	4b20      	ldr	r3, [pc, #128]	@ (8001734 <HAL_RCC_ClockConfig+0x1b8>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	683a      	ldr	r2, [r7, #0]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d001      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e032      	b.n	800172a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d008      	beq.n	80016e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016d0:	4b19      	ldr	r3, [pc, #100]	@ (8001738 <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	4916      	ldr	r1, [pc, #88]	@ (8001738 <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0308 	and.w	r3, r3, #8
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d009      	beq.n	8001702 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016ee:	4b12      	ldr	r3, [pc, #72]	@ (8001738 <HAL_RCC_ClockConfig+0x1bc>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	490e      	ldr	r1, [pc, #56]	@ (8001738 <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001702:	f000 f821 	bl	8001748 <HAL_RCC_GetSysClockFreq>
 8001706:	4602      	mov	r2, r0
 8001708:	4b0b      	ldr	r3, [pc, #44]	@ (8001738 <HAL_RCC_ClockConfig+0x1bc>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	091b      	lsrs	r3, r3, #4
 800170e:	f003 030f 	and.w	r3, r3, #15
 8001712:	490a      	ldr	r1, [pc, #40]	@ (800173c <HAL_RCC_ClockConfig+0x1c0>)
 8001714:	5ccb      	ldrb	r3, [r1, r3]
 8001716:	fa22 f303 	lsr.w	r3, r2, r3
 800171a:	4a09      	ldr	r2, [pc, #36]	@ (8001740 <HAL_RCC_ClockConfig+0x1c4>)
 800171c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800171e:	4b09      	ldr	r3, [pc, #36]	@ (8001744 <HAL_RCC_ClockConfig+0x1c8>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff f86e 	bl	8000804 <HAL_InitTick>

  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40023c00 	.word	0x40023c00
 8001738:	40023800 	.word	0x40023800
 800173c:	08005304 	.word	0x08005304
 8001740:	20000000 	.word	0x20000000
 8001744:	20000004 	.word	0x20000004

08001748 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800174c:	b094      	sub	sp, #80	@ 0x50
 800174e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	647b      	str	r3, [r7, #68]	@ 0x44
 8001754:	2300      	movs	r3, #0
 8001756:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001758:	2300      	movs	r3, #0
 800175a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800175c:	2300      	movs	r3, #0
 800175e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001760:	4b79      	ldr	r3, [pc, #484]	@ (8001948 <HAL_RCC_GetSysClockFreq+0x200>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 030c 	and.w	r3, r3, #12
 8001768:	2b08      	cmp	r3, #8
 800176a:	d00d      	beq.n	8001788 <HAL_RCC_GetSysClockFreq+0x40>
 800176c:	2b08      	cmp	r3, #8
 800176e:	f200 80e1 	bhi.w	8001934 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001772:	2b00      	cmp	r3, #0
 8001774:	d002      	beq.n	800177c <HAL_RCC_GetSysClockFreq+0x34>
 8001776:	2b04      	cmp	r3, #4
 8001778:	d003      	beq.n	8001782 <HAL_RCC_GetSysClockFreq+0x3a>
 800177a:	e0db      	b.n	8001934 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800177c:	4b73      	ldr	r3, [pc, #460]	@ (800194c <HAL_RCC_GetSysClockFreq+0x204>)
 800177e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001780:	e0db      	b.n	800193a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001782:	4b73      	ldr	r3, [pc, #460]	@ (8001950 <HAL_RCC_GetSysClockFreq+0x208>)
 8001784:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001786:	e0d8      	b.n	800193a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001788:	4b6f      	ldr	r3, [pc, #444]	@ (8001948 <HAL_RCC_GetSysClockFreq+0x200>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001790:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001792:	4b6d      	ldr	r3, [pc, #436]	@ (8001948 <HAL_RCC_GetSysClockFreq+0x200>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d063      	beq.n	8001866 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800179e:	4b6a      	ldr	r3, [pc, #424]	@ (8001948 <HAL_RCC_GetSysClockFreq+0x200>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	099b      	lsrs	r3, r3, #6
 80017a4:	2200      	movs	r2, #0
 80017a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80017a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80017aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80017b2:	2300      	movs	r3, #0
 80017b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80017b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80017ba:	4622      	mov	r2, r4
 80017bc:	462b      	mov	r3, r5
 80017be:	f04f 0000 	mov.w	r0, #0
 80017c2:	f04f 0100 	mov.w	r1, #0
 80017c6:	0159      	lsls	r1, r3, #5
 80017c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017cc:	0150      	lsls	r0, r2, #5
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4621      	mov	r1, r4
 80017d4:	1a51      	subs	r1, r2, r1
 80017d6:	6139      	str	r1, [r7, #16]
 80017d8:	4629      	mov	r1, r5
 80017da:	eb63 0301 	sbc.w	r3, r3, r1
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	f04f 0200 	mov.w	r2, #0
 80017e4:	f04f 0300 	mov.w	r3, #0
 80017e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80017ec:	4659      	mov	r1, fp
 80017ee:	018b      	lsls	r3, r1, #6
 80017f0:	4651      	mov	r1, sl
 80017f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017f6:	4651      	mov	r1, sl
 80017f8:	018a      	lsls	r2, r1, #6
 80017fa:	4651      	mov	r1, sl
 80017fc:	ebb2 0801 	subs.w	r8, r2, r1
 8001800:	4659      	mov	r1, fp
 8001802:	eb63 0901 	sbc.w	r9, r3, r1
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	f04f 0300 	mov.w	r3, #0
 800180e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001812:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001816:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800181a:	4690      	mov	r8, r2
 800181c:	4699      	mov	r9, r3
 800181e:	4623      	mov	r3, r4
 8001820:	eb18 0303 	adds.w	r3, r8, r3
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	462b      	mov	r3, r5
 8001828:	eb49 0303 	adc.w	r3, r9, r3
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	f04f 0200 	mov.w	r2, #0
 8001832:	f04f 0300 	mov.w	r3, #0
 8001836:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800183a:	4629      	mov	r1, r5
 800183c:	024b      	lsls	r3, r1, #9
 800183e:	4621      	mov	r1, r4
 8001840:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001844:	4621      	mov	r1, r4
 8001846:	024a      	lsls	r2, r1, #9
 8001848:	4610      	mov	r0, r2
 800184a:	4619      	mov	r1, r3
 800184c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800184e:	2200      	movs	r2, #0
 8001850:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001852:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001854:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001858:	f7fe fcc2 	bl	80001e0 <__aeabi_uldivmod>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4613      	mov	r3, r2
 8001862:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001864:	e058      	b.n	8001918 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001866:	4b38      	ldr	r3, [pc, #224]	@ (8001948 <HAL_RCC_GetSysClockFreq+0x200>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	099b      	lsrs	r3, r3, #6
 800186c:	2200      	movs	r2, #0
 800186e:	4618      	mov	r0, r3
 8001870:	4611      	mov	r1, r2
 8001872:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001876:	623b      	str	r3, [r7, #32]
 8001878:	2300      	movs	r3, #0
 800187a:	627b      	str	r3, [r7, #36]	@ 0x24
 800187c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001880:	4642      	mov	r2, r8
 8001882:	464b      	mov	r3, r9
 8001884:	f04f 0000 	mov.w	r0, #0
 8001888:	f04f 0100 	mov.w	r1, #0
 800188c:	0159      	lsls	r1, r3, #5
 800188e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001892:	0150      	lsls	r0, r2, #5
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4641      	mov	r1, r8
 800189a:	ebb2 0a01 	subs.w	sl, r2, r1
 800189e:	4649      	mov	r1, r9
 80018a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018b8:	ebb2 040a 	subs.w	r4, r2, sl
 80018bc:	eb63 050b 	sbc.w	r5, r3, fp
 80018c0:	f04f 0200 	mov.w	r2, #0
 80018c4:	f04f 0300 	mov.w	r3, #0
 80018c8:	00eb      	lsls	r3, r5, #3
 80018ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018ce:	00e2      	lsls	r2, r4, #3
 80018d0:	4614      	mov	r4, r2
 80018d2:	461d      	mov	r5, r3
 80018d4:	4643      	mov	r3, r8
 80018d6:	18e3      	adds	r3, r4, r3
 80018d8:	603b      	str	r3, [r7, #0]
 80018da:	464b      	mov	r3, r9
 80018dc:	eb45 0303 	adc.w	r3, r5, r3
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	f04f 0200 	mov.w	r2, #0
 80018e6:	f04f 0300 	mov.w	r3, #0
 80018ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018ee:	4629      	mov	r1, r5
 80018f0:	028b      	lsls	r3, r1, #10
 80018f2:	4621      	mov	r1, r4
 80018f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018f8:	4621      	mov	r1, r4
 80018fa:	028a      	lsls	r2, r1, #10
 80018fc:	4610      	mov	r0, r2
 80018fe:	4619      	mov	r1, r3
 8001900:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001902:	2200      	movs	r2, #0
 8001904:	61bb      	str	r3, [r7, #24]
 8001906:	61fa      	str	r2, [r7, #28]
 8001908:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800190c:	f7fe fc68 	bl	80001e0 <__aeabi_uldivmod>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4613      	mov	r3, r2
 8001916:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001918:	4b0b      	ldr	r3, [pc, #44]	@ (8001948 <HAL_RCC_GetSysClockFreq+0x200>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	0c1b      	lsrs	r3, r3, #16
 800191e:	f003 0303 	and.w	r3, r3, #3
 8001922:	3301      	adds	r3, #1
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001928:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800192a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800192c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001930:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001932:	e002      	b.n	800193a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001934:	4b05      	ldr	r3, [pc, #20]	@ (800194c <HAL_RCC_GetSysClockFreq+0x204>)
 8001936:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001938:	bf00      	nop
    }
  }
  return sysclockfreq;
 800193a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800193c:	4618      	mov	r0, r3
 800193e:	3750      	adds	r7, #80	@ 0x50
 8001940:	46bd      	mov	sp, r7
 8001942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800
 800194c:	00f42400 	.word	0x00f42400
 8001950:	007a1200 	.word	0x007a1200

08001954 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001958:	4b03      	ldr	r3, [pc, #12]	@ (8001968 <HAL_RCC_GetHCLKFreq+0x14>)
 800195a:	681b      	ldr	r3, [r3, #0]
}
 800195c:	4618      	mov	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	20000000 	.word	0x20000000

0800196c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001970:	f7ff fff0 	bl	8001954 <HAL_RCC_GetHCLKFreq>
 8001974:	4602      	mov	r2, r0
 8001976:	4b05      	ldr	r3, [pc, #20]	@ (800198c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	0a9b      	lsrs	r3, r3, #10
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	4903      	ldr	r1, [pc, #12]	@ (8001990 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001982:	5ccb      	ldrb	r3, [r1, r3]
 8001984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001988:	4618      	mov	r0, r3
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40023800 	.word	0x40023800
 8001990:	08005314 	.word	0x08005314

08001994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001998:	f7ff ffdc 	bl	8001954 <HAL_RCC_GetHCLKFreq>
 800199c:	4602      	mov	r2, r0
 800199e:	4b05      	ldr	r3, [pc, #20]	@ (80019b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	0b5b      	lsrs	r3, r3, #13
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	4903      	ldr	r1, [pc, #12]	@ (80019b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019aa:	5ccb      	ldrb	r3, [r1, r3]
 80019ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40023800 	.word	0x40023800
 80019b8:	08005314 	.word	0x08005314

080019bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	220f      	movs	r2, #15
 80019ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019cc:	4b12      	ldr	r3, [pc, #72]	@ (8001a18 <HAL_RCC_GetClockConfig+0x5c>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 0203 	and.w	r2, r3, #3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a18 <HAL_RCC_GetClockConfig+0x5c>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a18 <HAL_RCC_GetClockConfig+0x5c>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019f0:	4b09      	ldr	r3, [pc, #36]	@ (8001a18 <HAL_RCC_GetClockConfig+0x5c>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	08db      	lsrs	r3, r3, #3
 80019f6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019fe:	4b07      	ldr	r3, [pc, #28]	@ (8001a1c <HAL_RCC_GetClockConfig+0x60>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0207 	and.w	r2, r3, #7
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	601a      	str	r2, [r3, #0]
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40023c00 	.word	0x40023c00

08001a20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e041      	b.n	8001ab6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d106      	bne.n	8001a4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 f839 	bl	8001abe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2202      	movs	r2, #2
 8001a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3304      	adds	r3, #4
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4610      	mov	r0, r2
 8001a60:	f000 f9b2 	bl	8001dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
	...

08001ad4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d001      	beq.n	8001aec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e044      	b.n	8001b76 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2202      	movs	r2, #2
 8001af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0201 	orr.w	r2, r2, #1
 8001b02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a1e      	ldr	r2, [pc, #120]	@ (8001b84 <HAL_TIM_Base_Start_IT+0xb0>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d018      	beq.n	8001b40 <HAL_TIM_Base_Start_IT+0x6c>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b16:	d013      	beq.n	8001b40 <HAL_TIM_Base_Start_IT+0x6c>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a1a      	ldr	r2, [pc, #104]	@ (8001b88 <HAL_TIM_Base_Start_IT+0xb4>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d00e      	beq.n	8001b40 <HAL_TIM_Base_Start_IT+0x6c>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a19      	ldr	r2, [pc, #100]	@ (8001b8c <HAL_TIM_Base_Start_IT+0xb8>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d009      	beq.n	8001b40 <HAL_TIM_Base_Start_IT+0x6c>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a17      	ldr	r2, [pc, #92]	@ (8001b90 <HAL_TIM_Base_Start_IT+0xbc>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d004      	beq.n	8001b40 <HAL_TIM_Base_Start_IT+0x6c>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a16      	ldr	r2, [pc, #88]	@ (8001b94 <HAL_TIM_Base_Start_IT+0xc0>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d111      	bne.n	8001b64 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2b06      	cmp	r3, #6
 8001b50:	d010      	beq.n	8001b74 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f042 0201 	orr.w	r2, r2, #1
 8001b60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b62:	e007      	b.n	8001b74 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0201 	orr.w	r2, r2, #1
 8001b72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	40010000 	.word	0x40010000
 8001b88:	40000400 	.word	0x40000400
 8001b8c:	40000800 	.word	0x40000800
 8001b90:	40000c00 	.word	0x40000c00
 8001b94:	40014000 	.word	0x40014000

08001b98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d020      	beq.n	8001bfc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d01b      	beq.n	8001bfc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f06f 0202 	mvn.w	r2, #2
 8001bcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f8d2 	bl	8001d8c <HAL_TIM_IC_CaptureCallback>
 8001be8:	e005      	b.n	8001bf6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f8c4 	bl	8001d78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f8d5 	bl	8001da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d020      	beq.n	8001c48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d01b      	beq.n	8001c48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f06f 0204 	mvn.w	r2, #4
 8001c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f8ac 	bl	8001d8c <HAL_TIM_IC_CaptureCallback>
 8001c34:	e005      	b.n	8001c42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f89e 	bl	8001d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f8af 	bl	8001da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d020      	beq.n	8001c94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f003 0308 	and.w	r3, r3, #8
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d01b      	beq.n	8001c94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f06f 0208 	mvn.w	r2, #8
 8001c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2204      	movs	r2, #4
 8001c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f886 	bl	8001d8c <HAL_TIM_IC_CaptureCallback>
 8001c80:	e005      	b.n	8001c8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f878 	bl	8001d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 f889 	bl	8001da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	f003 0310 	and.w	r3, r3, #16
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d020      	beq.n	8001ce0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f003 0310 	and.w	r3, r3, #16
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d01b      	beq.n	8001ce0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f06f 0210 	mvn.w	r2, #16
 8001cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2208      	movs	r2, #8
 8001cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f860 	bl	8001d8c <HAL_TIM_IC_CaptureCallback>
 8001ccc:	e005      	b.n	8001cda <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f852 	bl	8001d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f863 	bl	8001da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00c      	beq.n	8001d04 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d007      	beq.n	8001d04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f06f 0201 	mvn.w	r2, #1
 8001cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7fe fd3e 	bl	8000780 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00c      	beq.n	8001d28 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d007      	beq.n	8001d28 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f8e6 	bl	8001ef4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00c      	beq.n	8001d4c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d007      	beq.n	8001d4c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f834 	bl	8001db4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	f003 0320 	and.w	r3, r3, #32
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00c      	beq.n	8001d70 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f003 0320 	and.w	r3, r3, #32
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d007      	beq.n	8001d70 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f06f 0220 	mvn.w	r2, #32
 8001d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f8b8 	bl	8001ee0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d70:	bf00      	nop
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a3a      	ldr	r2, [pc, #232]	@ (8001ec4 <TIM_Base_SetConfig+0xfc>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d00f      	beq.n	8001e00 <TIM_Base_SetConfig+0x38>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001de6:	d00b      	beq.n	8001e00 <TIM_Base_SetConfig+0x38>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a37      	ldr	r2, [pc, #220]	@ (8001ec8 <TIM_Base_SetConfig+0x100>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d007      	beq.n	8001e00 <TIM_Base_SetConfig+0x38>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a36      	ldr	r2, [pc, #216]	@ (8001ecc <TIM_Base_SetConfig+0x104>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d003      	beq.n	8001e00 <TIM_Base_SetConfig+0x38>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a35      	ldr	r2, [pc, #212]	@ (8001ed0 <TIM_Base_SetConfig+0x108>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d108      	bne.n	8001e12 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a2b      	ldr	r2, [pc, #172]	@ (8001ec4 <TIM_Base_SetConfig+0xfc>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d01b      	beq.n	8001e52 <TIM_Base_SetConfig+0x8a>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e20:	d017      	beq.n	8001e52 <TIM_Base_SetConfig+0x8a>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a28      	ldr	r2, [pc, #160]	@ (8001ec8 <TIM_Base_SetConfig+0x100>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d013      	beq.n	8001e52 <TIM_Base_SetConfig+0x8a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a27      	ldr	r2, [pc, #156]	@ (8001ecc <TIM_Base_SetConfig+0x104>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d00f      	beq.n	8001e52 <TIM_Base_SetConfig+0x8a>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a26      	ldr	r2, [pc, #152]	@ (8001ed0 <TIM_Base_SetConfig+0x108>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d00b      	beq.n	8001e52 <TIM_Base_SetConfig+0x8a>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a25      	ldr	r2, [pc, #148]	@ (8001ed4 <TIM_Base_SetConfig+0x10c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d007      	beq.n	8001e52 <TIM_Base_SetConfig+0x8a>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a24      	ldr	r2, [pc, #144]	@ (8001ed8 <TIM_Base_SetConfig+0x110>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d003      	beq.n	8001e52 <TIM_Base_SetConfig+0x8a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a23      	ldr	r2, [pc, #140]	@ (8001edc <TIM_Base_SetConfig+0x114>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d108      	bne.n	8001e64 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a0e      	ldr	r2, [pc, #56]	@ (8001ec4 <TIM_Base_SetConfig+0xfc>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d103      	bne.n	8001e98 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	691a      	ldr	r2, [r3, #16]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d105      	bne.n	8001eb6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	f023 0201 	bic.w	r2, r3, #1
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	611a      	str	r2, [r3, #16]
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40010000 	.word	0x40010000
 8001ec8:	40000400 	.word	0x40000400
 8001ecc:	40000800 	.word	0x40000800
 8001ed0:	40000c00 	.word	0x40000c00
 8001ed4:	40014000 	.word	0x40014000
 8001ed8:	40014400 	.word	0x40014400
 8001edc:	40014800 	.word	0x40014800

08001ee0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e042      	b.n	8001fa0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d106      	bne.n	8001f34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7fe fd46 	bl	80009c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2224      	movs	r2, #36	@ 0x24
 8001f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f82b 	bl	8001fa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	691a      	ldr	r2, [r3, #16]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	695a      	ldr	r2, [r3, #20]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68da      	ldr	r2, [r3, #12]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2220      	movs	r2, #32
 8001f94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fac:	b0c0      	sub	sp, #256	@ 0x100
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fc4:	68d9      	ldr	r1, [r3, #12]
 8001fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	ea40 0301 	orr.w	r3, r0, r1
 8001fd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002000:	f021 010c 	bic.w	r1, r1, #12
 8002004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800200e:	430b      	orrs	r3, r1
 8002010:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800201e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002022:	6999      	ldr	r1, [r3, #24]
 8002024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	ea40 0301 	orr.w	r3, r0, r1
 800202e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	4b8f      	ldr	r3, [pc, #572]	@ (8002274 <UART_SetConfig+0x2cc>)
 8002038:	429a      	cmp	r2, r3
 800203a:	d005      	beq.n	8002048 <UART_SetConfig+0xa0>
 800203c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	4b8d      	ldr	r3, [pc, #564]	@ (8002278 <UART_SetConfig+0x2d0>)
 8002044:	429a      	cmp	r2, r3
 8002046:	d104      	bne.n	8002052 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002048:	f7ff fca4 	bl	8001994 <HAL_RCC_GetPCLK2Freq>
 800204c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002050:	e003      	b.n	800205a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002052:	f7ff fc8b 	bl	800196c <HAL_RCC_GetPCLK1Freq>
 8002056:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800205a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002064:	f040 810c 	bne.w	8002280 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800206c:	2200      	movs	r2, #0
 800206e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002072:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002076:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800207a:	4622      	mov	r2, r4
 800207c:	462b      	mov	r3, r5
 800207e:	1891      	adds	r1, r2, r2
 8002080:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002082:	415b      	adcs	r3, r3
 8002084:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002086:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800208a:	4621      	mov	r1, r4
 800208c:	eb12 0801 	adds.w	r8, r2, r1
 8002090:	4629      	mov	r1, r5
 8002092:	eb43 0901 	adc.w	r9, r3, r1
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	f04f 0300 	mov.w	r3, #0
 800209e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020aa:	4690      	mov	r8, r2
 80020ac:	4699      	mov	r9, r3
 80020ae:	4623      	mov	r3, r4
 80020b0:	eb18 0303 	adds.w	r3, r8, r3
 80020b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80020b8:	462b      	mov	r3, r5
 80020ba:	eb49 0303 	adc.w	r3, r9, r3
 80020be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80020c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80020ce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80020d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80020d6:	460b      	mov	r3, r1
 80020d8:	18db      	adds	r3, r3, r3
 80020da:	653b      	str	r3, [r7, #80]	@ 0x50
 80020dc:	4613      	mov	r3, r2
 80020de:	eb42 0303 	adc.w	r3, r2, r3
 80020e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80020e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80020e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80020ec:	f7fe f878 	bl	80001e0 <__aeabi_uldivmod>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	4b61      	ldr	r3, [pc, #388]	@ (800227c <UART_SetConfig+0x2d4>)
 80020f6:	fba3 2302 	umull	r2, r3, r3, r2
 80020fa:	095b      	lsrs	r3, r3, #5
 80020fc:	011c      	lsls	r4, r3, #4
 80020fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002102:	2200      	movs	r2, #0
 8002104:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002108:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800210c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002110:	4642      	mov	r2, r8
 8002112:	464b      	mov	r3, r9
 8002114:	1891      	adds	r1, r2, r2
 8002116:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002118:	415b      	adcs	r3, r3
 800211a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800211c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002120:	4641      	mov	r1, r8
 8002122:	eb12 0a01 	adds.w	sl, r2, r1
 8002126:	4649      	mov	r1, r9
 8002128:	eb43 0b01 	adc.w	fp, r3, r1
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	f04f 0300 	mov.w	r3, #0
 8002134:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002138:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800213c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002140:	4692      	mov	sl, r2
 8002142:	469b      	mov	fp, r3
 8002144:	4643      	mov	r3, r8
 8002146:	eb1a 0303 	adds.w	r3, sl, r3
 800214a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800214e:	464b      	mov	r3, r9
 8002150:	eb4b 0303 	adc.w	r3, fp, r3
 8002154:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002164:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002168:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800216c:	460b      	mov	r3, r1
 800216e:	18db      	adds	r3, r3, r3
 8002170:	643b      	str	r3, [r7, #64]	@ 0x40
 8002172:	4613      	mov	r3, r2
 8002174:	eb42 0303 	adc.w	r3, r2, r3
 8002178:	647b      	str	r3, [r7, #68]	@ 0x44
 800217a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800217e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002182:	f7fe f82d 	bl	80001e0 <__aeabi_uldivmod>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4611      	mov	r1, r2
 800218c:	4b3b      	ldr	r3, [pc, #236]	@ (800227c <UART_SetConfig+0x2d4>)
 800218e:	fba3 2301 	umull	r2, r3, r3, r1
 8002192:	095b      	lsrs	r3, r3, #5
 8002194:	2264      	movs	r2, #100	@ 0x64
 8002196:	fb02 f303 	mul.w	r3, r2, r3
 800219a:	1acb      	subs	r3, r1, r3
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80021a2:	4b36      	ldr	r3, [pc, #216]	@ (800227c <UART_SetConfig+0x2d4>)
 80021a4:	fba3 2302 	umull	r2, r3, r3, r2
 80021a8:	095b      	lsrs	r3, r3, #5
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80021b0:	441c      	add	r4, r3
 80021b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021b6:	2200      	movs	r2, #0
 80021b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80021bc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80021c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80021c4:	4642      	mov	r2, r8
 80021c6:	464b      	mov	r3, r9
 80021c8:	1891      	adds	r1, r2, r2
 80021ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80021cc:	415b      	adcs	r3, r3
 80021ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80021d4:	4641      	mov	r1, r8
 80021d6:	1851      	adds	r1, r2, r1
 80021d8:	6339      	str	r1, [r7, #48]	@ 0x30
 80021da:	4649      	mov	r1, r9
 80021dc:	414b      	adcs	r3, r1
 80021de:	637b      	str	r3, [r7, #52]	@ 0x34
 80021e0:	f04f 0200 	mov.w	r2, #0
 80021e4:	f04f 0300 	mov.w	r3, #0
 80021e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80021ec:	4659      	mov	r1, fp
 80021ee:	00cb      	lsls	r3, r1, #3
 80021f0:	4651      	mov	r1, sl
 80021f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021f6:	4651      	mov	r1, sl
 80021f8:	00ca      	lsls	r2, r1, #3
 80021fa:	4610      	mov	r0, r2
 80021fc:	4619      	mov	r1, r3
 80021fe:	4603      	mov	r3, r0
 8002200:	4642      	mov	r2, r8
 8002202:	189b      	adds	r3, r3, r2
 8002204:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002208:	464b      	mov	r3, r9
 800220a:	460a      	mov	r2, r1
 800220c:	eb42 0303 	adc.w	r3, r2, r3
 8002210:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002220:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002224:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002228:	460b      	mov	r3, r1
 800222a:	18db      	adds	r3, r3, r3
 800222c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800222e:	4613      	mov	r3, r2
 8002230:	eb42 0303 	adc.w	r3, r2, r3
 8002234:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002236:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800223a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800223e:	f7fd ffcf 	bl	80001e0 <__aeabi_uldivmod>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4b0d      	ldr	r3, [pc, #52]	@ (800227c <UART_SetConfig+0x2d4>)
 8002248:	fba3 1302 	umull	r1, r3, r3, r2
 800224c:	095b      	lsrs	r3, r3, #5
 800224e:	2164      	movs	r1, #100	@ 0x64
 8002250:	fb01 f303 	mul.w	r3, r1, r3
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	3332      	adds	r3, #50	@ 0x32
 800225a:	4a08      	ldr	r2, [pc, #32]	@ (800227c <UART_SetConfig+0x2d4>)
 800225c:	fba2 2303 	umull	r2, r3, r2, r3
 8002260:	095b      	lsrs	r3, r3, #5
 8002262:	f003 0207 	and.w	r2, r3, #7
 8002266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4422      	add	r2, r4
 800226e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002270:	e106      	b.n	8002480 <UART_SetConfig+0x4d8>
 8002272:	bf00      	nop
 8002274:	40011000 	.word	0x40011000
 8002278:	40011400 	.word	0x40011400
 800227c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002280:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002284:	2200      	movs	r2, #0
 8002286:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800228a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800228e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002292:	4642      	mov	r2, r8
 8002294:	464b      	mov	r3, r9
 8002296:	1891      	adds	r1, r2, r2
 8002298:	6239      	str	r1, [r7, #32]
 800229a:	415b      	adcs	r3, r3
 800229c:	627b      	str	r3, [r7, #36]	@ 0x24
 800229e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022a2:	4641      	mov	r1, r8
 80022a4:	1854      	adds	r4, r2, r1
 80022a6:	4649      	mov	r1, r9
 80022a8:	eb43 0501 	adc.w	r5, r3, r1
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	f04f 0300 	mov.w	r3, #0
 80022b4:	00eb      	lsls	r3, r5, #3
 80022b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022ba:	00e2      	lsls	r2, r4, #3
 80022bc:	4614      	mov	r4, r2
 80022be:	461d      	mov	r5, r3
 80022c0:	4643      	mov	r3, r8
 80022c2:	18e3      	adds	r3, r4, r3
 80022c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80022c8:	464b      	mov	r3, r9
 80022ca:	eb45 0303 	adc.w	r3, r5, r3
 80022ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80022d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80022de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80022e2:	f04f 0200 	mov.w	r2, #0
 80022e6:	f04f 0300 	mov.w	r3, #0
 80022ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80022ee:	4629      	mov	r1, r5
 80022f0:	008b      	lsls	r3, r1, #2
 80022f2:	4621      	mov	r1, r4
 80022f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022f8:	4621      	mov	r1, r4
 80022fa:	008a      	lsls	r2, r1, #2
 80022fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002300:	f7fd ff6e 	bl	80001e0 <__aeabi_uldivmod>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4b60      	ldr	r3, [pc, #384]	@ (800248c <UART_SetConfig+0x4e4>)
 800230a:	fba3 2302 	umull	r2, r3, r3, r2
 800230e:	095b      	lsrs	r3, r3, #5
 8002310:	011c      	lsls	r4, r3, #4
 8002312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002316:	2200      	movs	r2, #0
 8002318:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800231c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002320:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002324:	4642      	mov	r2, r8
 8002326:	464b      	mov	r3, r9
 8002328:	1891      	adds	r1, r2, r2
 800232a:	61b9      	str	r1, [r7, #24]
 800232c:	415b      	adcs	r3, r3
 800232e:	61fb      	str	r3, [r7, #28]
 8002330:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002334:	4641      	mov	r1, r8
 8002336:	1851      	adds	r1, r2, r1
 8002338:	6139      	str	r1, [r7, #16]
 800233a:	4649      	mov	r1, r9
 800233c:	414b      	adcs	r3, r1
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	f04f 0200 	mov.w	r2, #0
 8002344:	f04f 0300 	mov.w	r3, #0
 8002348:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800234c:	4659      	mov	r1, fp
 800234e:	00cb      	lsls	r3, r1, #3
 8002350:	4651      	mov	r1, sl
 8002352:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002356:	4651      	mov	r1, sl
 8002358:	00ca      	lsls	r2, r1, #3
 800235a:	4610      	mov	r0, r2
 800235c:	4619      	mov	r1, r3
 800235e:	4603      	mov	r3, r0
 8002360:	4642      	mov	r2, r8
 8002362:	189b      	adds	r3, r3, r2
 8002364:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002368:	464b      	mov	r3, r9
 800236a:	460a      	mov	r2, r1
 800236c:	eb42 0303 	adc.w	r3, r2, r3
 8002370:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800237e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800238c:	4649      	mov	r1, r9
 800238e:	008b      	lsls	r3, r1, #2
 8002390:	4641      	mov	r1, r8
 8002392:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002396:	4641      	mov	r1, r8
 8002398:	008a      	lsls	r2, r1, #2
 800239a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800239e:	f7fd ff1f 	bl	80001e0 <__aeabi_uldivmod>
 80023a2:	4602      	mov	r2, r0
 80023a4:	460b      	mov	r3, r1
 80023a6:	4611      	mov	r1, r2
 80023a8:	4b38      	ldr	r3, [pc, #224]	@ (800248c <UART_SetConfig+0x4e4>)
 80023aa:	fba3 2301 	umull	r2, r3, r3, r1
 80023ae:	095b      	lsrs	r3, r3, #5
 80023b0:	2264      	movs	r2, #100	@ 0x64
 80023b2:	fb02 f303 	mul.w	r3, r2, r3
 80023b6:	1acb      	subs	r3, r1, r3
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	3332      	adds	r3, #50	@ 0x32
 80023bc:	4a33      	ldr	r2, [pc, #204]	@ (800248c <UART_SetConfig+0x4e4>)
 80023be:	fba2 2303 	umull	r2, r3, r2, r3
 80023c2:	095b      	lsrs	r3, r3, #5
 80023c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023c8:	441c      	add	r4, r3
 80023ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023ce:	2200      	movs	r2, #0
 80023d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80023d2:	677a      	str	r2, [r7, #116]	@ 0x74
 80023d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80023d8:	4642      	mov	r2, r8
 80023da:	464b      	mov	r3, r9
 80023dc:	1891      	adds	r1, r2, r2
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	415b      	adcs	r3, r3
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023e8:	4641      	mov	r1, r8
 80023ea:	1851      	adds	r1, r2, r1
 80023ec:	6039      	str	r1, [r7, #0]
 80023ee:	4649      	mov	r1, r9
 80023f0:	414b      	adcs	r3, r1
 80023f2:	607b      	str	r3, [r7, #4]
 80023f4:	f04f 0200 	mov.w	r2, #0
 80023f8:	f04f 0300 	mov.w	r3, #0
 80023fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002400:	4659      	mov	r1, fp
 8002402:	00cb      	lsls	r3, r1, #3
 8002404:	4651      	mov	r1, sl
 8002406:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800240a:	4651      	mov	r1, sl
 800240c:	00ca      	lsls	r2, r1, #3
 800240e:	4610      	mov	r0, r2
 8002410:	4619      	mov	r1, r3
 8002412:	4603      	mov	r3, r0
 8002414:	4642      	mov	r2, r8
 8002416:	189b      	adds	r3, r3, r2
 8002418:	66bb      	str	r3, [r7, #104]	@ 0x68
 800241a:	464b      	mov	r3, r9
 800241c:	460a      	mov	r2, r1
 800241e:	eb42 0303 	adc.w	r3, r2, r3
 8002422:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	663b      	str	r3, [r7, #96]	@ 0x60
 800242e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	f04f 0300 	mov.w	r3, #0
 8002438:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800243c:	4649      	mov	r1, r9
 800243e:	008b      	lsls	r3, r1, #2
 8002440:	4641      	mov	r1, r8
 8002442:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002446:	4641      	mov	r1, r8
 8002448:	008a      	lsls	r2, r1, #2
 800244a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800244e:	f7fd fec7 	bl	80001e0 <__aeabi_uldivmod>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	4b0d      	ldr	r3, [pc, #52]	@ (800248c <UART_SetConfig+0x4e4>)
 8002458:	fba3 1302 	umull	r1, r3, r3, r2
 800245c:	095b      	lsrs	r3, r3, #5
 800245e:	2164      	movs	r1, #100	@ 0x64
 8002460:	fb01 f303 	mul.w	r3, r1, r3
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	3332      	adds	r3, #50	@ 0x32
 800246a:	4a08      	ldr	r2, [pc, #32]	@ (800248c <UART_SetConfig+0x4e4>)
 800246c:	fba2 2303 	umull	r2, r3, r2, r3
 8002470:	095b      	lsrs	r3, r3, #5
 8002472:	f003 020f 	and.w	r2, r3, #15
 8002476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4422      	add	r2, r4
 800247e:	609a      	str	r2, [r3, #8]
}
 8002480:	bf00      	nop
 8002482:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002486:	46bd      	mov	sp, r7
 8002488:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800248c:	51eb851f 	.word	0x51eb851f

08002490 <__NVIC_SetPriority>:
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	6039      	str	r1, [r7, #0]
 800249a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800249c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	db0a      	blt.n	80024ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	490c      	ldr	r1, [pc, #48]	@ (80024dc <__NVIC_SetPriority+0x4c>)
 80024aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ae:	0112      	lsls	r2, r2, #4
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	440b      	add	r3, r1
 80024b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80024b8:	e00a      	b.n	80024d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	4908      	ldr	r1, [pc, #32]	@ (80024e0 <__NVIC_SetPriority+0x50>)
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	3b04      	subs	r3, #4
 80024c8:	0112      	lsls	r2, r2, #4
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	440b      	add	r3, r1
 80024ce:	761a      	strb	r2, [r3, #24]
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	e000e100 	.word	0xe000e100
 80024e0:	e000ed00 	.word	0xe000ed00

080024e4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80024e8:	4b05      	ldr	r3, [pc, #20]	@ (8002500 <SysTick_Handler+0x1c>)
 80024ea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80024ec:	f001 fd46 	bl	8003f7c <xTaskGetSchedulerState>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d001      	beq.n	80024fa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80024f6:	f002 fb3f 	bl	8004b78 <xPortSysTickHandler>
  }
}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	e000e010 	.word	0xe000e010

08002504 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002508:	2100      	movs	r1, #0
 800250a:	f06f 0004 	mvn.w	r0, #4
 800250e:	f7ff ffbf 	bl	8002490 <__NVIC_SetPriority>
#endif
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800251e:	f3ef 8305 	mrs	r3, IPSR
 8002522:	603b      	str	r3, [r7, #0]
  return(result);
 8002524:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800252a:	f06f 0305 	mvn.w	r3, #5
 800252e:	607b      	str	r3, [r7, #4]
 8002530:	e00c      	b.n	800254c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002532:	4b0a      	ldr	r3, [pc, #40]	@ (800255c <osKernelInitialize+0x44>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d105      	bne.n	8002546 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800253a:	4b08      	ldr	r3, [pc, #32]	@ (800255c <osKernelInitialize+0x44>)
 800253c:	2201      	movs	r2, #1
 800253e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002540:	2300      	movs	r3, #0
 8002542:	607b      	str	r3, [r7, #4]
 8002544:	e002      	b.n	800254c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002546:	f04f 33ff 	mov.w	r3, #4294967295
 800254a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800254c:	687b      	ldr	r3, [r7, #4]
}
 800254e:	4618      	mov	r0, r3
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	2000011c 	.word	0x2000011c

08002560 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002566:	f3ef 8305 	mrs	r3, IPSR
 800256a:	603b      	str	r3, [r7, #0]
  return(result);
 800256c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002572:	f06f 0305 	mvn.w	r3, #5
 8002576:	607b      	str	r3, [r7, #4]
 8002578:	e010      	b.n	800259c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800257a:	4b0b      	ldr	r3, [pc, #44]	@ (80025a8 <osKernelStart+0x48>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d109      	bne.n	8002596 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002582:	f7ff ffbf 	bl	8002504 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002586:	4b08      	ldr	r3, [pc, #32]	@ (80025a8 <osKernelStart+0x48>)
 8002588:	2202      	movs	r2, #2
 800258a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800258c:	f001 f892 	bl	80036b4 <vTaskStartScheduler>
      stat = osOK;
 8002590:	2300      	movs	r3, #0
 8002592:	607b      	str	r3, [r7, #4]
 8002594:	e002      	b.n	800259c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002596:	f04f 33ff 	mov.w	r3, #4294967295
 800259a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800259c:	687b      	ldr	r3, [r7, #4]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	2000011c 	.word	0x2000011c

080025ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b08e      	sub	sp, #56	@ 0x38
 80025b0:	af04      	add	r7, sp, #16
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025bc:	f3ef 8305 	mrs	r3, IPSR
 80025c0:	617b      	str	r3, [r7, #20]
  return(result);
 80025c2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d17e      	bne.n	80026c6 <osThreadNew+0x11a>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d07b      	beq.n	80026c6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80025ce:	2380      	movs	r3, #128	@ 0x80
 80025d0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80025d2:	2318      	movs	r3, #24
 80025d4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80025da:	f04f 33ff 	mov.w	r3, #4294967295
 80025de:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d045      	beq.n	8002672 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d002      	beq.n	80025f4 <osThreadNew+0x48>
        name = attr->name;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d008      	beq.n	800261a <osThreadNew+0x6e>
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	2b38      	cmp	r3, #56	@ 0x38
 800260c:	d805      	bhi.n	800261a <osThreadNew+0x6e>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <osThreadNew+0x72>
        return (NULL);
 800261a:	2300      	movs	r3, #0
 800261c:	e054      	b.n	80026c8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	089b      	lsrs	r3, r3, #2
 800262c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00e      	beq.n	8002654 <osThreadNew+0xa8>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	2ba7      	cmp	r3, #167	@ 0xa7
 800263c:	d90a      	bls.n	8002654 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002642:	2b00      	cmp	r3, #0
 8002644:	d006      	beq.n	8002654 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d002      	beq.n	8002654 <osThreadNew+0xa8>
        mem = 1;
 800264e:	2301      	movs	r3, #1
 8002650:	61bb      	str	r3, [r7, #24]
 8002652:	e010      	b.n	8002676 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10c      	bne.n	8002676 <osThreadNew+0xca>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d108      	bne.n	8002676 <osThreadNew+0xca>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d104      	bne.n	8002676 <osThreadNew+0xca>
          mem = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	61bb      	str	r3, [r7, #24]
 8002670:	e001      	b.n	8002676 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002672:	2300      	movs	r3, #0
 8002674:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d110      	bne.n	800269e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002684:	9202      	str	r2, [sp, #8]
 8002686:	9301      	str	r3, [sp, #4]
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	6a3a      	ldr	r2, [r7, #32]
 8002690:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f000 fe1a 	bl	80032cc <xTaskCreateStatic>
 8002698:	4603      	mov	r3, r0
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	e013      	b.n	80026c6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d110      	bne.n	80026c6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80026a4:	6a3b      	ldr	r3, [r7, #32]
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	f107 0310 	add.w	r3, r7, #16
 80026ac:	9301      	str	r3, [sp, #4]
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 fe68 	bl	800338c <xTaskCreate>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d001      	beq.n	80026c6 <osThreadNew+0x11a>
            hTask = NULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80026c6:	693b      	ldr	r3, [r7, #16]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3728      	adds	r7, #40	@ 0x28
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026d8:	f3ef 8305 	mrs	r3, IPSR
 80026dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80026de:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <osDelay+0x1c>
    stat = osErrorISR;
 80026e4:	f06f 0305 	mvn.w	r3, #5
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	e007      	b.n	80026fc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80026ec:	2300      	movs	r3, #0
 80026ee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d002      	beq.n	80026fc <osDelay+0x2c>
      vTaskDelay(ticks);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 ffa6 	bl	8003648 <vTaskDelay>
    }
  }

  return (stat);
 80026fc:	68fb      	ldr	r3, [r7, #12]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	4a07      	ldr	r2, [pc, #28]	@ (8002734 <vApplicationGetIdleTaskMemory+0x2c>)
 8002718:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	4a06      	ldr	r2, [pc, #24]	@ (8002738 <vApplicationGetIdleTaskMemory+0x30>)
 800271e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2280      	movs	r2, #128	@ 0x80
 8002724:	601a      	str	r2, [r3, #0]
}
 8002726:	bf00      	nop
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	20000120 	.word	0x20000120
 8002738:	200001c8 	.word	0x200001c8

0800273c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4a07      	ldr	r2, [pc, #28]	@ (8002768 <vApplicationGetTimerTaskMemory+0x2c>)
 800274c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	4a06      	ldr	r2, [pc, #24]	@ (800276c <vApplicationGetTimerTaskMemory+0x30>)
 8002752:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800275a:	601a      	str	r2, [r3, #0]
}
 800275c:	bf00      	nop
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	200003c8 	.word	0x200003c8
 800276c:	20000470 	.word	0x20000470

08002770 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f103 0208 	add.w	r2, r3, #8
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f04f 32ff 	mov.w	r2, #4294967295
 8002788:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f103 0208 	add.w	r2, r3, #8
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f103 0208 	add.w	r2, r3, #8
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027ca:	b480      	push	{r7}
 80027cc:	b085      	sub	sp, #20
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	601a      	str	r2, [r3, #0]
}
 8002806:	bf00      	nop
 8002808:	3714      	adds	r7, #20
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002812:	b480      	push	{r7}
 8002814:	b085      	sub	sp, #20
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
 800281a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002828:	d103      	bne.n	8002832 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	e00c      	b.n	800284c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	3308      	adds	r3, #8
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	e002      	b.n	8002840 <vListInsert+0x2e>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	429a      	cmp	r2, r3
 800284a:	d2f6      	bcs.n	800283a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	1c5a      	adds	r2, r3, #1
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	601a      	str	r2, [r3, #0]
}
 8002878:	bf00      	nop
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6892      	ldr	r2, [r2, #8]
 800289a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6852      	ldr	r2, [r2, #4]
 80028a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d103      	bne.n	80028b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	1e5a      	subs	r2, r3, #1
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10b      	bne.n	8002904 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80028ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028f0:	f383 8811 	msr	BASEPRI, r3
 80028f4:	f3bf 8f6f 	isb	sy
 80028f8:	f3bf 8f4f 	dsb	sy
 80028fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80028fe:	bf00      	nop
 8002900:	bf00      	nop
 8002902:	e7fd      	b.n	8002900 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002904:	f002 f8a8 	bl	8004a58 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002910:	68f9      	ldr	r1, [r7, #12]
 8002912:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002914:	fb01 f303 	mul.w	r3, r1, r3
 8002918:	441a      	add	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002934:	3b01      	subs	r3, #1
 8002936:	68f9      	ldr	r1, [r7, #12]
 8002938:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800293a:	fb01 f303 	mul.w	r3, r1, r3
 800293e:	441a      	add	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	22ff      	movs	r2, #255	@ 0xff
 8002948:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	22ff      	movs	r2, #255	@ 0xff
 8002950:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d114      	bne.n	8002984 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d01a      	beq.n	8002998 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	3310      	adds	r3, #16
 8002966:	4618      	mov	r0, r3
 8002968:	f001 f942 	bl	8003bf0 <xTaskRemoveFromEventList>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d012      	beq.n	8002998 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002972:	4b0d      	ldr	r3, [pc, #52]	@ (80029a8 <xQueueGenericReset+0xd0>)
 8002974:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	f3bf 8f4f 	dsb	sy
 800297e:	f3bf 8f6f 	isb	sy
 8002982:	e009      	b.n	8002998 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	3310      	adds	r3, #16
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff fef1 	bl	8002770 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	3324      	adds	r3, #36	@ 0x24
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff feec 	bl	8002770 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002998:	f002 f890 	bl	8004abc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800299c:	2301      	movs	r3, #1
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	e000ed04 	.word	0xe000ed04

080029ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08e      	sub	sp, #56	@ 0x38
 80029b0:	af02      	add	r7, sp, #8
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
 80029b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10b      	bne.n	80029d8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80029c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029c4:	f383 8811 	msr	BASEPRI, r3
 80029c8:	f3bf 8f6f 	isb	sy
 80029cc:	f3bf 8f4f 	dsb	sy
 80029d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80029d2:	bf00      	nop
 80029d4:	bf00      	nop
 80029d6:	e7fd      	b.n	80029d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10b      	bne.n	80029f6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80029de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029e2:	f383 8811 	msr	BASEPRI, r3
 80029e6:	f3bf 8f6f 	isb	sy
 80029ea:	f3bf 8f4f 	dsb	sy
 80029ee:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80029f0:	bf00      	nop
 80029f2:	bf00      	nop
 80029f4:	e7fd      	b.n	80029f2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d002      	beq.n	8002a02 <xQueueGenericCreateStatic+0x56>
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <xQueueGenericCreateStatic+0x5a>
 8002a02:	2301      	movs	r3, #1
 8002a04:	e000      	b.n	8002a08 <xQueueGenericCreateStatic+0x5c>
 8002a06:	2300      	movs	r3, #0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10b      	bne.n	8002a24 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a10:	f383 8811 	msr	BASEPRI, r3
 8002a14:	f3bf 8f6f 	isb	sy
 8002a18:	f3bf 8f4f 	dsb	sy
 8002a1c:	623b      	str	r3, [r7, #32]
}
 8002a1e:	bf00      	nop
 8002a20:	bf00      	nop
 8002a22:	e7fd      	b.n	8002a20 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d102      	bne.n	8002a30 <xQueueGenericCreateStatic+0x84>
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <xQueueGenericCreateStatic+0x88>
 8002a30:	2301      	movs	r3, #1
 8002a32:	e000      	b.n	8002a36 <xQueueGenericCreateStatic+0x8a>
 8002a34:	2300      	movs	r3, #0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10b      	bne.n	8002a52 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a3e:	f383 8811 	msr	BASEPRI, r3
 8002a42:	f3bf 8f6f 	isb	sy
 8002a46:	f3bf 8f4f 	dsb	sy
 8002a4a:	61fb      	str	r3, [r7, #28]
}
 8002a4c:	bf00      	nop
 8002a4e:	bf00      	nop
 8002a50:	e7fd      	b.n	8002a4e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002a52:	2350      	movs	r3, #80	@ 0x50
 8002a54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	2b50      	cmp	r3, #80	@ 0x50
 8002a5a:	d00b      	beq.n	8002a74 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a60:	f383 8811 	msr	BASEPRI, r3
 8002a64:	f3bf 8f6f 	isb	sy
 8002a68:	f3bf 8f4f 	dsb	sy
 8002a6c:	61bb      	str	r3, [r7, #24]
}
 8002a6e:	bf00      	nop
 8002a70:	bf00      	nop
 8002a72:	e7fd      	b.n	8002a70 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002a74:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00d      	beq.n	8002a9c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a88:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	4613      	mov	r3, r2
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	68b9      	ldr	r1, [r7, #8]
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 f805 	bl	8002aa6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3730      	adds	r7, #48	@ 0x30
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b084      	sub	sp, #16
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	60f8      	str	r0, [r7, #12]
 8002aae:	60b9      	str	r1, [r7, #8]
 8002ab0:	607a      	str	r2, [r7, #4]
 8002ab2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d103      	bne.n	8002ac2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	e002      	b.n	8002ac8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	69b8      	ldr	r0, [r7, #24]
 8002ad8:	f7ff fefe 	bl	80028d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	78fa      	ldrb	r2, [r7, #3]
 8002ae0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002ae4:	bf00      	nop
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08e      	sub	sp, #56	@ 0x38
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
 8002af8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002afa:	2300      	movs	r3, #0
 8002afc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10b      	bne.n	8002b20 <xQueueGenericSend+0x34>
	__asm volatile
 8002b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b0c:	f383 8811 	msr	BASEPRI, r3
 8002b10:	f3bf 8f6f 	isb	sy
 8002b14:	f3bf 8f4f 	dsb	sy
 8002b18:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002b1a:	bf00      	nop
 8002b1c:	bf00      	nop
 8002b1e:	e7fd      	b.n	8002b1c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d103      	bne.n	8002b2e <xQueueGenericSend+0x42>
 8002b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <xQueueGenericSend+0x46>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <xQueueGenericSend+0x48>
 8002b32:	2300      	movs	r3, #0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10b      	bne.n	8002b50 <xQueueGenericSend+0x64>
	__asm volatile
 8002b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b3c:	f383 8811 	msr	BASEPRI, r3
 8002b40:	f3bf 8f6f 	isb	sy
 8002b44:	f3bf 8f4f 	dsb	sy
 8002b48:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002b4a:	bf00      	nop
 8002b4c:	bf00      	nop
 8002b4e:	e7fd      	b.n	8002b4c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d103      	bne.n	8002b5e <xQueueGenericSend+0x72>
 8002b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d101      	bne.n	8002b62 <xQueueGenericSend+0x76>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e000      	b.n	8002b64 <xQueueGenericSend+0x78>
 8002b62:	2300      	movs	r3, #0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10b      	bne.n	8002b80 <xQueueGenericSend+0x94>
	__asm volatile
 8002b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b6c:	f383 8811 	msr	BASEPRI, r3
 8002b70:	f3bf 8f6f 	isb	sy
 8002b74:	f3bf 8f4f 	dsb	sy
 8002b78:	623b      	str	r3, [r7, #32]
}
 8002b7a:	bf00      	nop
 8002b7c:	bf00      	nop
 8002b7e:	e7fd      	b.n	8002b7c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b80:	f001 f9fc 	bl	8003f7c <xTaskGetSchedulerState>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d102      	bne.n	8002b90 <xQueueGenericSend+0xa4>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <xQueueGenericSend+0xa8>
 8002b90:	2301      	movs	r3, #1
 8002b92:	e000      	b.n	8002b96 <xQueueGenericSend+0xaa>
 8002b94:	2300      	movs	r3, #0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10b      	bne.n	8002bb2 <xQueueGenericSend+0xc6>
	__asm volatile
 8002b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b9e:	f383 8811 	msr	BASEPRI, r3
 8002ba2:	f3bf 8f6f 	isb	sy
 8002ba6:	f3bf 8f4f 	dsb	sy
 8002baa:	61fb      	str	r3, [r7, #28]
}
 8002bac:	bf00      	nop
 8002bae:	bf00      	nop
 8002bb0:	e7fd      	b.n	8002bae <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002bb2:	f001 ff51 	bl	8004a58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d302      	bcc.n	8002bc8 <xQueueGenericSend+0xdc>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d129      	bne.n	8002c1c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	68b9      	ldr	r1, [r7, #8]
 8002bcc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002bce:	f000 fa0f 	bl	8002ff0 <prvCopyDataToQueue>
 8002bd2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d010      	beq.n	8002bfe <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bde:	3324      	adds	r3, #36	@ 0x24
 8002be0:	4618      	mov	r0, r3
 8002be2:	f001 f805 	bl	8003bf0 <xTaskRemoveFromEventList>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d013      	beq.n	8002c14 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002bec:	4b3f      	ldr	r3, [pc, #252]	@ (8002cec <xQueueGenericSend+0x200>)
 8002bee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	f3bf 8f4f 	dsb	sy
 8002bf8:	f3bf 8f6f 	isb	sy
 8002bfc:	e00a      	b.n	8002c14 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d007      	beq.n	8002c14 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002c04:	4b39      	ldr	r3, [pc, #228]	@ (8002cec <xQueueGenericSend+0x200>)
 8002c06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	f3bf 8f4f 	dsb	sy
 8002c10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002c14:	f001 ff52 	bl	8004abc <vPortExitCritical>
				return pdPASS;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e063      	b.n	8002ce4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d103      	bne.n	8002c2a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c22:	f001 ff4b 	bl	8004abc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c26:	2300      	movs	r3, #0
 8002c28:	e05c      	b.n	8002ce4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d106      	bne.n	8002c3e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c30:	f107 0314 	add.w	r3, r7, #20
 8002c34:	4618      	mov	r0, r3
 8002c36:	f001 f83f 	bl	8003cb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c3e:	f001 ff3d 	bl	8004abc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c42:	f000 fda7 	bl	8003794 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c46:	f001 ff07 	bl	8004a58 <vPortEnterCritical>
 8002c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c50:	b25b      	sxtb	r3, r3
 8002c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c56:	d103      	bne.n	8002c60 <xQueueGenericSend+0x174>
 8002c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c66:	b25b      	sxtb	r3, r3
 8002c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6c:	d103      	bne.n	8002c76 <xQueueGenericSend+0x18a>
 8002c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c76:	f001 ff21 	bl	8004abc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c7a:	1d3a      	adds	r2, r7, #4
 8002c7c:	f107 0314 	add.w	r3, r7, #20
 8002c80:	4611      	mov	r1, r2
 8002c82:	4618      	mov	r0, r3
 8002c84:	f001 f82e 	bl	8003ce4 <xTaskCheckForTimeOut>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d124      	bne.n	8002cd8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c8e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c90:	f000 faa6 	bl	80031e0 <prvIsQueueFull>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d018      	beq.n	8002ccc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c9c:	3310      	adds	r3, #16
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	4611      	mov	r1, r2
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 ff52 	bl	8003b4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ca8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002caa:	f000 fa31 	bl	8003110 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002cae:	f000 fd7f 	bl	80037b0 <xTaskResumeAll>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f47f af7c 	bne.w	8002bb2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002cba:	4b0c      	ldr	r3, [pc, #48]	@ (8002cec <xQueueGenericSend+0x200>)
 8002cbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	f3bf 8f4f 	dsb	sy
 8002cc6:	f3bf 8f6f 	isb	sy
 8002cca:	e772      	b.n	8002bb2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ccc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002cce:	f000 fa1f 	bl	8003110 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002cd2:	f000 fd6d 	bl	80037b0 <xTaskResumeAll>
 8002cd6:	e76c      	b.n	8002bb2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002cd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002cda:	f000 fa19 	bl	8003110 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002cde:	f000 fd67 	bl	80037b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002ce2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3738      	adds	r7, #56	@ 0x38
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	e000ed04 	.word	0xe000ed04

08002cf0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b090      	sub	sp, #64	@ 0x40
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
 8002cfc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10b      	bne.n	8002d20 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d0c:	f383 8811 	msr	BASEPRI, r3
 8002d10:	f3bf 8f6f 	isb	sy
 8002d14:	f3bf 8f4f 	dsb	sy
 8002d18:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002d1a:	bf00      	nop
 8002d1c:	bf00      	nop
 8002d1e:	e7fd      	b.n	8002d1c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d103      	bne.n	8002d2e <xQueueGenericSendFromISR+0x3e>
 8002d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <xQueueGenericSendFromISR+0x42>
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e000      	b.n	8002d34 <xQueueGenericSendFromISR+0x44>
 8002d32:	2300      	movs	r3, #0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10b      	bne.n	8002d50 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d3c:	f383 8811 	msr	BASEPRI, r3
 8002d40:	f3bf 8f6f 	isb	sy
 8002d44:	f3bf 8f4f 	dsb	sy
 8002d48:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002d4a:	bf00      	nop
 8002d4c:	bf00      	nop
 8002d4e:	e7fd      	b.n	8002d4c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d103      	bne.n	8002d5e <xQueueGenericSendFromISR+0x6e>
 8002d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <xQueueGenericSendFromISR+0x72>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <xQueueGenericSendFromISR+0x74>
 8002d62:	2300      	movs	r3, #0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10b      	bne.n	8002d80 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d6c:	f383 8811 	msr	BASEPRI, r3
 8002d70:	f3bf 8f6f 	isb	sy
 8002d74:	f3bf 8f4f 	dsb	sy
 8002d78:	623b      	str	r3, [r7, #32]
}
 8002d7a:	bf00      	nop
 8002d7c:	bf00      	nop
 8002d7e:	e7fd      	b.n	8002d7c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d80:	f001 ff4a 	bl	8004c18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d84:	f3ef 8211 	mrs	r2, BASEPRI
 8002d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d8c:	f383 8811 	msr	BASEPRI, r3
 8002d90:	f3bf 8f6f 	isb	sy
 8002d94:	f3bf 8f4f 	dsb	sy
 8002d98:	61fa      	str	r2, [r7, #28]
 8002d9a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002d9c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d9e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002da2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d302      	bcc.n	8002db2 <xQueueGenericSendFromISR+0xc2>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d12f      	bne.n	8002e12 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002db4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002db8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	68b9      	ldr	r1, [r7, #8]
 8002dc6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002dc8:	f000 f912 	bl	8002ff0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002dcc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd4:	d112      	bne.n	8002dfc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d016      	beq.n	8002e0c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002de0:	3324      	adds	r3, #36	@ 0x24
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 ff04 	bl	8003bf0 <xTaskRemoveFromEventList>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00e      	beq.n	8002e0c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00b      	beq.n	8002e0c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	e007      	b.n	8002e0c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002dfc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002e00:	3301      	adds	r3, #1
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	b25a      	sxtb	r2, r3
 8002e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002e10:	e001      	b.n	8002e16 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e18:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002e20:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3740      	adds	r7, #64	@ 0x40
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b08c      	sub	sp, #48	@ 0x30
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10b      	bne.n	8002e5e <xQueueReceive+0x32>
	__asm volatile
 8002e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e4a:	f383 8811 	msr	BASEPRI, r3
 8002e4e:	f3bf 8f6f 	isb	sy
 8002e52:	f3bf 8f4f 	dsb	sy
 8002e56:	623b      	str	r3, [r7, #32]
}
 8002e58:	bf00      	nop
 8002e5a:	bf00      	nop
 8002e5c:	e7fd      	b.n	8002e5a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d103      	bne.n	8002e6c <xQueueReceive+0x40>
 8002e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <xQueueReceive+0x44>
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e000      	b.n	8002e72 <xQueueReceive+0x46>
 8002e70:	2300      	movs	r3, #0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10b      	bne.n	8002e8e <xQueueReceive+0x62>
	__asm volatile
 8002e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e7a:	f383 8811 	msr	BASEPRI, r3
 8002e7e:	f3bf 8f6f 	isb	sy
 8002e82:	f3bf 8f4f 	dsb	sy
 8002e86:	61fb      	str	r3, [r7, #28]
}
 8002e88:	bf00      	nop
 8002e8a:	bf00      	nop
 8002e8c:	e7fd      	b.n	8002e8a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e8e:	f001 f875 	bl	8003f7c <xTaskGetSchedulerState>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d102      	bne.n	8002e9e <xQueueReceive+0x72>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <xQueueReceive+0x76>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e000      	b.n	8002ea4 <xQueueReceive+0x78>
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10b      	bne.n	8002ec0 <xQueueReceive+0x94>
	__asm volatile
 8002ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eac:	f383 8811 	msr	BASEPRI, r3
 8002eb0:	f3bf 8f6f 	isb	sy
 8002eb4:	f3bf 8f4f 	dsb	sy
 8002eb8:	61bb      	str	r3, [r7, #24]
}
 8002eba:	bf00      	nop
 8002ebc:	bf00      	nop
 8002ebe:	e7fd      	b.n	8002ebc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ec0:	f001 fdca 	bl	8004a58 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d01f      	beq.n	8002f10 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002ed0:	68b9      	ldr	r1, [r7, #8]
 8002ed2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ed4:	f000 f8f6 	bl	80030c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eda:	1e5a      	subs	r2, r3, #1
 8002edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ede:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00f      	beq.n	8002f08 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eea:	3310      	adds	r3, #16
 8002eec:	4618      	mov	r0, r3
 8002eee:	f000 fe7f 	bl	8003bf0 <xTaskRemoveFromEventList>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d007      	beq.n	8002f08 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002ef8:	4b3c      	ldr	r3, [pc, #240]	@ (8002fec <xQueueReceive+0x1c0>)
 8002efa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	f3bf 8f4f 	dsb	sy
 8002f04:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002f08:	f001 fdd8 	bl	8004abc <vPortExitCritical>
				return pdPASS;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e069      	b.n	8002fe4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d103      	bne.n	8002f1e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f16:	f001 fdd1 	bl	8004abc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	e062      	b.n	8002fe4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d106      	bne.n	8002f32 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f24:	f107 0310 	add.w	r3, r7, #16
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f000 fec5 	bl	8003cb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f32:	f001 fdc3 	bl	8004abc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f36:	f000 fc2d 	bl	8003794 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f3a:	f001 fd8d 	bl	8004a58 <vPortEnterCritical>
 8002f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f44:	b25b      	sxtb	r3, r3
 8002f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4a:	d103      	bne.n	8002f54 <xQueueReceive+0x128>
 8002f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f5a:	b25b      	sxtb	r3, r3
 8002f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f60:	d103      	bne.n	8002f6a <xQueueReceive+0x13e>
 8002f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f6a:	f001 fda7 	bl	8004abc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f6e:	1d3a      	adds	r2, r7, #4
 8002f70:	f107 0310 	add.w	r3, r7, #16
 8002f74:	4611      	mov	r1, r2
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 feb4 	bl	8003ce4 <xTaskCheckForTimeOut>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d123      	bne.n	8002fca <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f84:	f000 f916 	bl	80031b4 <prvIsQueueEmpty>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d017      	beq.n	8002fbe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f90:	3324      	adds	r3, #36	@ 0x24
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	4611      	mov	r1, r2
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 fdd8 	bl	8003b4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f9e:	f000 f8b7 	bl	8003110 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002fa2:	f000 fc05 	bl	80037b0 <xTaskResumeAll>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d189      	bne.n	8002ec0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002fac:	4b0f      	ldr	r3, [pc, #60]	@ (8002fec <xQueueReceive+0x1c0>)
 8002fae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	f3bf 8f4f 	dsb	sy
 8002fb8:	f3bf 8f6f 	isb	sy
 8002fbc:	e780      	b.n	8002ec0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002fbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002fc0:	f000 f8a6 	bl	8003110 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fc4:	f000 fbf4 	bl	80037b0 <xTaskResumeAll>
 8002fc8:	e77a      	b.n	8002ec0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002fca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002fcc:	f000 f8a0 	bl	8003110 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fd0:	f000 fbee 	bl	80037b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002fd6:	f000 f8ed 	bl	80031b4 <prvIsQueueEmpty>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f43f af6f 	beq.w	8002ec0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002fe2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3730      	adds	r7, #48	@ 0x30
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	e000ed04 	.word	0xe000ed04

08002ff0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003004:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10d      	bne.n	800302a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d14d      	bne.n	80030b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	4618      	mov	r0, r3
 800301c:	f000 ffcc 	bl	8003fb8 <xTaskPriorityDisinherit>
 8003020:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	609a      	str	r2, [r3, #8]
 8003028:	e043      	b.n	80030b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d119      	bne.n	8003064 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6858      	ldr	r0, [r3, #4]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003038:	461a      	mov	r2, r3
 800303a:	68b9      	ldr	r1, [r7, #8]
 800303c:	f002 f8a0 	bl	8005180 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003048:	441a      	add	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	429a      	cmp	r2, r3
 8003058:	d32b      	bcc.n	80030b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	605a      	str	r2, [r3, #4]
 8003062:	e026      	b.n	80030b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	68d8      	ldr	r0, [r3, #12]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306c:	461a      	mov	r2, r3
 800306e:	68b9      	ldr	r1, [r7, #8]
 8003070:	f002 f886 	bl	8005180 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	68da      	ldr	r2, [r3, #12]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307c:	425b      	negs	r3, r3
 800307e:	441a      	add	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	68da      	ldr	r2, [r3, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	429a      	cmp	r2, r3
 800308e:	d207      	bcs.n	80030a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003098:	425b      	negs	r3, r3
 800309a:	441a      	add	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d105      	bne.n	80030b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d002      	beq.n	80030b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1c5a      	adds	r2, r3, #1
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80030ba:	697b      	ldr	r3, [r7, #20]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d018      	beq.n	8003108 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030de:	441a      	add	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d303      	bcc.n	80030f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68d9      	ldr	r1, [r3, #12]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003100:	461a      	mov	r2, r3
 8003102:	6838      	ldr	r0, [r7, #0]
 8003104:	f002 f83c 	bl	8005180 <memcpy>
	}
}
 8003108:	bf00      	nop
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003118:	f001 fc9e 	bl	8004a58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003122:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003124:	e011      	b.n	800314a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312a:	2b00      	cmp	r3, #0
 800312c:	d012      	beq.n	8003154 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3324      	adds	r3, #36	@ 0x24
 8003132:	4618      	mov	r0, r3
 8003134:	f000 fd5c 	bl	8003bf0 <xTaskRemoveFromEventList>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800313e:	f000 fe35 	bl	8003dac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003142:	7bfb      	ldrb	r3, [r7, #15]
 8003144:	3b01      	subs	r3, #1
 8003146:	b2db      	uxtb	r3, r3
 8003148:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800314a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800314e:	2b00      	cmp	r3, #0
 8003150:	dce9      	bgt.n	8003126 <prvUnlockQueue+0x16>
 8003152:	e000      	b.n	8003156 <prvUnlockQueue+0x46>
					break;
 8003154:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	22ff      	movs	r2, #255	@ 0xff
 800315a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800315e:	f001 fcad 	bl	8004abc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003162:	f001 fc79 	bl	8004a58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800316c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800316e:	e011      	b.n	8003194 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d012      	beq.n	800319e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3310      	adds	r3, #16
 800317c:	4618      	mov	r0, r3
 800317e:	f000 fd37 	bl	8003bf0 <xTaskRemoveFromEventList>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003188:	f000 fe10 	bl	8003dac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800318c:	7bbb      	ldrb	r3, [r7, #14]
 800318e:	3b01      	subs	r3, #1
 8003190:	b2db      	uxtb	r3, r3
 8003192:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003194:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003198:	2b00      	cmp	r3, #0
 800319a:	dce9      	bgt.n	8003170 <prvUnlockQueue+0x60>
 800319c:	e000      	b.n	80031a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800319e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	22ff      	movs	r2, #255	@ 0xff
 80031a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80031a8:	f001 fc88 	bl	8004abc <vPortExitCritical>
}
 80031ac:	bf00      	nop
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80031bc:	f001 fc4c 	bl	8004a58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d102      	bne.n	80031ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80031c8:	2301      	movs	r3, #1
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	e001      	b.n	80031d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80031ce:	2300      	movs	r3, #0
 80031d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80031d2:	f001 fc73 	bl	8004abc <vPortExitCritical>

	return xReturn;
 80031d6:	68fb      	ldr	r3, [r7, #12]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80031e8:	f001 fc36 	bl	8004a58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d102      	bne.n	80031fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80031f8:	2301      	movs	r3, #1
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	e001      	b.n	8003202 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80031fe:	2300      	movs	r3, #0
 8003200:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003202:	f001 fc5b 	bl	8004abc <vPortExitCritical>

	return xReturn;
 8003206:	68fb      	ldr	r3, [r7, #12]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800321a:	2300      	movs	r3, #0
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	e014      	b.n	800324a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003220:	4a0f      	ldr	r2, [pc, #60]	@ (8003260 <vQueueAddToRegistry+0x50>)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10b      	bne.n	8003244 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800322c:	490c      	ldr	r1, [pc, #48]	@ (8003260 <vQueueAddToRegistry+0x50>)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003236:	4a0a      	ldr	r2, [pc, #40]	@ (8003260 <vQueueAddToRegistry+0x50>)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	4413      	add	r3, r2
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003242:	e006      	b.n	8003252 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	3301      	adds	r3, #1
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2b07      	cmp	r3, #7
 800324e:	d9e7      	bls.n	8003220 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003250:	bf00      	nop
 8003252:	bf00      	nop
 8003254:	3714      	adds	r7, #20
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	20000870 	.word	0x20000870

08003264 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003274:	f001 fbf0 	bl	8004a58 <vPortEnterCritical>
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800327e:	b25b      	sxtb	r3, r3
 8003280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003284:	d103      	bne.n	800328e <vQueueWaitForMessageRestricted+0x2a>
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003294:	b25b      	sxtb	r3, r3
 8003296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800329a:	d103      	bne.n	80032a4 <vQueueWaitForMessageRestricted+0x40>
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032a4:	f001 fc0a 	bl	8004abc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d106      	bne.n	80032be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	3324      	adds	r3, #36	@ 0x24
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	68b9      	ldr	r1, [r7, #8]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 fc6d 	bl	8003b98 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80032be:	6978      	ldr	r0, [r7, #20]
 80032c0:	f7ff ff26 	bl	8003110 <prvUnlockQueue>
	}
 80032c4:	bf00      	nop
 80032c6:	3718      	adds	r7, #24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b08e      	sub	sp, #56	@ 0x38
 80032d0:	af04      	add	r7, sp, #16
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
 80032d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80032da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10b      	bne.n	80032f8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80032e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032e4:	f383 8811 	msr	BASEPRI, r3
 80032e8:	f3bf 8f6f 	isb	sy
 80032ec:	f3bf 8f4f 	dsb	sy
 80032f0:	623b      	str	r3, [r7, #32]
}
 80032f2:	bf00      	nop
 80032f4:	bf00      	nop
 80032f6:	e7fd      	b.n	80032f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80032f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10b      	bne.n	8003316 <xTaskCreateStatic+0x4a>
	__asm volatile
 80032fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003302:	f383 8811 	msr	BASEPRI, r3
 8003306:	f3bf 8f6f 	isb	sy
 800330a:	f3bf 8f4f 	dsb	sy
 800330e:	61fb      	str	r3, [r7, #28]
}
 8003310:	bf00      	nop
 8003312:	bf00      	nop
 8003314:	e7fd      	b.n	8003312 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003316:	23a8      	movs	r3, #168	@ 0xa8
 8003318:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	2ba8      	cmp	r3, #168	@ 0xa8
 800331e:	d00b      	beq.n	8003338 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003324:	f383 8811 	msr	BASEPRI, r3
 8003328:	f3bf 8f6f 	isb	sy
 800332c:	f3bf 8f4f 	dsb	sy
 8003330:	61bb      	str	r3, [r7, #24]
}
 8003332:	bf00      	nop
 8003334:	bf00      	nop
 8003336:	e7fd      	b.n	8003334 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003338:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800333a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800333c:	2b00      	cmp	r3, #0
 800333e:	d01e      	beq.n	800337e <xTaskCreateStatic+0xb2>
 8003340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003342:	2b00      	cmp	r3, #0
 8003344:	d01b      	beq.n	800337e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003348:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800334a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800334e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003352:	2202      	movs	r2, #2
 8003354:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003358:	2300      	movs	r3, #0
 800335a:	9303      	str	r3, [sp, #12]
 800335c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335e:	9302      	str	r3, [sp, #8]
 8003360:	f107 0314 	add.w	r3, r7, #20
 8003364:	9301      	str	r3, [sp, #4]
 8003366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	68b9      	ldr	r1, [r7, #8]
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f000 f851 	bl	8003418 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003376:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003378:	f000 f8f6 	bl	8003568 <prvAddNewTaskToReadyList>
 800337c:	e001      	b.n	8003382 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800337e:	2300      	movs	r3, #0
 8003380:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003382:	697b      	ldr	r3, [r7, #20]
	}
 8003384:	4618      	mov	r0, r3
 8003386:	3728      	adds	r7, #40	@ 0x28
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800338c:	b580      	push	{r7, lr}
 800338e:	b08c      	sub	sp, #48	@ 0x30
 8003390:	af04      	add	r7, sp, #16
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	603b      	str	r3, [r7, #0]
 8003398:	4613      	mov	r3, r2
 800339a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800339c:	88fb      	ldrh	r3, [r7, #6]
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4618      	mov	r0, r3
 80033a2:	f001 fc7b 	bl	8004c9c <pvPortMalloc>
 80033a6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00e      	beq.n	80033cc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80033ae:	20a8      	movs	r0, #168	@ 0xa8
 80033b0:	f001 fc74 	bl	8004c9c <pvPortMalloc>
 80033b4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80033c2:	e005      	b.n	80033d0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80033c4:	6978      	ldr	r0, [r7, #20]
 80033c6:	f001 fd37 	bl	8004e38 <vPortFree>
 80033ca:	e001      	b.n	80033d0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80033cc:	2300      	movs	r3, #0
 80033ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d017      	beq.n	8003406 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80033de:	88fa      	ldrh	r2, [r7, #6]
 80033e0:	2300      	movs	r3, #0
 80033e2:	9303      	str	r3, [sp, #12]
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	9302      	str	r3, [sp, #8]
 80033e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ea:	9301      	str	r3, [sp, #4]
 80033ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	68b9      	ldr	r1, [r7, #8]
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 f80f 	bl	8003418 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033fa:	69f8      	ldr	r0, [r7, #28]
 80033fc:	f000 f8b4 	bl	8003568 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003400:	2301      	movs	r3, #1
 8003402:	61bb      	str	r3, [r7, #24]
 8003404:	e002      	b.n	800340c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003406:	f04f 33ff 	mov.w	r3, #4294967295
 800340a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800340c:	69bb      	ldr	r3, [r7, #24]
	}
 800340e:	4618      	mov	r0, r3
 8003410:	3720      	adds	r7, #32
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b088      	sub	sp, #32
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
 8003424:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003428:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	461a      	mov	r2, r3
 8003430:	21a5      	movs	r1, #165	@ 0xa5
 8003432:	f001 fe21 	bl	8005078 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003438:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003440:	3b01      	subs	r3, #1
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	f023 0307 	bic.w	r3, r3, #7
 800344e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	f003 0307 	and.w	r3, r3, #7
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00b      	beq.n	8003472 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800345a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800345e:	f383 8811 	msr	BASEPRI, r3
 8003462:	f3bf 8f6f 	isb	sy
 8003466:	f3bf 8f4f 	dsb	sy
 800346a:	617b      	str	r3, [r7, #20]
}
 800346c:	bf00      	nop
 800346e:	bf00      	nop
 8003470:	e7fd      	b.n	800346e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d01f      	beq.n	80034b8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003478:	2300      	movs	r3, #0
 800347a:	61fb      	str	r3, [r7, #28]
 800347c:	e012      	b.n	80034a4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	4413      	add	r3, r2
 8003484:	7819      	ldrb	r1, [r3, #0]
 8003486:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	4413      	add	r3, r2
 800348c:	3334      	adds	r3, #52	@ 0x34
 800348e:	460a      	mov	r2, r1
 8003490:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	4413      	add	r3, r2
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d006      	beq.n	80034ac <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	3301      	adds	r3, #1
 80034a2:	61fb      	str	r3, [r7, #28]
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	2b0f      	cmp	r3, #15
 80034a8:	d9e9      	bls.n	800347e <prvInitialiseNewTask+0x66>
 80034aa:	e000      	b.n	80034ae <prvInitialiseNewTask+0x96>
			{
				break;
 80034ac:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80034ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034b6:	e003      	b.n	80034c0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80034b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80034c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034c2:	2b37      	cmp	r3, #55	@ 0x37
 80034c4:	d901      	bls.n	80034ca <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80034c6:	2337      	movs	r3, #55	@ 0x37
 80034c8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80034ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034ce:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80034d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034d4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80034d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d8:	2200      	movs	r2, #0
 80034da:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80034dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034de:	3304      	adds	r3, #4
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff f965 	bl	80027b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80034e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e8:	3318      	adds	r3, #24
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7ff f960 	bl	80027b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80034f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034f4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034f8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80034fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034fe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003502:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003504:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003508:	2200      	movs	r2, #0
 800350a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800350e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003510:	2200      	movs	r2, #0
 8003512:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003518:	3354      	adds	r3, #84	@ 0x54
 800351a:	224c      	movs	r2, #76	@ 0x4c
 800351c:	2100      	movs	r1, #0
 800351e:	4618      	mov	r0, r3
 8003520:	f001 fdaa 	bl	8005078 <memset>
 8003524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003526:	4a0d      	ldr	r2, [pc, #52]	@ (800355c <prvInitialiseNewTask+0x144>)
 8003528:	659a      	str	r2, [r3, #88]	@ 0x58
 800352a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800352c:	4a0c      	ldr	r2, [pc, #48]	@ (8003560 <prvInitialiseNewTask+0x148>)
 800352e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003532:	4a0c      	ldr	r2, [pc, #48]	@ (8003564 <prvInitialiseNewTask+0x14c>)
 8003534:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	68f9      	ldr	r1, [r7, #12]
 800353a:	69b8      	ldr	r0, [r7, #24]
 800353c:	f001 f95a 	bl	80047f4 <pxPortInitialiseStack>
 8003540:	4602      	mov	r2, r0
 8003542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003544:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800354c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800354e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003550:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003552:	bf00      	nop
 8003554:	3720      	adds	r7, #32
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	20004b04 	.word	0x20004b04
 8003560:	20004b6c 	.word	0x20004b6c
 8003564:	20004bd4 	.word	0x20004bd4

08003568 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003570:	f001 fa72 	bl	8004a58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003574:	4b2d      	ldr	r3, [pc, #180]	@ (800362c <prvAddNewTaskToReadyList+0xc4>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	3301      	adds	r3, #1
 800357a:	4a2c      	ldr	r2, [pc, #176]	@ (800362c <prvAddNewTaskToReadyList+0xc4>)
 800357c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800357e:	4b2c      	ldr	r3, [pc, #176]	@ (8003630 <prvAddNewTaskToReadyList+0xc8>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d109      	bne.n	800359a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003586:	4a2a      	ldr	r2, [pc, #168]	@ (8003630 <prvAddNewTaskToReadyList+0xc8>)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800358c:	4b27      	ldr	r3, [pc, #156]	@ (800362c <prvAddNewTaskToReadyList+0xc4>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d110      	bne.n	80035b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003594:	f000 fc2e 	bl	8003df4 <prvInitialiseTaskLists>
 8003598:	e00d      	b.n	80035b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800359a:	4b26      	ldr	r3, [pc, #152]	@ (8003634 <prvAddNewTaskToReadyList+0xcc>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d109      	bne.n	80035b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80035a2:	4b23      	ldr	r3, [pc, #140]	@ (8003630 <prvAddNewTaskToReadyList+0xc8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d802      	bhi.n	80035b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80035b0:	4a1f      	ldr	r2, [pc, #124]	@ (8003630 <prvAddNewTaskToReadyList+0xc8>)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80035b6:	4b20      	ldr	r3, [pc, #128]	@ (8003638 <prvAddNewTaskToReadyList+0xd0>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	3301      	adds	r3, #1
 80035bc:	4a1e      	ldr	r2, [pc, #120]	@ (8003638 <prvAddNewTaskToReadyList+0xd0>)
 80035be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80035c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003638 <prvAddNewTaskToReadyList+0xd0>)
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035cc:	4b1b      	ldr	r3, [pc, #108]	@ (800363c <prvAddNewTaskToReadyList+0xd4>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d903      	bls.n	80035dc <prvAddNewTaskToReadyList+0x74>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d8:	4a18      	ldr	r2, [pc, #96]	@ (800363c <prvAddNewTaskToReadyList+0xd4>)
 80035da:	6013      	str	r3, [r2, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035e0:	4613      	mov	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4a15      	ldr	r2, [pc, #84]	@ (8003640 <prvAddNewTaskToReadyList+0xd8>)
 80035ea:	441a      	add	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3304      	adds	r3, #4
 80035f0:	4619      	mov	r1, r3
 80035f2:	4610      	mov	r0, r2
 80035f4:	f7ff f8e9 	bl	80027ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80035f8:	f001 fa60 	bl	8004abc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80035fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003634 <prvAddNewTaskToReadyList+0xcc>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00e      	beq.n	8003622 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003604:	4b0a      	ldr	r3, [pc, #40]	@ (8003630 <prvAddNewTaskToReadyList+0xc8>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800360e:	429a      	cmp	r2, r3
 8003610:	d207      	bcs.n	8003622 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003612:	4b0c      	ldr	r3, [pc, #48]	@ (8003644 <prvAddNewTaskToReadyList+0xdc>)
 8003614:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003618:	601a      	str	r2, [r3, #0]
 800361a:	f3bf 8f4f 	dsb	sy
 800361e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	20000d84 	.word	0x20000d84
 8003630:	200008b0 	.word	0x200008b0
 8003634:	20000d90 	.word	0x20000d90
 8003638:	20000da0 	.word	0x20000da0
 800363c:	20000d8c 	.word	0x20000d8c
 8003640:	200008b4 	.word	0x200008b4
 8003644:	e000ed04 	.word	0xe000ed04

08003648 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003650:	2300      	movs	r3, #0
 8003652:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d018      	beq.n	800368c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800365a:	4b14      	ldr	r3, [pc, #80]	@ (80036ac <vTaskDelay+0x64>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00b      	beq.n	800367a <vTaskDelay+0x32>
	__asm volatile
 8003662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003666:	f383 8811 	msr	BASEPRI, r3
 800366a:	f3bf 8f6f 	isb	sy
 800366e:	f3bf 8f4f 	dsb	sy
 8003672:	60bb      	str	r3, [r7, #8]
}
 8003674:	bf00      	nop
 8003676:	bf00      	nop
 8003678:	e7fd      	b.n	8003676 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800367a:	f000 f88b 	bl	8003794 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800367e:	2100      	movs	r1, #0
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 fd09 	bl	8004098 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003686:	f000 f893 	bl	80037b0 <xTaskResumeAll>
 800368a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d107      	bne.n	80036a2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003692:	4b07      	ldr	r3, [pc, #28]	@ (80036b0 <vTaskDelay+0x68>)
 8003694:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	f3bf 8f4f 	dsb	sy
 800369e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80036a2:	bf00      	nop
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	20000dac 	.word	0x20000dac
 80036b0:	e000ed04 	.word	0xe000ed04

080036b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08a      	sub	sp, #40	@ 0x28
 80036b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80036ba:	2300      	movs	r3, #0
 80036bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80036be:	2300      	movs	r3, #0
 80036c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80036c2:	463a      	mov	r2, r7
 80036c4:	1d39      	adds	r1, r7, #4
 80036c6:	f107 0308 	add.w	r3, r7, #8
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7ff f81c 	bl	8002708 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80036d0:	6839      	ldr	r1, [r7, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	9202      	str	r2, [sp, #8]
 80036d8:	9301      	str	r3, [sp, #4]
 80036da:	2300      	movs	r3, #0
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	2300      	movs	r3, #0
 80036e0:	460a      	mov	r2, r1
 80036e2:	4924      	ldr	r1, [pc, #144]	@ (8003774 <vTaskStartScheduler+0xc0>)
 80036e4:	4824      	ldr	r0, [pc, #144]	@ (8003778 <vTaskStartScheduler+0xc4>)
 80036e6:	f7ff fdf1 	bl	80032cc <xTaskCreateStatic>
 80036ea:	4603      	mov	r3, r0
 80036ec:	4a23      	ldr	r2, [pc, #140]	@ (800377c <vTaskStartScheduler+0xc8>)
 80036ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80036f0:	4b22      	ldr	r3, [pc, #136]	@ (800377c <vTaskStartScheduler+0xc8>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d002      	beq.n	80036fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80036f8:	2301      	movs	r3, #1
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	e001      	b.n	8003702 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80036fe:	2300      	movs	r3, #0
 8003700:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d102      	bne.n	800370e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003708:	f000 fd1a 	bl	8004140 <xTimerCreateTimerTask>
 800370c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d11b      	bne.n	800374c <vTaskStartScheduler+0x98>
	__asm volatile
 8003714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003718:	f383 8811 	msr	BASEPRI, r3
 800371c:	f3bf 8f6f 	isb	sy
 8003720:	f3bf 8f4f 	dsb	sy
 8003724:	613b      	str	r3, [r7, #16]
}
 8003726:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003728:	4b15      	ldr	r3, [pc, #84]	@ (8003780 <vTaskStartScheduler+0xcc>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	3354      	adds	r3, #84	@ 0x54
 800372e:	4a15      	ldr	r2, [pc, #84]	@ (8003784 <vTaskStartScheduler+0xd0>)
 8003730:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003732:	4b15      	ldr	r3, [pc, #84]	@ (8003788 <vTaskStartScheduler+0xd4>)
 8003734:	f04f 32ff 	mov.w	r2, #4294967295
 8003738:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800373a:	4b14      	ldr	r3, [pc, #80]	@ (800378c <vTaskStartScheduler+0xd8>)
 800373c:	2201      	movs	r2, #1
 800373e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003740:	4b13      	ldr	r3, [pc, #76]	@ (8003790 <vTaskStartScheduler+0xdc>)
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003746:	f001 f8e3 	bl	8004910 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800374a:	e00f      	b.n	800376c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003752:	d10b      	bne.n	800376c <vTaskStartScheduler+0xb8>
	__asm volatile
 8003754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003758:	f383 8811 	msr	BASEPRI, r3
 800375c:	f3bf 8f6f 	isb	sy
 8003760:	f3bf 8f4f 	dsb	sy
 8003764:	60fb      	str	r3, [r7, #12]
}
 8003766:	bf00      	nop
 8003768:	bf00      	nop
 800376a:	e7fd      	b.n	8003768 <vTaskStartScheduler+0xb4>
}
 800376c:	bf00      	nop
 800376e:	3718      	adds	r7, #24
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	08005280 	.word	0x08005280
 8003778:	08003dc5 	.word	0x08003dc5
 800377c:	20000da8 	.word	0x20000da8
 8003780:	200008b0 	.word	0x200008b0
 8003784:	20000010 	.word	0x20000010
 8003788:	20000da4 	.word	0x20000da4
 800378c:	20000d90 	.word	0x20000d90
 8003790:	20000d88 	.word	0x20000d88

08003794 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003798:	4b04      	ldr	r3, [pc, #16]	@ (80037ac <vTaskSuspendAll+0x18>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	3301      	adds	r3, #1
 800379e:	4a03      	ldr	r2, [pc, #12]	@ (80037ac <vTaskSuspendAll+0x18>)
 80037a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80037a2:	bf00      	nop
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	20000dac 	.word	0x20000dac

080037b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80037b6:	2300      	movs	r3, #0
 80037b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80037ba:	2300      	movs	r3, #0
 80037bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80037be:	4b42      	ldr	r3, [pc, #264]	@ (80038c8 <xTaskResumeAll+0x118>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10b      	bne.n	80037de <xTaskResumeAll+0x2e>
	__asm volatile
 80037c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ca:	f383 8811 	msr	BASEPRI, r3
 80037ce:	f3bf 8f6f 	isb	sy
 80037d2:	f3bf 8f4f 	dsb	sy
 80037d6:	603b      	str	r3, [r7, #0]
}
 80037d8:	bf00      	nop
 80037da:	bf00      	nop
 80037dc:	e7fd      	b.n	80037da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80037de:	f001 f93b 	bl	8004a58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80037e2:	4b39      	ldr	r3, [pc, #228]	@ (80038c8 <xTaskResumeAll+0x118>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	3b01      	subs	r3, #1
 80037e8:	4a37      	ldr	r2, [pc, #220]	@ (80038c8 <xTaskResumeAll+0x118>)
 80037ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037ec:	4b36      	ldr	r3, [pc, #216]	@ (80038c8 <xTaskResumeAll+0x118>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d162      	bne.n	80038ba <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80037f4:	4b35      	ldr	r3, [pc, #212]	@ (80038cc <xTaskResumeAll+0x11c>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d05e      	beq.n	80038ba <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037fc:	e02f      	b.n	800385e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037fe:	4b34      	ldr	r3, [pc, #208]	@ (80038d0 <xTaskResumeAll+0x120>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	3318      	adds	r3, #24
 800380a:	4618      	mov	r0, r3
 800380c:	f7ff f83a 	bl	8002884 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	3304      	adds	r3, #4
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff f835 	bl	8002884 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800381e:	4b2d      	ldr	r3, [pc, #180]	@ (80038d4 <xTaskResumeAll+0x124>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	429a      	cmp	r2, r3
 8003824:	d903      	bls.n	800382e <xTaskResumeAll+0x7e>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800382a:	4a2a      	ldr	r2, [pc, #168]	@ (80038d4 <xTaskResumeAll+0x124>)
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003832:	4613      	mov	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4a27      	ldr	r2, [pc, #156]	@ (80038d8 <xTaskResumeAll+0x128>)
 800383c:	441a      	add	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	3304      	adds	r3, #4
 8003842:	4619      	mov	r1, r3
 8003844:	4610      	mov	r0, r2
 8003846:	f7fe ffc0 	bl	80027ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800384e:	4b23      	ldr	r3, [pc, #140]	@ (80038dc <xTaskResumeAll+0x12c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003854:	429a      	cmp	r2, r3
 8003856:	d302      	bcc.n	800385e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003858:	4b21      	ldr	r3, [pc, #132]	@ (80038e0 <xTaskResumeAll+0x130>)
 800385a:	2201      	movs	r2, #1
 800385c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800385e:	4b1c      	ldr	r3, [pc, #112]	@ (80038d0 <xTaskResumeAll+0x120>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1cb      	bne.n	80037fe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800386c:	f000 fb66 	bl	8003f3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003870:	4b1c      	ldr	r3, [pc, #112]	@ (80038e4 <xTaskResumeAll+0x134>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d010      	beq.n	800389e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800387c:	f000 f846 	bl	800390c <xTaskIncrementTick>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d002      	beq.n	800388c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003886:	4b16      	ldr	r3, [pc, #88]	@ (80038e0 <xTaskResumeAll+0x130>)
 8003888:	2201      	movs	r2, #1
 800388a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3b01      	subs	r3, #1
 8003890:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1f1      	bne.n	800387c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003898:	4b12      	ldr	r3, [pc, #72]	@ (80038e4 <xTaskResumeAll+0x134>)
 800389a:	2200      	movs	r2, #0
 800389c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800389e:	4b10      	ldr	r3, [pc, #64]	@ (80038e0 <xTaskResumeAll+0x130>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d009      	beq.n	80038ba <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80038a6:	2301      	movs	r3, #1
 80038a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80038aa:	4b0f      	ldr	r3, [pc, #60]	@ (80038e8 <xTaskResumeAll+0x138>)
 80038ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	f3bf 8f4f 	dsb	sy
 80038b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80038ba:	f001 f8ff 	bl	8004abc <vPortExitCritical>

	return xAlreadyYielded;
 80038be:	68bb      	ldr	r3, [r7, #8]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	20000dac 	.word	0x20000dac
 80038cc:	20000d84 	.word	0x20000d84
 80038d0:	20000d44 	.word	0x20000d44
 80038d4:	20000d8c 	.word	0x20000d8c
 80038d8:	200008b4 	.word	0x200008b4
 80038dc:	200008b0 	.word	0x200008b0
 80038e0:	20000d98 	.word	0x20000d98
 80038e4:	20000d94 	.word	0x20000d94
 80038e8:	e000ed04 	.word	0xe000ed04

080038ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80038f2:	4b05      	ldr	r3, [pc, #20]	@ (8003908 <xTaskGetTickCount+0x1c>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80038f8:	687b      	ldr	r3, [r7, #4]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	20000d88 	.word	0x20000d88

0800390c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003912:	2300      	movs	r3, #0
 8003914:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003916:	4b4f      	ldr	r3, [pc, #316]	@ (8003a54 <xTaskIncrementTick+0x148>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	f040 8090 	bne.w	8003a40 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003920:	4b4d      	ldr	r3, [pc, #308]	@ (8003a58 <xTaskIncrementTick+0x14c>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	3301      	adds	r3, #1
 8003926:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003928:	4a4b      	ldr	r2, [pc, #300]	@ (8003a58 <xTaskIncrementTick+0x14c>)
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d121      	bne.n	8003978 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003934:	4b49      	ldr	r3, [pc, #292]	@ (8003a5c <xTaskIncrementTick+0x150>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00b      	beq.n	8003956 <xTaskIncrementTick+0x4a>
	__asm volatile
 800393e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003942:	f383 8811 	msr	BASEPRI, r3
 8003946:	f3bf 8f6f 	isb	sy
 800394a:	f3bf 8f4f 	dsb	sy
 800394e:	603b      	str	r3, [r7, #0]
}
 8003950:	bf00      	nop
 8003952:	bf00      	nop
 8003954:	e7fd      	b.n	8003952 <xTaskIncrementTick+0x46>
 8003956:	4b41      	ldr	r3, [pc, #260]	@ (8003a5c <xTaskIncrementTick+0x150>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	4b40      	ldr	r3, [pc, #256]	@ (8003a60 <xTaskIncrementTick+0x154>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a3e      	ldr	r2, [pc, #248]	@ (8003a5c <xTaskIncrementTick+0x150>)
 8003962:	6013      	str	r3, [r2, #0]
 8003964:	4a3e      	ldr	r2, [pc, #248]	@ (8003a60 <xTaskIncrementTick+0x154>)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6013      	str	r3, [r2, #0]
 800396a:	4b3e      	ldr	r3, [pc, #248]	@ (8003a64 <xTaskIncrementTick+0x158>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	3301      	adds	r3, #1
 8003970:	4a3c      	ldr	r2, [pc, #240]	@ (8003a64 <xTaskIncrementTick+0x158>)
 8003972:	6013      	str	r3, [r2, #0]
 8003974:	f000 fae2 	bl	8003f3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003978:	4b3b      	ldr	r3, [pc, #236]	@ (8003a68 <xTaskIncrementTick+0x15c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	429a      	cmp	r2, r3
 8003980:	d349      	bcc.n	8003a16 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003982:	4b36      	ldr	r3, [pc, #216]	@ (8003a5c <xTaskIncrementTick+0x150>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d104      	bne.n	8003996 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800398c:	4b36      	ldr	r3, [pc, #216]	@ (8003a68 <xTaskIncrementTick+0x15c>)
 800398e:	f04f 32ff 	mov.w	r2, #4294967295
 8003992:	601a      	str	r2, [r3, #0]
					break;
 8003994:	e03f      	b.n	8003a16 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003996:	4b31      	ldr	r3, [pc, #196]	@ (8003a5c <xTaskIncrementTick+0x150>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d203      	bcs.n	80039b6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80039ae:	4a2e      	ldr	r2, [pc, #184]	@ (8003a68 <xTaskIncrementTick+0x15c>)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80039b4:	e02f      	b.n	8003a16 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	3304      	adds	r3, #4
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fe ff62 	bl	8002884 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d004      	beq.n	80039d2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	3318      	adds	r3, #24
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fe ff59 	bl	8002884 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039d6:	4b25      	ldr	r3, [pc, #148]	@ (8003a6c <xTaskIncrementTick+0x160>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d903      	bls.n	80039e6 <xTaskIncrementTick+0xda>
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e2:	4a22      	ldr	r2, [pc, #136]	@ (8003a6c <xTaskIncrementTick+0x160>)
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039ea:	4613      	mov	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4a1f      	ldr	r2, [pc, #124]	@ (8003a70 <xTaskIncrementTick+0x164>)
 80039f4:	441a      	add	r2, r3
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	3304      	adds	r3, #4
 80039fa:	4619      	mov	r1, r3
 80039fc:	4610      	mov	r0, r2
 80039fe:	f7fe fee4 	bl	80027ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a06:	4b1b      	ldr	r3, [pc, #108]	@ (8003a74 <xTaskIncrementTick+0x168>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d3b8      	bcc.n	8003982 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003a10:	2301      	movs	r3, #1
 8003a12:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a14:	e7b5      	b.n	8003982 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a16:	4b17      	ldr	r3, [pc, #92]	@ (8003a74 <xTaskIncrementTick+0x168>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a1c:	4914      	ldr	r1, [pc, #80]	@ (8003a70 <xTaskIncrementTick+0x164>)
 8003a1e:	4613      	mov	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4413      	add	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	440b      	add	r3, r1
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d901      	bls.n	8003a32 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003a32:	4b11      	ldr	r3, [pc, #68]	@ (8003a78 <xTaskIncrementTick+0x16c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d007      	beq.n	8003a4a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	e004      	b.n	8003a4a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003a40:	4b0e      	ldr	r3, [pc, #56]	@ (8003a7c <xTaskIncrementTick+0x170>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	3301      	adds	r3, #1
 8003a46:	4a0d      	ldr	r2, [pc, #52]	@ (8003a7c <xTaskIncrementTick+0x170>)
 8003a48:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003a4a:	697b      	ldr	r3, [r7, #20]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3718      	adds	r7, #24
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	20000dac 	.word	0x20000dac
 8003a58:	20000d88 	.word	0x20000d88
 8003a5c:	20000d3c 	.word	0x20000d3c
 8003a60:	20000d40 	.word	0x20000d40
 8003a64:	20000d9c 	.word	0x20000d9c
 8003a68:	20000da4 	.word	0x20000da4
 8003a6c:	20000d8c 	.word	0x20000d8c
 8003a70:	200008b4 	.word	0x200008b4
 8003a74:	200008b0 	.word	0x200008b0
 8003a78:	20000d98 	.word	0x20000d98
 8003a7c:	20000d94 	.word	0x20000d94

08003a80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a86:	4b2b      	ldr	r3, [pc, #172]	@ (8003b34 <vTaskSwitchContext+0xb4>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a8e:	4b2a      	ldr	r3, [pc, #168]	@ (8003b38 <vTaskSwitchContext+0xb8>)
 8003a90:	2201      	movs	r2, #1
 8003a92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a94:	e047      	b.n	8003b26 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8003a96:	4b28      	ldr	r3, [pc, #160]	@ (8003b38 <vTaskSwitchContext+0xb8>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a9c:	4b27      	ldr	r3, [pc, #156]	@ (8003b3c <vTaskSwitchContext+0xbc>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	e011      	b.n	8003ac8 <vTaskSwitchContext+0x48>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10b      	bne.n	8003ac2 <vTaskSwitchContext+0x42>
	__asm volatile
 8003aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aae:	f383 8811 	msr	BASEPRI, r3
 8003ab2:	f3bf 8f6f 	isb	sy
 8003ab6:	f3bf 8f4f 	dsb	sy
 8003aba:	607b      	str	r3, [r7, #4]
}
 8003abc:	bf00      	nop
 8003abe:	bf00      	nop
 8003ac0:	e7fd      	b.n	8003abe <vTaskSwitchContext+0x3e>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	491d      	ldr	r1, [pc, #116]	@ (8003b40 <vTaskSwitchContext+0xc0>)
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	4613      	mov	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0e3      	beq.n	8003aa4 <vTaskSwitchContext+0x24>
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	4413      	add	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4a16      	ldr	r2, [pc, #88]	@ (8003b40 <vTaskSwitchContext+0xc0>)
 8003ae8:	4413      	add	r3, r2
 8003aea:	60bb      	str	r3, [r7, #8]
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	605a      	str	r2, [r3, #4]
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	3308      	adds	r3, #8
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d104      	bne.n	8003b0c <vTaskSwitchContext+0x8c>
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	605a      	str	r2, [r3, #4]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	4a0c      	ldr	r2, [pc, #48]	@ (8003b44 <vTaskSwitchContext+0xc4>)
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	4a09      	ldr	r2, [pc, #36]	@ (8003b3c <vTaskSwitchContext+0xbc>)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003b1c:	4b09      	ldr	r3, [pc, #36]	@ (8003b44 <vTaskSwitchContext+0xc4>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	3354      	adds	r3, #84	@ 0x54
 8003b22:	4a09      	ldr	r2, [pc, #36]	@ (8003b48 <vTaskSwitchContext+0xc8>)
 8003b24:	6013      	str	r3, [r2, #0]
}
 8003b26:	bf00      	nop
 8003b28:	3714      	adds	r7, #20
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	20000dac 	.word	0x20000dac
 8003b38:	20000d98 	.word	0x20000d98
 8003b3c:	20000d8c 	.word	0x20000d8c
 8003b40:	200008b4 	.word	0x200008b4
 8003b44:	200008b0 	.word	0x200008b0
 8003b48:	20000010 	.word	0x20000010

08003b4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10b      	bne.n	8003b74 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b60:	f383 8811 	msr	BASEPRI, r3
 8003b64:	f3bf 8f6f 	isb	sy
 8003b68:	f3bf 8f4f 	dsb	sy
 8003b6c:	60fb      	str	r3, [r7, #12]
}
 8003b6e:	bf00      	nop
 8003b70:	bf00      	nop
 8003b72:	e7fd      	b.n	8003b70 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b74:	4b07      	ldr	r3, [pc, #28]	@ (8003b94 <vTaskPlaceOnEventList+0x48>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	3318      	adds	r3, #24
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f7fe fe48 	bl	8002812 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b82:	2101      	movs	r1, #1
 8003b84:	6838      	ldr	r0, [r7, #0]
 8003b86:	f000 fa87 	bl	8004098 <prvAddCurrentTaskToDelayedList>
}
 8003b8a:	bf00      	nop
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	200008b0 	.word	0x200008b0

08003b98 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10b      	bne.n	8003bc2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bae:	f383 8811 	msr	BASEPRI, r3
 8003bb2:	f3bf 8f6f 	isb	sy
 8003bb6:	f3bf 8f4f 	dsb	sy
 8003bba:	617b      	str	r3, [r7, #20]
}
 8003bbc:	bf00      	nop
 8003bbe:	bf00      	nop
 8003bc0:	e7fd      	b.n	8003bbe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8003bec <vTaskPlaceOnEventListRestricted+0x54>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	3318      	adds	r3, #24
 8003bc8:	4619      	mov	r1, r3
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f7fe fdfd 	bl	80027ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bda:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003bdc:	6879      	ldr	r1, [r7, #4]
 8003bde:	68b8      	ldr	r0, [r7, #8]
 8003be0:	f000 fa5a 	bl	8004098 <prvAddCurrentTaskToDelayedList>
	}
 8003be4:	bf00      	nop
 8003be6:	3718      	adds	r7, #24
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	200008b0 	.word	0x200008b0

08003bf0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10b      	bne.n	8003c1e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c0a:	f383 8811 	msr	BASEPRI, r3
 8003c0e:	f3bf 8f6f 	isb	sy
 8003c12:	f3bf 8f4f 	dsb	sy
 8003c16:	60fb      	str	r3, [r7, #12]
}
 8003c18:	bf00      	nop
 8003c1a:	bf00      	nop
 8003c1c:	e7fd      	b.n	8003c1a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	3318      	adds	r3, #24
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7fe fe2e 	bl	8002884 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c28:	4b1d      	ldr	r3, [pc, #116]	@ (8003ca0 <xTaskRemoveFromEventList+0xb0>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d11d      	bne.n	8003c6c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	3304      	adds	r3, #4
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7fe fe25 	bl	8002884 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c3e:	4b19      	ldr	r3, [pc, #100]	@ (8003ca4 <xTaskRemoveFromEventList+0xb4>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d903      	bls.n	8003c4e <xTaskRemoveFromEventList+0x5e>
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c4a:	4a16      	ldr	r2, [pc, #88]	@ (8003ca4 <xTaskRemoveFromEventList+0xb4>)
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c52:	4613      	mov	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4a13      	ldr	r2, [pc, #76]	@ (8003ca8 <xTaskRemoveFromEventList+0xb8>)
 8003c5c:	441a      	add	r2, r3
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	3304      	adds	r3, #4
 8003c62:	4619      	mov	r1, r3
 8003c64:	4610      	mov	r0, r2
 8003c66:	f7fe fdb0 	bl	80027ca <vListInsertEnd>
 8003c6a:	e005      	b.n	8003c78 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	3318      	adds	r3, #24
 8003c70:	4619      	mov	r1, r3
 8003c72:	480e      	ldr	r0, [pc, #56]	@ (8003cac <xTaskRemoveFromEventList+0xbc>)
 8003c74:	f7fe fda9 	bl	80027ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003cb0 <xTaskRemoveFromEventList+0xc0>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d905      	bls.n	8003c92 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003c86:	2301      	movs	r3, #1
 8003c88:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8003cb4 <xTaskRemoveFromEventList+0xc4>)
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	e001      	b.n	8003c96 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003c92:	2300      	movs	r3, #0
 8003c94:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003c96:	697b      	ldr	r3, [r7, #20]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3718      	adds	r7, #24
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	20000dac 	.word	0x20000dac
 8003ca4:	20000d8c 	.word	0x20000d8c
 8003ca8:	200008b4 	.word	0x200008b4
 8003cac:	20000d44 	.word	0x20000d44
 8003cb0:	200008b0 	.word	0x200008b0
 8003cb4:	20000d98 	.word	0x20000d98

08003cb8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003cc0:	4b06      	ldr	r3, [pc, #24]	@ (8003cdc <vTaskInternalSetTimeOutState+0x24>)
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003cc8:	4b05      	ldr	r3, [pc, #20]	@ (8003ce0 <vTaskInternalSetTimeOutState+0x28>)
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	605a      	str	r2, [r3, #4]
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr
 8003cdc:	20000d9c 	.word	0x20000d9c
 8003ce0:	20000d88 	.word	0x20000d88

08003ce4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b088      	sub	sp, #32
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10b      	bne.n	8003d0c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cf8:	f383 8811 	msr	BASEPRI, r3
 8003cfc:	f3bf 8f6f 	isb	sy
 8003d00:	f3bf 8f4f 	dsb	sy
 8003d04:	613b      	str	r3, [r7, #16]
}
 8003d06:	bf00      	nop
 8003d08:	bf00      	nop
 8003d0a:	e7fd      	b.n	8003d08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10b      	bne.n	8003d2a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d16:	f383 8811 	msr	BASEPRI, r3
 8003d1a:	f3bf 8f6f 	isb	sy
 8003d1e:	f3bf 8f4f 	dsb	sy
 8003d22:	60fb      	str	r3, [r7, #12]
}
 8003d24:	bf00      	nop
 8003d26:	bf00      	nop
 8003d28:	e7fd      	b.n	8003d26 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003d2a:	f000 fe95 	bl	8004a58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8003da4 <xTaskCheckForTimeOut+0xc0>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d46:	d102      	bne.n	8003d4e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	61fb      	str	r3, [r7, #28]
 8003d4c:	e023      	b.n	8003d96 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	4b15      	ldr	r3, [pc, #84]	@ (8003da8 <xTaskCheckForTimeOut+0xc4>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d007      	beq.n	8003d6a <xTaskCheckForTimeOut+0x86>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d302      	bcc.n	8003d6a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003d64:	2301      	movs	r3, #1
 8003d66:	61fb      	str	r3, [r7, #28]
 8003d68:	e015      	b.n	8003d96 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d20b      	bcs.n	8003d8c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	1ad2      	subs	r2, r2, r3
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7ff ff99 	bl	8003cb8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003d86:	2300      	movs	r3, #0
 8003d88:	61fb      	str	r3, [r7, #28]
 8003d8a:	e004      	b.n	8003d96 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003d92:	2301      	movs	r3, #1
 8003d94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003d96:	f000 fe91 	bl	8004abc <vPortExitCritical>

	return xReturn;
 8003d9a:	69fb      	ldr	r3, [r7, #28]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3720      	adds	r7, #32
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	20000d88 	.word	0x20000d88
 8003da8:	20000d9c 	.word	0x20000d9c

08003dac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003db0:	4b03      	ldr	r3, [pc, #12]	@ (8003dc0 <vTaskMissedYield+0x14>)
 8003db2:	2201      	movs	r2, #1
 8003db4:	601a      	str	r2, [r3, #0]
}
 8003db6:	bf00      	nop
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	20000d98 	.word	0x20000d98

08003dc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003dcc:	f000 f852 	bl	8003e74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003dd0:	4b06      	ldr	r3, [pc, #24]	@ (8003dec <prvIdleTask+0x28>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d9f9      	bls.n	8003dcc <prvIdleTask+0x8>
			{
				taskYIELD();
 8003dd8:	4b05      	ldr	r3, [pc, #20]	@ (8003df0 <prvIdleTask+0x2c>)
 8003dda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dde:	601a      	str	r2, [r3, #0]
 8003de0:	f3bf 8f4f 	dsb	sy
 8003de4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003de8:	e7f0      	b.n	8003dcc <prvIdleTask+0x8>
 8003dea:	bf00      	nop
 8003dec:	200008b4 	.word	0x200008b4
 8003df0:	e000ed04 	.word	0xe000ed04

08003df4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	607b      	str	r3, [r7, #4]
 8003dfe:	e00c      	b.n	8003e1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	4613      	mov	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4413      	add	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4a12      	ldr	r2, [pc, #72]	@ (8003e54 <prvInitialiseTaskLists+0x60>)
 8003e0c:	4413      	add	r3, r2
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fe fcae 	bl	8002770 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3301      	adds	r3, #1
 8003e18:	607b      	str	r3, [r7, #4]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b37      	cmp	r3, #55	@ 0x37
 8003e1e:	d9ef      	bls.n	8003e00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003e20:	480d      	ldr	r0, [pc, #52]	@ (8003e58 <prvInitialiseTaskLists+0x64>)
 8003e22:	f7fe fca5 	bl	8002770 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003e26:	480d      	ldr	r0, [pc, #52]	@ (8003e5c <prvInitialiseTaskLists+0x68>)
 8003e28:	f7fe fca2 	bl	8002770 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003e2c:	480c      	ldr	r0, [pc, #48]	@ (8003e60 <prvInitialiseTaskLists+0x6c>)
 8003e2e:	f7fe fc9f 	bl	8002770 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003e32:	480c      	ldr	r0, [pc, #48]	@ (8003e64 <prvInitialiseTaskLists+0x70>)
 8003e34:	f7fe fc9c 	bl	8002770 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003e38:	480b      	ldr	r0, [pc, #44]	@ (8003e68 <prvInitialiseTaskLists+0x74>)
 8003e3a:	f7fe fc99 	bl	8002770 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8003e6c <prvInitialiseTaskLists+0x78>)
 8003e40:	4a05      	ldr	r2, [pc, #20]	@ (8003e58 <prvInitialiseTaskLists+0x64>)
 8003e42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e44:	4b0a      	ldr	r3, [pc, #40]	@ (8003e70 <prvInitialiseTaskLists+0x7c>)
 8003e46:	4a05      	ldr	r2, [pc, #20]	@ (8003e5c <prvInitialiseTaskLists+0x68>)
 8003e48:	601a      	str	r2, [r3, #0]
}
 8003e4a:	bf00      	nop
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	200008b4 	.word	0x200008b4
 8003e58:	20000d14 	.word	0x20000d14
 8003e5c:	20000d28 	.word	0x20000d28
 8003e60:	20000d44 	.word	0x20000d44
 8003e64:	20000d58 	.word	0x20000d58
 8003e68:	20000d70 	.word	0x20000d70
 8003e6c:	20000d3c 	.word	0x20000d3c
 8003e70:	20000d40 	.word	0x20000d40

08003e74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e7a:	e019      	b.n	8003eb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003e7c:	f000 fdec 	bl	8004a58 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e80:	4b10      	ldr	r3, [pc, #64]	@ (8003ec4 <prvCheckTasksWaitingTermination+0x50>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fe fcf9 	bl	8002884 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003e92:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec8 <prvCheckTasksWaitingTermination+0x54>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	4a0b      	ldr	r2, [pc, #44]	@ (8003ec8 <prvCheckTasksWaitingTermination+0x54>)
 8003e9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003ecc <prvCheckTasksWaitingTermination+0x58>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8003ecc <prvCheckTasksWaitingTermination+0x58>)
 8003ea4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003ea6:	f000 fe09 	bl	8004abc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f810 	bl	8003ed0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003eb0:	4b06      	ldr	r3, [pc, #24]	@ (8003ecc <prvCheckTasksWaitingTermination+0x58>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1e1      	bne.n	8003e7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003eb8:	bf00      	nop
 8003eba:	bf00      	nop
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	20000d58 	.word	0x20000d58
 8003ec8:	20000d84 	.word	0x20000d84
 8003ecc:	20000d6c 	.word	0x20000d6c

08003ed0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	3354      	adds	r3, #84	@ 0x54
 8003edc:	4618      	mov	r0, r3
 8003ede:	f001 f8d3 	bl	8005088 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d108      	bne.n	8003efe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 ffa1 	bl	8004e38 <vPortFree>
				vPortFree( pxTCB );
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 ff9e 	bl	8004e38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003efc:	e019      	b.n	8003f32 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d103      	bne.n	8003f10 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 ff95 	bl	8004e38 <vPortFree>
	}
 8003f0e:	e010      	b.n	8003f32 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d00b      	beq.n	8003f32 <prvDeleteTCB+0x62>
	__asm volatile
 8003f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f1e:	f383 8811 	msr	BASEPRI, r3
 8003f22:	f3bf 8f6f 	isb	sy
 8003f26:	f3bf 8f4f 	dsb	sy
 8003f2a:	60fb      	str	r3, [r7, #12]
}
 8003f2c:	bf00      	nop
 8003f2e:	bf00      	nop
 8003f30:	e7fd      	b.n	8003f2e <prvDeleteTCB+0x5e>
	}
 8003f32:	bf00      	nop
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
	...

08003f3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f42:	4b0c      	ldr	r3, [pc, #48]	@ (8003f74 <prvResetNextTaskUnblockTime+0x38>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d104      	bne.n	8003f56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f78 <prvResetNextTaskUnblockTime+0x3c>)
 8003f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003f54:	e008      	b.n	8003f68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f56:	4b07      	ldr	r3, [pc, #28]	@ (8003f74 <prvResetNextTaskUnblockTime+0x38>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	4a04      	ldr	r2, [pc, #16]	@ (8003f78 <prvResetNextTaskUnblockTime+0x3c>)
 8003f66:	6013      	str	r3, [r2, #0]
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	20000d3c 	.word	0x20000d3c
 8003f78:	20000da4 	.word	0x20000da4

08003f7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003f82:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb0 <xTaskGetSchedulerState+0x34>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d102      	bne.n	8003f90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	607b      	str	r3, [r7, #4]
 8003f8e:	e008      	b.n	8003fa2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f90:	4b08      	ldr	r3, [pc, #32]	@ (8003fb4 <xTaskGetSchedulerState+0x38>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d102      	bne.n	8003f9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003f98:	2302      	movs	r3, #2
 8003f9a:	607b      	str	r3, [r7, #4]
 8003f9c:	e001      	b.n	8003fa2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003fa2:	687b      	ldr	r3, [r7, #4]
	}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr
 8003fb0:	20000d90 	.word	0x20000d90
 8003fb4:	20000dac 	.word	0x20000dac

08003fb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d058      	beq.n	8004080 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003fce:	4b2f      	ldr	r3, [pc, #188]	@ (800408c <xTaskPriorityDisinherit+0xd4>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d00b      	beq.n	8003ff0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fdc:	f383 8811 	msr	BASEPRI, r3
 8003fe0:	f3bf 8f6f 	isb	sy
 8003fe4:	f3bf 8f4f 	dsb	sy
 8003fe8:	60fb      	str	r3, [r7, #12]
}
 8003fea:	bf00      	nop
 8003fec:	bf00      	nop
 8003fee:	e7fd      	b.n	8003fec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10b      	bne.n	8004010 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ffc:	f383 8811 	msr	BASEPRI, r3
 8004000:	f3bf 8f6f 	isb	sy
 8004004:	f3bf 8f4f 	dsb	sy
 8004008:	60bb      	str	r3, [r7, #8]
}
 800400a:	bf00      	nop
 800400c:	bf00      	nop
 800400e:	e7fd      	b.n	800400c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004014:	1e5a      	subs	r2, r3, #1
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004022:	429a      	cmp	r2, r3
 8004024:	d02c      	beq.n	8004080 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800402a:	2b00      	cmp	r3, #0
 800402c:	d128      	bne.n	8004080 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	3304      	adds	r3, #4
 8004032:	4618      	mov	r0, r3
 8004034:	f7fe fc26 	bl	8002884 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004044:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004050:	4b0f      	ldr	r3, [pc, #60]	@ (8004090 <xTaskPriorityDisinherit+0xd8>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	429a      	cmp	r2, r3
 8004056:	d903      	bls.n	8004060 <xTaskPriorityDisinherit+0xa8>
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405c:	4a0c      	ldr	r2, [pc, #48]	@ (8004090 <xTaskPriorityDisinherit+0xd8>)
 800405e:	6013      	str	r3, [r2, #0]
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004064:	4613      	mov	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4a09      	ldr	r2, [pc, #36]	@ (8004094 <xTaskPriorityDisinherit+0xdc>)
 800406e:	441a      	add	r2, r3
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	3304      	adds	r3, #4
 8004074:	4619      	mov	r1, r3
 8004076:	4610      	mov	r0, r2
 8004078:	f7fe fba7 	bl	80027ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800407c:	2301      	movs	r3, #1
 800407e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004080:	697b      	ldr	r3, [r7, #20]
	}
 8004082:	4618      	mov	r0, r3
 8004084:	3718      	adds	r7, #24
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	200008b0 	.word	0x200008b0
 8004090:	20000d8c 	.word	0x20000d8c
 8004094:	200008b4 	.word	0x200008b4

08004098 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80040a2:	4b21      	ldr	r3, [pc, #132]	@ (8004128 <prvAddCurrentTaskToDelayedList+0x90>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040a8:	4b20      	ldr	r3, [pc, #128]	@ (800412c <prvAddCurrentTaskToDelayedList+0x94>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	3304      	adds	r3, #4
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7fe fbe8 	bl	8002884 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ba:	d10a      	bne.n	80040d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d007      	beq.n	80040d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040c2:	4b1a      	ldr	r3, [pc, #104]	@ (800412c <prvAddCurrentTaskToDelayedList+0x94>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	3304      	adds	r3, #4
 80040c8:	4619      	mov	r1, r3
 80040ca:	4819      	ldr	r0, [pc, #100]	@ (8004130 <prvAddCurrentTaskToDelayedList+0x98>)
 80040cc:	f7fe fb7d 	bl	80027ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80040d0:	e026      	b.n	8004120 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4413      	add	r3, r2
 80040d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80040da:	4b14      	ldr	r3, [pc, #80]	@ (800412c <prvAddCurrentTaskToDelayedList+0x94>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d209      	bcs.n	80040fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040ea:	4b12      	ldr	r3, [pc, #72]	@ (8004134 <prvAddCurrentTaskToDelayedList+0x9c>)
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	4b0f      	ldr	r3, [pc, #60]	@ (800412c <prvAddCurrentTaskToDelayedList+0x94>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	3304      	adds	r3, #4
 80040f4:	4619      	mov	r1, r3
 80040f6:	4610      	mov	r0, r2
 80040f8:	f7fe fb8b 	bl	8002812 <vListInsert>
}
 80040fc:	e010      	b.n	8004120 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004138 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	4b0a      	ldr	r3, [pc, #40]	@ (800412c <prvAddCurrentTaskToDelayedList+0x94>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	3304      	adds	r3, #4
 8004108:	4619      	mov	r1, r3
 800410a:	4610      	mov	r0, r2
 800410c:	f7fe fb81 	bl	8002812 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004110:	4b0a      	ldr	r3, [pc, #40]	@ (800413c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	429a      	cmp	r2, r3
 8004118:	d202      	bcs.n	8004120 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800411a:	4a08      	ldr	r2, [pc, #32]	@ (800413c <prvAddCurrentTaskToDelayedList+0xa4>)
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	6013      	str	r3, [r2, #0]
}
 8004120:	bf00      	nop
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	20000d88 	.word	0x20000d88
 800412c:	200008b0 	.word	0x200008b0
 8004130:	20000d70 	.word	0x20000d70
 8004134:	20000d40 	.word	0x20000d40
 8004138:	20000d3c 	.word	0x20000d3c
 800413c:	20000da4 	.word	0x20000da4

08004140 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b08a      	sub	sp, #40	@ 0x28
 8004144:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004146:	2300      	movs	r3, #0
 8004148:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800414a:	f000 fb13 	bl	8004774 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800414e:	4b1d      	ldr	r3, [pc, #116]	@ (80041c4 <xTimerCreateTimerTask+0x84>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d021      	beq.n	800419a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004156:	2300      	movs	r3, #0
 8004158:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800415a:	2300      	movs	r3, #0
 800415c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800415e:	1d3a      	adds	r2, r7, #4
 8004160:	f107 0108 	add.w	r1, r7, #8
 8004164:	f107 030c 	add.w	r3, r7, #12
 8004168:	4618      	mov	r0, r3
 800416a:	f7fe fae7 	bl	800273c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800416e:	6879      	ldr	r1, [r7, #4]
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	9202      	str	r2, [sp, #8]
 8004176:	9301      	str	r3, [sp, #4]
 8004178:	2302      	movs	r3, #2
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	2300      	movs	r3, #0
 800417e:	460a      	mov	r2, r1
 8004180:	4911      	ldr	r1, [pc, #68]	@ (80041c8 <xTimerCreateTimerTask+0x88>)
 8004182:	4812      	ldr	r0, [pc, #72]	@ (80041cc <xTimerCreateTimerTask+0x8c>)
 8004184:	f7ff f8a2 	bl	80032cc <xTaskCreateStatic>
 8004188:	4603      	mov	r3, r0
 800418a:	4a11      	ldr	r2, [pc, #68]	@ (80041d0 <xTimerCreateTimerTask+0x90>)
 800418c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800418e:	4b10      	ldr	r3, [pc, #64]	@ (80041d0 <xTimerCreateTimerTask+0x90>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004196:	2301      	movs	r3, #1
 8004198:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10b      	bne.n	80041b8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80041a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041a4:	f383 8811 	msr	BASEPRI, r3
 80041a8:	f3bf 8f6f 	isb	sy
 80041ac:	f3bf 8f4f 	dsb	sy
 80041b0:	613b      	str	r3, [r7, #16]
}
 80041b2:	bf00      	nop
 80041b4:	bf00      	nop
 80041b6:	e7fd      	b.n	80041b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80041b8:	697b      	ldr	r3, [r7, #20]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3718      	adds	r7, #24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	20000de0 	.word	0x20000de0
 80041c8:	08005288 	.word	0x08005288
 80041cc:	0800430d 	.word	0x0800430d
 80041d0:	20000de4 	.word	0x20000de4

080041d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b08a      	sub	sp, #40	@ 0x28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
 80041e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80041e2:	2300      	movs	r3, #0
 80041e4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10b      	bne.n	8004204 <xTimerGenericCommand+0x30>
	__asm volatile
 80041ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f0:	f383 8811 	msr	BASEPRI, r3
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	623b      	str	r3, [r7, #32]
}
 80041fe:	bf00      	nop
 8004200:	bf00      	nop
 8004202:	e7fd      	b.n	8004200 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004204:	4b19      	ldr	r3, [pc, #100]	@ (800426c <xTimerGenericCommand+0x98>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d02a      	beq.n	8004262 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2b05      	cmp	r3, #5
 800421c:	dc18      	bgt.n	8004250 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800421e:	f7ff fead 	bl	8003f7c <xTaskGetSchedulerState>
 8004222:	4603      	mov	r3, r0
 8004224:	2b02      	cmp	r3, #2
 8004226:	d109      	bne.n	800423c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004228:	4b10      	ldr	r3, [pc, #64]	@ (800426c <xTimerGenericCommand+0x98>)
 800422a:	6818      	ldr	r0, [r3, #0]
 800422c:	f107 0110 	add.w	r1, r7, #16
 8004230:	2300      	movs	r3, #0
 8004232:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004234:	f7fe fc5a 	bl	8002aec <xQueueGenericSend>
 8004238:	6278      	str	r0, [r7, #36]	@ 0x24
 800423a:	e012      	b.n	8004262 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800423c:	4b0b      	ldr	r3, [pc, #44]	@ (800426c <xTimerGenericCommand+0x98>)
 800423e:	6818      	ldr	r0, [r3, #0]
 8004240:	f107 0110 	add.w	r1, r7, #16
 8004244:	2300      	movs	r3, #0
 8004246:	2200      	movs	r2, #0
 8004248:	f7fe fc50 	bl	8002aec <xQueueGenericSend>
 800424c:	6278      	str	r0, [r7, #36]	@ 0x24
 800424e:	e008      	b.n	8004262 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004250:	4b06      	ldr	r3, [pc, #24]	@ (800426c <xTimerGenericCommand+0x98>)
 8004252:	6818      	ldr	r0, [r3, #0]
 8004254:	f107 0110 	add.w	r1, r7, #16
 8004258:	2300      	movs	r3, #0
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	f7fe fd48 	bl	8002cf0 <xQueueGenericSendFromISR>
 8004260:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004264:	4618      	mov	r0, r3
 8004266:	3728      	adds	r7, #40	@ 0x28
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	20000de0 	.word	0x20000de0

08004270 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b088      	sub	sp, #32
 8004274:	af02      	add	r7, sp, #8
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800427a:	4b23      	ldr	r3, [pc, #140]	@ (8004308 <prvProcessExpiredTimer+0x98>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	3304      	adds	r3, #4
 8004288:	4618      	mov	r0, r3
 800428a:	f7fe fafb 	bl	8002884 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b00      	cmp	r3, #0
 800429a:	d023      	beq.n	80042e4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	699a      	ldr	r2, [r3, #24]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	18d1      	adds	r1, r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	6978      	ldr	r0, [r7, #20]
 80042aa:	f000 f8d5 	bl	8004458 <prvInsertTimerInActiveList>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d020      	beq.n	80042f6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80042b4:	2300      	movs	r3, #0
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	2300      	movs	r3, #0
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	2100      	movs	r1, #0
 80042be:	6978      	ldr	r0, [r7, #20]
 80042c0:	f7ff ff88 	bl	80041d4 <xTimerGenericCommand>
 80042c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d114      	bne.n	80042f6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80042cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d0:	f383 8811 	msr	BASEPRI, r3
 80042d4:	f3bf 8f6f 	isb	sy
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	60fb      	str	r3, [r7, #12]
}
 80042de:	bf00      	nop
 80042e0:	bf00      	nop
 80042e2:	e7fd      	b.n	80042e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042ea:	f023 0301 	bic.w	r3, r3, #1
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	6978      	ldr	r0, [r7, #20]
 80042fc:	4798      	blx	r3
}
 80042fe:	bf00      	nop
 8004300:	3718      	adds	r7, #24
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	20000dd8 	.word	0x20000dd8

0800430c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004314:	f107 0308 	add.w	r3, r7, #8
 8004318:	4618      	mov	r0, r3
 800431a:	f000 f859 	bl	80043d0 <prvGetNextExpireTime>
 800431e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	4619      	mov	r1, r3
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 f805 	bl	8004334 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800432a:	f000 f8d7 	bl	80044dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800432e:	bf00      	nop
 8004330:	e7f0      	b.n	8004314 <prvTimerTask+0x8>
	...

08004334 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800433e:	f7ff fa29 	bl	8003794 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004342:	f107 0308 	add.w	r3, r7, #8
 8004346:	4618      	mov	r0, r3
 8004348:	f000 f866 	bl	8004418 <prvSampleTimeNow>
 800434c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d130      	bne.n	80043b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10a      	bne.n	8004370 <prvProcessTimerOrBlockTask+0x3c>
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	429a      	cmp	r2, r3
 8004360:	d806      	bhi.n	8004370 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004362:	f7ff fa25 	bl	80037b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004366:	68f9      	ldr	r1, [r7, #12]
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f7ff ff81 	bl	8004270 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800436e:	e024      	b.n	80043ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d008      	beq.n	8004388 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004376:	4b13      	ldr	r3, [pc, #76]	@ (80043c4 <prvProcessTimerOrBlockTask+0x90>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <prvProcessTimerOrBlockTask+0x50>
 8004380:	2301      	movs	r3, #1
 8004382:	e000      	b.n	8004386 <prvProcessTimerOrBlockTask+0x52>
 8004384:	2300      	movs	r3, #0
 8004386:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004388:	4b0f      	ldr	r3, [pc, #60]	@ (80043c8 <prvProcessTimerOrBlockTask+0x94>)
 800438a:	6818      	ldr	r0, [r3, #0]
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	4619      	mov	r1, r3
 8004396:	f7fe ff65 	bl	8003264 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800439a:	f7ff fa09 	bl	80037b0 <xTaskResumeAll>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10a      	bne.n	80043ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80043a4:	4b09      	ldr	r3, [pc, #36]	@ (80043cc <prvProcessTimerOrBlockTask+0x98>)
 80043a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	f3bf 8f6f 	isb	sy
}
 80043b4:	e001      	b.n	80043ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80043b6:	f7ff f9fb 	bl	80037b0 <xTaskResumeAll>
}
 80043ba:	bf00      	nop
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	20000ddc 	.word	0x20000ddc
 80043c8:	20000de0 	.word	0x20000de0
 80043cc:	e000ed04 	.word	0xe000ed04

080043d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80043d8:	4b0e      	ldr	r3, [pc, #56]	@ (8004414 <prvGetNextExpireTime+0x44>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <prvGetNextExpireTime+0x16>
 80043e2:	2201      	movs	r2, #1
 80043e4:	e000      	b.n	80043e8 <prvGetNextExpireTime+0x18>
 80043e6:	2200      	movs	r2, #0
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d105      	bne.n	8004400 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043f4:	4b07      	ldr	r3, [pc, #28]	@ (8004414 <prvGetNextExpireTime+0x44>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	60fb      	str	r3, [r7, #12]
 80043fe:	e001      	b.n	8004404 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004400:	2300      	movs	r3, #0
 8004402:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004404:	68fb      	ldr	r3, [r7, #12]
}
 8004406:	4618      	mov	r0, r3
 8004408:	3714      	adds	r7, #20
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	20000dd8 	.word	0x20000dd8

08004418 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004420:	f7ff fa64 	bl	80038ec <xTaskGetTickCount>
 8004424:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004426:	4b0b      	ldr	r3, [pc, #44]	@ (8004454 <prvSampleTimeNow+0x3c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	429a      	cmp	r2, r3
 800442e:	d205      	bcs.n	800443c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004430:	f000 f93a 	bl	80046a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	e002      	b.n	8004442 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004442:	4a04      	ldr	r2, [pc, #16]	@ (8004454 <prvSampleTimeNow+0x3c>)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004448:	68fb      	ldr	r3, [r7, #12]
}
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	20000de8 	.word	0x20000de8

08004458 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
 8004464:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004466:	2300      	movs	r3, #0
 8004468:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	429a      	cmp	r2, r3
 800447c:	d812      	bhi.n	80044a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	1ad2      	subs	r2, r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	429a      	cmp	r2, r3
 800448a:	d302      	bcc.n	8004492 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800448c:	2301      	movs	r3, #1
 800448e:	617b      	str	r3, [r7, #20]
 8004490:	e01b      	b.n	80044ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004492:	4b10      	ldr	r3, [pc, #64]	@ (80044d4 <prvInsertTimerInActiveList+0x7c>)
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	3304      	adds	r3, #4
 800449a:	4619      	mov	r1, r3
 800449c:	4610      	mov	r0, r2
 800449e:	f7fe f9b8 	bl	8002812 <vListInsert>
 80044a2:	e012      	b.n	80044ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d206      	bcs.n	80044ba <prvInsertTimerInActiveList+0x62>
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d302      	bcc.n	80044ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80044b4:	2301      	movs	r3, #1
 80044b6:	617b      	str	r3, [r7, #20]
 80044b8:	e007      	b.n	80044ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80044ba:	4b07      	ldr	r3, [pc, #28]	@ (80044d8 <prvInsertTimerInActiveList+0x80>)
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	3304      	adds	r3, #4
 80044c2:	4619      	mov	r1, r3
 80044c4:	4610      	mov	r0, r2
 80044c6:	f7fe f9a4 	bl	8002812 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80044ca:	697b      	ldr	r3, [r7, #20]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	20000ddc 	.word	0x20000ddc
 80044d8:	20000dd8 	.word	0x20000dd8

080044dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b08e      	sub	sp, #56	@ 0x38
 80044e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80044e2:	e0ce      	b.n	8004682 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	da19      	bge.n	800451e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80044ea:	1d3b      	adds	r3, r7, #4
 80044ec:	3304      	adds	r3, #4
 80044ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80044f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10b      	bne.n	800450e <prvProcessReceivedCommands+0x32>
	__asm volatile
 80044f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044fa:	f383 8811 	msr	BASEPRI, r3
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f3bf 8f4f 	dsb	sy
 8004506:	61fb      	str	r3, [r7, #28]
}
 8004508:	bf00      	nop
 800450a:	bf00      	nop
 800450c:	e7fd      	b.n	800450a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800450e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004514:	6850      	ldr	r0, [r2, #4]
 8004516:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004518:	6892      	ldr	r2, [r2, #8]
 800451a:	4611      	mov	r1, r2
 800451c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	f2c0 80ae 	blt.w	8004682 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800452a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d004      	beq.n	800453c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004534:	3304      	adds	r3, #4
 8004536:	4618      	mov	r0, r3
 8004538:	f7fe f9a4 	bl	8002884 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800453c:	463b      	mov	r3, r7
 800453e:	4618      	mov	r0, r3
 8004540:	f7ff ff6a 	bl	8004418 <prvSampleTimeNow>
 8004544:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b09      	cmp	r3, #9
 800454a:	f200 8097 	bhi.w	800467c <prvProcessReceivedCommands+0x1a0>
 800454e:	a201      	add	r2, pc, #4	@ (adr r2, 8004554 <prvProcessReceivedCommands+0x78>)
 8004550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004554:	0800457d 	.word	0x0800457d
 8004558:	0800457d 	.word	0x0800457d
 800455c:	0800457d 	.word	0x0800457d
 8004560:	080045f3 	.word	0x080045f3
 8004564:	08004607 	.word	0x08004607
 8004568:	08004653 	.word	0x08004653
 800456c:	0800457d 	.word	0x0800457d
 8004570:	0800457d 	.word	0x0800457d
 8004574:	080045f3 	.word	0x080045f3
 8004578:	08004607 	.word	0x08004607
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800457c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800457e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004582:	f043 0301 	orr.w	r3, r3, #1
 8004586:	b2da      	uxtb	r2, r3
 8004588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800458a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	18d1      	adds	r1, r2, r3
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800459a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800459c:	f7ff ff5c 	bl	8004458 <prvInsertTimerInActiveList>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d06c      	beq.n	8004680 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80045ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d061      	beq.n	8004680 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	441a      	add	r2, r3
 80045c4:	2300      	movs	r3, #0
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	2300      	movs	r3, #0
 80045ca:	2100      	movs	r1, #0
 80045cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045ce:	f7ff fe01 	bl	80041d4 <xTimerGenericCommand>
 80045d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80045d4:	6a3b      	ldr	r3, [r7, #32]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d152      	bne.n	8004680 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80045da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045de:	f383 8811 	msr	BASEPRI, r3
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	61bb      	str	r3, [r7, #24]
}
 80045ec:	bf00      	nop
 80045ee:	bf00      	nop
 80045f0:	e7fd      	b.n	80045ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80045f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045f8:	f023 0301 	bic.w	r3, r3, #1
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004600:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004604:	e03d      	b.n	8004682 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004608:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800460c:	f043 0301 	orr.w	r3, r3, #1
 8004610:	b2da      	uxtb	r2, r3
 8004612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004614:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800461c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800461e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10b      	bne.n	800463e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800462a:	f383 8811 	msr	BASEPRI, r3
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	617b      	str	r3, [r7, #20]
}
 8004638:	bf00      	nop
 800463a:	bf00      	nop
 800463c:	e7fd      	b.n	800463a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800463e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004640:	699a      	ldr	r2, [r3, #24]
 8004642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004644:	18d1      	adds	r1, r2, r3
 8004646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004648:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800464a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800464c:	f7ff ff04 	bl	8004458 <prvInsertTimerInActiveList>
					break;
 8004650:	e017      	b.n	8004682 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004654:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d103      	bne.n	8004668 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004660:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004662:	f000 fbe9 	bl	8004e38 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004666:	e00c      	b.n	8004682 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800466a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800466e:	f023 0301 	bic.w	r3, r3, #1
 8004672:	b2da      	uxtb	r2, r3
 8004674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004676:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800467a:	e002      	b.n	8004682 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800467c:	bf00      	nop
 800467e:	e000      	b.n	8004682 <prvProcessReceivedCommands+0x1a6>
					break;
 8004680:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004682:	4b08      	ldr	r3, [pc, #32]	@ (80046a4 <prvProcessReceivedCommands+0x1c8>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	1d39      	adds	r1, r7, #4
 8004688:	2200      	movs	r2, #0
 800468a:	4618      	mov	r0, r3
 800468c:	f7fe fbce 	bl	8002e2c <xQueueReceive>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	f47f af26 	bne.w	80044e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004698:	bf00      	nop
 800469a:	bf00      	nop
 800469c:	3730      	adds	r7, #48	@ 0x30
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	20000de0 	.word	0x20000de0

080046a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b088      	sub	sp, #32
 80046ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80046ae:	e049      	b.n	8004744 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046b0:	4b2e      	ldr	r3, [pc, #184]	@ (800476c <prvSwitchTimerLists+0xc4>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046ba:	4b2c      	ldr	r3, [pc, #176]	@ (800476c <prvSwitchTimerLists+0xc4>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	3304      	adds	r3, #4
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7fe f8db 	bl	8002884 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80046dc:	f003 0304 	and.w	r3, r3, #4
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d02f      	beq.n	8004744 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	4413      	add	r3, r2
 80046ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d90e      	bls.n	8004714 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004702:	4b1a      	ldr	r3, [pc, #104]	@ (800476c <prvSwitchTimerLists+0xc4>)
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	3304      	adds	r3, #4
 800470a:	4619      	mov	r1, r3
 800470c:	4610      	mov	r0, r2
 800470e:	f7fe f880 	bl	8002812 <vListInsert>
 8004712:	e017      	b.n	8004744 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004714:	2300      	movs	r3, #0
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	2300      	movs	r3, #0
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	2100      	movs	r1, #0
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f7ff fd58 	bl	80041d4 <xTimerGenericCommand>
 8004724:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10b      	bne.n	8004744 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800472c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004730:	f383 8811 	msr	BASEPRI, r3
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	603b      	str	r3, [r7, #0]
}
 800473e:	bf00      	nop
 8004740:	bf00      	nop
 8004742:	e7fd      	b.n	8004740 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004744:	4b09      	ldr	r3, [pc, #36]	@ (800476c <prvSwitchTimerLists+0xc4>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1b0      	bne.n	80046b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800474e:	4b07      	ldr	r3, [pc, #28]	@ (800476c <prvSwitchTimerLists+0xc4>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004754:	4b06      	ldr	r3, [pc, #24]	@ (8004770 <prvSwitchTimerLists+0xc8>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a04      	ldr	r2, [pc, #16]	@ (800476c <prvSwitchTimerLists+0xc4>)
 800475a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800475c:	4a04      	ldr	r2, [pc, #16]	@ (8004770 <prvSwitchTimerLists+0xc8>)
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	6013      	str	r3, [r2, #0]
}
 8004762:	bf00      	nop
 8004764:	3718      	adds	r7, #24
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	20000dd8 	.word	0x20000dd8
 8004770:	20000ddc 	.word	0x20000ddc

08004774 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800477a:	f000 f96d 	bl	8004a58 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800477e:	4b15      	ldr	r3, [pc, #84]	@ (80047d4 <prvCheckForValidListAndQueue+0x60>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d120      	bne.n	80047c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004786:	4814      	ldr	r0, [pc, #80]	@ (80047d8 <prvCheckForValidListAndQueue+0x64>)
 8004788:	f7fd fff2 	bl	8002770 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800478c:	4813      	ldr	r0, [pc, #76]	@ (80047dc <prvCheckForValidListAndQueue+0x68>)
 800478e:	f7fd ffef 	bl	8002770 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004792:	4b13      	ldr	r3, [pc, #76]	@ (80047e0 <prvCheckForValidListAndQueue+0x6c>)
 8004794:	4a10      	ldr	r2, [pc, #64]	@ (80047d8 <prvCheckForValidListAndQueue+0x64>)
 8004796:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004798:	4b12      	ldr	r3, [pc, #72]	@ (80047e4 <prvCheckForValidListAndQueue+0x70>)
 800479a:	4a10      	ldr	r2, [pc, #64]	@ (80047dc <prvCheckForValidListAndQueue+0x68>)
 800479c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800479e:	2300      	movs	r3, #0
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	4b11      	ldr	r3, [pc, #68]	@ (80047e8 <prvCheckForValidListAndQueue+0x74>)
 80047a4:	4a11      	ldr	r2, [pc, #68]	@ (80047ec <prvCheckForValidListAndQueue+0x78>)
 80047a6:	2110      	movs	r1, #16
 80047a8:	200a      	movs	r0, #10
 80047aa:	f7fe f8ff 	bl	80029ac <xQueueGenericCreateStatic>
 80047ae:	4603      	mov	r3, r0
 80047b0:	4a08      	ldr	r2, [pc, #32]	@ (80047d4 <prvCheckForValidListAndQueue+0x60>)
 80047b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80047b4:	4b07      	ldr	r3, [pc, #28]	@ (80047d4 <prvCheckForValidListAndQueue+0x60>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d005      	beq.n	80047c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80047bc:	4b05      	ldr	r3, [pc, #20]	@ (80047d4 <prvCheckForValidListAndQueue+0x60>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	490b      	ldr	r1, [pc, #44]	@ (80047f0 <prvCheckForValidListAndQueue+0x7c>)
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7fe fd24 	bl	8003210 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80047c8:	f000 f978 	bl	8004abc <vPortExitCritical>
}
 80047cc:	bf00      	nop
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	20000de0 	.word	0x20000de0
 80047d8:	20000db0 	.word	0x20000db0
 80047dc:	20000dc4 	.word	0x20000dc4
 80047e0:	20000dd8 	.word	0x20000dd8
 80047e4:	20000ddc 	.word	0x20000ddc
 80047e8:	20000e8c 	.word	0x20000e8c
 80047ec:	20000dec 	.word	0x20000dec
 80047f0:	08005290 	.word	0x08005290

080047f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	3b04      	subs	r3, #4
 8004804:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800480c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	3b04      	subs	r3, #4
 8004812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	f023 0201 	bic.w	r2, r3, #1
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	3b04      	subs	r3, #4
 8004822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004824:	4a0c      	ldr	r2, [pc, #48]	@ (8004858 <pxPortInitialiseStack+0x64>)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	3b14      	subs	r3, #20
 800482e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	3b04      	subs	r3, #4
 800483a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f06f 0202 	mvn.w	r2, #2
 8004842:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	3b20      	subs	r3, #32
 8004848:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800484a:	68fb      	ldr	r3, [r7, #12]
}
 800484c:	4618      	mov	r0, r3
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	0800485d 	.word	0x0800485d

0800485c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004862:	2300      	movs	r3, #0
 8004864:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004866:	4b13      	ldr	r3, [pc, #76]	@ (80048b4 <prvTaskExitError+0x58>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486e:	d00b      	beq.n	8004888 <prvTaskExitError+0x2c>
	__asm volatile
 8004870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004874:	f383 8811 	msr	BASEPRI, r3
 8004878:	f3bf 8f6f 	isb	sy
 800487c:	f3bf 8f4f 	dsb	sy
 8004880:	60fb      	str	r3, [r7, #12]
}
 8004882:	bf00      	nop
 8004884:	bf00      	nop
 8004886:	e7fd      	b.n	8004884 <prvTaskExitError+0x28>
	__asm volatile
 8004888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800488c:	f383 8811 	msr	BASEPRI, r3
 8004890:	f3bf 8f6f 	isb	sy
 8004894:	f3bf 8f4f 	dsb	sy
 8004898:	60bb      	str	r3, [r7, #8]
}
 800489a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800489c:	bf00      	nop
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d0fc      	beq.n	800489e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80048a4:	bf00      	nop
 80048a6:	bf00      	nop
 80048a8:	3714      	adds	r7, #20
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	2000000c 	.word	0x2000000c
	...

080048c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80048c0:	4b07      	ldr	r3, [pc, #28]	@ (80048e0 <pxCurrentTCBConst2>)
 80048c2:	6819      	ldr	r1, [r3, #0]
 80048c4:	6808      	ldr	r0, [r1, #0]
 80048c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ca:	f380 8809 	msr	PSP, r0
 80048ce:	f3bf 8f6f 	isb	sy
 80048d2:	f04f 0000 	mov.w	r0, #0
 80048d6:	f380 8811 	msr	BASEPRI, r0
 80048da:	4770      	bx	lr
 80048dc:	f3af 8000 	nop.w

080048e0 <pxCurrentTCBConst2>:
 80048e0:	200008b0 	.word	0x200008b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80048e4:	bf00      	nop
 80048e6:	bf00      	nop

080048e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80048e8:	4808      	ldr	r0, [pc, #32]	@ (800490c <prvPortStartFirstTask+0x24>)
 80048ea:	6800      	ldr	r0, [r0, #0]
 80048ec:	6800      	ldr	r0, [r0, #0]
 80048ee:	f380 8808 	msr	MSP, r0
 80048f2:	f04f 0000 	mov.w	r0, #0
 80048f6:	f380 8814 	msr	CONTROL, r0
 80048fa:	b662      	cpsie	i
 80048fc:	b661      	cpsie	f
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	df00      	svc	0
 8004908:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800490a:	bf00      	nop
 800490c:	e000ed08 	.word	0xe000ed08

08004910 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b086      	sub	sp, #24
 8004914:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004916:	4b47      	ldr	r3, [pc, #284]	@ (8004a34 <xPortStartScheduler+0x124>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a47      	ldr	r2, [pc, #284]	@ (8004a38 <xPortStartScheduler+0x128>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d10b      	bne.n	8004938 <xPortStartScheduler+0x28>
	__asm volatile
 8004920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004924:	f383 8811 	msr	BASEPRI, r3
 8004928:	f3bf 8f6f 	isb	sy
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	613b      	str	r3, [r7, #16]
}
 8004932:	bf00      	nop
 8004934:	bf00      	nop
 8004936:	e7fd      	b.n	8004934 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004938:	4b3e      	ldr	r3, [pc, #248]	@ (8004a34 <xPortStartScheduler+0x124>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a3f      	ldr	r2, [pc, #252]	@ (8004a3c <xPortStartScheduler+0x12c>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d10b      	bne.n	800495a <xPortStartScheduler+0x4a>
	__asm volatile
 8004942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004946:	f383 8811 	msr	BASEPRI, r3
 800494a:	f3bf 8f6f 	isb	sy
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	60fb      	str	r3, [r7, #12]
}
 8004954:	bf00      	nop
 8004956:	bf00      	nop
 8004958:	e7fd      	b.n	8004956 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800495a:	4b39      	ldr	r3, [pc, #228]	@ (8004a40 <xPortStartScheduler+0x130>)
 800495c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	b2db      	uxtb	r3, r3
 8004964:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	22ff      	movs	r2, #255	@ 0xff
 800496a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	b2db      	uxtb	r3, r3
 8004972:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004974:	78fb      	ldrb	r3, [r7, #3]
 8004976:	b2db      	uxtb	r3, r3
 8004978:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800497c:	b2da      	uxtb	r2, r3
 800497e:	4b31      	ldr	r3, [pc, #196]	@ (8004a44 <xPortStartScheduler+0x134>)
 8004980:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004982:	4b31      	ldr	r3, [pc, #196]	@ (8004a48 <xPortStartScheduler+0x138>)
 8004984:	2207      	movs	r2, #7
 8004986:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004988:	e009      	b.n	800499e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800498a:	4b2f      	ldr	r3, [pc, #188]	@ (8004a48 <xPortStartScheduler+0x138>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	3b01      	subs	r3, #1
 8004990:	4a2d      	ldr	r2, [pc, #180]	@ (8004a48 <xPortStartScheduler+0x138>)
 8004992:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004994:	78fb      	ldrb	r3, [r7, #3]
 8004996:	b2db      	uxtb	r3, r3
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	b2db      	uxtb	r3, r3
 800499c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800499e:	78fb      	ldrb	r3, [r7, #3]
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049a6:	2b80      	cmp	r3, #128	@ 0x80
 80049a8:	d0ef      	beq.n	800498a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80049aa:	4b27      	ldr	r3, [pc, #156]	@ (8004a48 <xPortStartScheduler+0x138>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f1c3 0307 	rsb	r3, r3, #7
 80049b2:	2b04      	cmp	r3, #4
 80049b4:	d00b      	beq.n	80049ce <xPortStartScheduler+0xbe>
	__asm volatile
 80049b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ba:	f383 8811 	msr	BASEPRI, r3
 80049be:	f3bf 8f6f 	isb	sy
 80049c2:	f3bf 8f4f 	dsb	sy
 80049c6:	60bb      	str	r3, [r7, #8]
}
 80049c8:	bf00      	nop
 80049ca:	bf00      	nop
 80049cc:	e7fd      	b.n	80049ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80049ce:	4b1e      	ldr	r3, [pc, #120]	@ (8004a48 <xPortStartScheduler+0x138>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	021b      	lsls	r3, r3, #8
 80049d4:	4a1c      	ldr	r2, [pc, #112]	@ (8004a48 <xPortStartScheduler+0x138>)
 80049d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80049d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004a48 <xPortStartScheduler+0x138>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80049e0:	4a19      	ldr	r2, [pc, #100]	@ (8004a48 <xPortStartScheduler+0x138>)
 80049e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	b2da      	uxtb	r2, r3
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80049ec:	4b17      	ldr	r3, [pc, #92]	@ (8004a4c <xPortStartScheduler+0x13c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a16      	ldr	r2, [pc, #88]	@ (8004a4c <xPortStartScheduler+0x13c>)
 80049f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80049f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80049f8:	4b14      	ldr	r3, [pc, #80]	@ (8004a4c <xPortStartScheduler+0x13c>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a13      	ldr	r2, [pc, #76]	@ (8004a4c <xPortStartScheduler+0x13c>)
 80049fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004a02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a04:	f000 f8da 	bl	8004bbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004a08:	4b11      	ldr	r3, [pc, #68]	@ (8004a50 <xPortStartScheduler+0x140>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004a0e:	f000 f8f9 	bl	8004c04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004a12:	4b10      	ldr	r3, [pc, #64]	@ (8004a54 <xPortStartScheduler+0x144>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a0f      	ldr	r2, [pc, #60]	@ (8004a54 <xPortStartScheduler+0x144>)
 8004a18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004a1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004a1e:	f7ff ff63 	bl	80048e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004a22:	f7ff f82d 	bl	8003a80 <vTaskSwitchContext>
	prvTaskExitError();
 8004a26:	f7ff ff19 	bl	800485c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3718      	adds	r7, #24
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	e000ed00 	.word	0xe000ed00
 8004a38:	410fc271 	.word	0x410fc271
 8004a3c:	410fc270 	.word	0x410fc270
 8004a40:	e000e400 	.word	0xe000e400
 8004a44:	20000edc 	.word	0x20000edc
 8004a48:	20000ee0 	.word	0x20000ee0
 8004a4c:	e000ed20 	.word	0xe000ed20
 8004a50:	2000000c 	.word	0x2000000c
 8004a54:	e000ef34 	.word	0xe000ef34

08004a58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a62:	f383 8811 	msr	BASEPRI, r3
 8004a66:	f3bf 8f6f 	isb	sy
 8004a6a:	f3bf 8f4f 	dsb	sy
 8004a6e:	607b      	str	r3, [r7, #4]
}
 8004a70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004a72:	4b10      	ldr	r3, [pc, #64]	@ (8004ab4 <vPortEnterCritical+0x5c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	3301      	adds	r3, #1
 8004a78:	4a0e      	ldr	r2, [pc, #56]	@ (8004ab4 <vPortEnterCritical+0x5c>)
 8004a7a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8004ab4 <vPortEnterCritical+0x5c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d110      	bne.n	8004aa6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a84:	4b0c      	ldr	r3, [pc, #48]	@ (8004ab8 <vPortEnterCritical+0x60>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00b      	beq.n	8004aa6 <vPortEnterCritical+0x4e>
	__asm volatile
 8004a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a92:	f383 8811 	msr	BASEPRI, r3
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	603b      	str	r3, [r7, #0]
}
 8004aa0:	bf00      	nop
 8004aa2:	bf00      	nop
 8004aa4:	e7fd      	b.n	8004aa2 <vPortEnterCritical+0x4a>
	}
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	2000000c 	.word	0x2000000c
 8004ab8:	e000ed04 	.word	0xe000ed04

08004abc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004ac2:	4b12      	ldr	r3, [pc, #72]	@ (8004b0c <vPortExitCritical+0x50>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10b      	bne.n	8004ae2 <vPortExitCritical+0x26>
	__asm volatile
 8004aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ace:	f383 8811 	msr	BASEPRI, r3
 8004ad2:	f3bf 8f6f 	isb	sy
 8004ad6:	f3bf 8f4f 	dsb	sy
 8004ada:	607b      	str	r3, [r7, #4]
}
 8004adc:	bf00      	nop
 8004ade:	bf00      	nop
 8004ae0:	e7fd      	b.n	8004ade <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8004b0c <vPortExitCritical+0x50>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	4a08      	ldr	r2, [pc, #32]	@ (8004b0c <vPortExitCritical+0x50>)
 8004aea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004aec:	4b07      	ldr	r3, [pc, #28]	@ (8004b0c <vPortExitCritical+0x50>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d105      	bne.n	8004b00 <vPortExitCritical+0x44>
 8004af4:	2300      	movs	r3, #0
 8004af6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	f383 8811 	msr	BASEPRI, r3
}
 8004afe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	2000000c 	.word	0x2000000c

08004b10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004b10:	f3ef 8009 	mrs	r0, PSP
 8004b14:	f3bf 8f6f 	isb	sy
 8004b18:	4b15      	ldr	r3, [pc, #84]	@ (8004b70 <pxCurrentTCBConst>)
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	f01e 0f10 	tst.w	lr, #16
 8004b20:	bf08      	it	eq
 8004b22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004b26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b2a:	6010      	str	r0, [r2, #0]
 8004b2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004b30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004b34:	f380 8811 	msr	BASEPRI, r0
 8004b38:	f3bf 8f4f 	dsb	sy
 8004b3c:	f3bf 8f6f 	isb	sy
 8004b40:	f7fe ff9e 	bl	8003a80 <vTaskSwitchContext>
 8004b44:	f04f 0000 	mov.w	r0, #0
 8004b48:	f380 8811 	msr	BASEPRI, r0
 8004b4c:	bc09      	pop	{r0, r3}
 8004b4e:	6819      	ldr	r1, [r3, #0]
 8004b50:	6808      	ldr	r0, [r1, #0]
 8004b52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b56:	f01e 0f10 	tst.w	lr, #16
 8004b5a:	bf08      	it	eq
 8004b5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004b60:	f380 8809 	msr	PSP, r0
 8004b64:	f3bf 8f6f 	isb	sy
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	f3af 8000 	nop.w

08004b70 <pxCurrentTCBConst>:
 8004b70:	200008b0 	.word	0x200008b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004b74:	bf00      	nop
 8004b76:	bf00      	nop

08004b78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b82:	f383 8811 	msr	BASEPRI, r3
 8004b86:	f3bf 8f6f 	isb	sy
 8004b8a:	f3bf 8f4f 	dsb	sy
 8004b8e:	607b      	str	r3, [r7, #4]
}
 8004b90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b92:	f7fe febb 	bl	800390c <xTaskIncrementTick>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d003      	beq.n	8004ba4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b9c:	4b06      	ldr	r3, [pc, #24]	@ (8004bb8 <xPortSysTickHandler+0x40>)
 8004b9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	f383 8811 	msr	BASEPRI, r3
}
 8004bae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004bb0:	bf00      	nop
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	e000ed04 	.word	0xe000ed04

08004bbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8004bf0 <vPortSetupTimerInterrupt+0x34>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8004bf4 <vPortSetupTimerInterrupt+0x38>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8004bf8 <vPortSetupTimerInterrupt+0x3c>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8004bfc <vPortSetupTimerInterrupt+0x40>)
 8004bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd6:	099b      	lsrs	r3, r3, #6
 8004bd8:	4a09      	ldr	r2, [pc, #36]	@ (8004c00 <vPortSetupTimerInterrupt+0x44>)
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004bde:	4b04      	ldr	r3, [pc, #16]	@ (8004bf0 <vPortSetupTimerInterrupt+0x34>)
 8004be0:	2207      	movs	r2, #7
 8004be2:	601a      	str	r2, [r3, #0]
}
 8004be4:	bf00      	nop
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	e000e010 	.word	0xe000e010
 8004bf4:	e000e018 	.word	0xe000e018
 8004bf8:	20000000 	.word	0x20000000
 8004bfc:	10624dd3 	.word	0x10624dd3
 8004c00:	e000e014 	.word	0xe000e014

08004c04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004c04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004c14 <vPortEnableVFP+0x10>
 8004c08:	6801      	ldr	r1, [r0, #0]
 8004c0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004c0e:	6001      	str	r1, [r0, #0]
 8004c10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004c12:	bf00      	nop
 8004c14:	e000ed88 	.word	0xe000ed88

08004c18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004c1e:	f3ef 8305 	mrs	r3, IPSR
 8004c22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2b0f      	cmp	r3, #15
 8004c28:	d915      	bls.n	8004c56 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004c2a:	4a18      	ldr	r2, [pc, #96]	@ (8004c8c <vPortValidateInterruptPriority+0x74>)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	4413      	add	r3, r2
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004c34:	4b16      	ldr	r3, [pc, #88]	@ (8004c90 <vPortValidateInterruptPriority+0x78>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	7afa      	ldrb	r2, [r7, #11]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d20b      	bcs.n	8004c56 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c42:	f383 8811 	msr	BASEPRI, r3
 8004c46:	f3bf 8f6f 	isb	sy
 8004c4a:	f3bf 8f4f 	dsb	sy
 8004c4e:	607b      	str	r3, [r7, #4]
}
 8004c50:	bf00      	nop
 8004c52:	bf00      	nop
 8004c54:	e7fd      	b.n	8004c52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004c56:	4b0f      	ldr	r3, [pc, #60]	@ (8004c94 <vPortValidateInterruptPriority+0x7c>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8004c98 <vPortValidateInterruptPriority+0x80>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d90b      	bls.n	8004c7e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c6a:	f383 8811 	msr	BASEPRI, r3
 8004c6e:	f3bf 8f6f 	isb	sy
 8004c72:	f3bf 8f4f 	dsb	sy
 8004c76:	603b      	str	r3, [r7, #0]
}
 8004c78:	bf00      	nop
 8004c7a:	bf00      	nop
 8004c7c:	e7fd      	b.n	8004c7a <vPortValidateInterruptPriority+0x62>
	}
 8004c7e:	bf00      	nop
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	e000e3f0 	.word	0xe000e3f0
 8004c90:	20000edc 	.word	0x20000edc
 8004c94:	e000ed0c 	.word	0xe000ed0c
 8004c98:	20000ee0 	.word	0x20000ee0

08004c9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b08a      	sub	sp, #40	@ 0x28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004ca8:	f7fe fd74 	bl	8003794 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004cac:	4b5c      	ldr	r3, [pc, #368]	@ (8004e20 <pvPortMalloc+0x184>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d101      	bne.n	8004cb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004cb4:	f000 f924 	bl	8004f00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004cb8:	4b5a      	ldr	r3, [pc, #360]	@ (8004e24 <pvPortMalloc+0x188>)
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f040 8095 	bne.w	8004df0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d01e      	beq.n	8004d0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004ccc:	2208      	movs	r2, #8
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f003 0307 	and.w	r3, r3, #7
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d015      	beq.n	8004d0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f023 0307 	bic.w	r3, r3, #7
 8004ce4:	3308      	adds	r3, #8
 8004ce6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f003 0307 	and.w	r3, r3, #7
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00b      	beq.n	8004d0a <pvPortMalloc+0x6e>
	__asm volatile
 8004cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf6:	f383 8811 	msr	BASEPRI, r3
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	617b      	str	r3, [r7, #20]
}
 8004d04:	bf00      	nop
 8004d06:	bf00      	nop
 8004d08:	e7fd      	b.n	8004d06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d06f      	beq.n	8004df0 <pvPortMalloc+0x154>
 8004d10:	4b45      	ldr	r3, [pc, #276]	@ (8004e28 <pvPortMalloc+0x18c>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d86a      	bhi.n	8004df0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004d1a:	4b44      	ldr	r3, [pc, #272]	@ (8004e2c <pvPortMalloc+0x190>)
 8004d1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004d1e:	4b43      	ldr	r3, [pc, #268]	@ (8004e2c <pvPortMalloc+0x190>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d24:	e004      	b.n	8004d30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d903      	bls.n	8004d42 <pvPortMalloc+0xa6>
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1f1      	bne.n	8004d26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004d42:	4b37      	ldr	r3, [pc, #220]	@ (8004e20 <pvPortMalloc+0x184>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d051      	beq.n	8004df0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2208      	movs	r2, #8
 8004d52:	4413      	add	r3, r2
 8004d54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	1ad2      	subs	r2, r2, r3
 8004d66:	2308      	movs	r3, #8
 8004d68:	005b      	lsls	r3, r3, #1
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d920      	bls.n	8004db0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4413      	add	r3, r2
 8004d74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00b      	beq.n	8004d98 <pvPortMalloc+0xfc>
	__asm volatile
 8004d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d84:	f383 8811 	msr	BASEPRI, r3
 8004d88:	f3bf 8f6f 	isb	sy
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	613b      	str	r3, [r7, #16]
}
 8004d92:	bf00      	nop
 8004d94:	bf00      	nop
 8004d96:	e7fd      	b.n	8004d94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	1ad2      	subs	r2, r2, r3
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004daa:	69b8      	ldr	r0, [r7, #24]
 8004dac:	f000 f90a 	bl	8004fc4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004db0:	4b1d      	ldr	r3, [pc, #116]	@ (8004e28 <pvPortMalloc+0x18c>)
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	4a1b      	ldr	r2, [pc, #108]	@ (8004e28 <pvPortMalloc+0x18c>)
 8004dbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8004e28 <pvPortMalloc+0x18c>)
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	4b1b      	ldr	r3, [pc, #108]	@ (8004e30 <pvPortMalloc+0x194>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d203      	bcs.n	8004dd2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004dca:	4b17      	ldr	r3, [pc, #92]	@ (8004e28 <pvPortMalloc+0x18c>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a18      	ldr	r2, [pc, #96]	@ (8004e30 <pvPortMalloc+0x194>)
 8004dd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	4b13      	ldr	r3, [pc, #76]	@ (8004e24 <pvPortMalloc+0x188>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004de6:	4b13      	ldr	r3, [pc, #76]	@ (8004e34 <pvPortMalloc+0x198>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	3301      	adds	r3, #1
 8004dec:	4a11      	ldr	r2, [pc, #68]	@ (8004e34 <pvPortMalloc+0x198>)
 8004dee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004df0:	f7fe fcde 	bl	80037b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	f003 0307 	and.w	r3, r3, #7
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00b      	beq.n	8004e16 <pvPortMalloc+0x17a>
	__asm volatile
 8004dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	60fb      	str	r3, [r7, #12]
}
 8004e10:	bf00      	nop
 8004e12:	bf00      	nop
 8004e14:	e7fd      	b.n	8004e12 <pvPortMalloc+0x176>
	return pvReturn;
 8004e16:	69fb      	ldr	r3, [r7, #28]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3728      	adds	r7, #40	@ 0x28
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	20004aec 	.word	0x20004aec
 8004e24:	20004b00 	.word	0x20004b00
 8004e28:	20004af0 	.word	0x20004af0
 8004e2c:	20004ae4 	.word	0x20004ae4
 8004e30:	20004af4 	.word	0x20004af4
 8004e34:	20004af8 	.word	0x20004af8

08004e38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d04f      	beq.n	8004eea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004e4a:	2308      	movs	r3, #8
 8004e4c:	425b      	negs	r3, r3
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	4413      	add	r3, r2
 8004e52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	4b25      	ldr	r3, [pc, #148]	@ (8004ef4 <vPortFree+0xbc>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4013      	ands	r3, r2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10b      	bne.n	8004e7e <vPortFree+0x46>
	__asm volatile
 8004e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e6a:	f383 8811 	msr	BASEPRI, r3
 8004e6e:	f3bf 8f6f 	isb	sy
 8004e72:	f3bf 8f4f 	dsb	sy
 8004e76:	60fb      	str	r3, [r7, #12]
}
 8004e78:	bf00      	nop
 8004e7a:	bf00      	nop
 8004e7c:	e7fd      	b.n	8004e7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00b      	beq.n	8004e9e <vPortFree+0x66>
	__asm volatile
 8004e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e8a:	f383 8811 	msr	BASEPRI, r3
 8004e8e:	f3bf 8f6f 	isb	sy
 8004e92:	f3bf 8f4f 	dsb	sy
 8004e96:	60bb      	str	r3, [r7, #8]
}
 8004e98:	bf00      	nop
 8004e9a:	bf00      	nop
 8004e9c:	e7fd      	b.n	8004e9a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	4b14      	ldr	r3, [pc, #80]	@ (8004ef4 <vPortFree+0xbc>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d01e      	beq.n	8004eea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d11a      	bne.n	8004eea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	4b0e      	ldr	r3, [pc, #56]	@ (8004ef4 <vPortFree+0xbc>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	43db      	mvns	r3, r3
 8004ebe:	401a      	ands	r2, r3
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ec4:	f7fe fc66 	bl	8003794 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8004ef8 <vPortFree+0xc0>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	4a09      	ldr	r2, [pc, #36]	@ (8004ef8 <vPortFree+0xc0>)
 8004ed4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004ed6:	6938      	ldr	r0, [r7, #16]
 8004ed8:	f000 f874 	bl	8004fc4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004edc:	4b07      	ldr	r3, [pc, #28]	@ (8004efc <vPortFree+0xc4>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	4a06      	ldr	r2, [pc, #24]	@ (8004efc <vPortFree+0xc4>)
 8004ee4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004ee6:	f7fe fc63 	bl	80037b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004eea:	bf00      	nop
 8004eec:	3718      	adds	r7, #24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	20004b00 	.word	0x20004b00
 8004ef8:	20004af0 	.word	0x20004af0
 8004efc:	20004afc 	.word	0x20004afc

08004f00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f06:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004f0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004f0c:	4b27      	ldr	r3, [pc, #156]	@ (8004fac <prvHeapInit+0xac>)
 8004f0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f003 0307 	and.w	r3, r3, #7
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00c      	beq.n	8004f34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	3307      	adds	r3, #7
 8004f1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f023 0307 	bic.w	r3, r3, #7
 8004f26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	4a1f      	ldr	r2, [pc, #124]	@ (8004fac <prvHeapInit+0xac>)
 8004f30:	4413      	add	r3, r2
 8004f32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f38:	4a1d      	ldr	r2, [pc, #116]	@ (8004fb0 <prvHeapInit+0xb0>)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004f3e:	4b1c      	ldr	r3, [pc, #112]	@ (8004fb0 <prvHeapInit+0xb0>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	4413      	add	r3, r2
 8004f4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004f4c:	2208      	movs	r2, #8
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	1a9b      	subs	r3, r3, r2
 8004f52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f023 0307 	bic.w	r3, r3, #7
 8004f5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4a15      	ldr	r2, [pc, #84]	@ (8004fb4 <prvHeapInit+0xb4>)
 8004f60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004f62:	4b14      	ldr	r3, [pc, #80]	@ (8004fb4 <prvHeapInit+0xb4>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2200      	movs	r2, #0
 8004f68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004f6a:	4b12      	ldr	r3, [pc, #72]	@ (8004fb4 <prvHeapInit+0xb4>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	1ad2      	subs	r2, r2, r3
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f80:	4b0c      	ldr	r3, [pc, #48]	@ (8004fb4 <prvHeapInit+0xb4>)
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	4a0a      	ldr	r2, [pc, #40]	@ (8004fb8 <prvHeapInit+0xb8>)
 8004f8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	4a09      	ldr	r2, [pc, #36]	@ (8004fbc <prvHeapInit+0xbc>)
 8004f96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004f98:	4b09      	ldr	r3, [pc, #36]	@ (8004fc0 <prvHeapInit+0xc0>)
 8004f9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004f9e:	601a      	str	r2, [r3, #0]
}
 8004fa0:	bf00      	nop
 8004fa2:	3714      	adds	r7, #20
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr
 8004fac:	20000ee4 	.word	0x20000ee4
 8004fb0:	20004ae4 	.word	0x20004ae4
 8004fb4:	20004aec 	.word	0x20004aec
 8004fb8:	20004af4 	.word	0x20004af4
 8004fbc:	20004af0 	.word	0x20004af0
 8004fc0:	20004b00 	.word	0x20004b00

08004fc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004fcc:	4b28      	ldr	r3, [pc, #160]	@ (8005070 <prvInsertBlockIntoFreeList+0xac>)
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	e002      	b.n	8004fd8 <prvInsertBlockIntoFreeList+0x14>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d8f7      	bhi.n	8004fd2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	4413      	add	r3, r2
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d108      	bne.n	8005006 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	441a      	add	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	441a      	add	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	429a      	cmp	r2, r3
 8005018:	d118      	bne.n	800504c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	4b15      	ldr	r3, [pc, #84]	@ (8005074 <prvInsertBlockIntoFreeList+0xb0>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	429a      	cmp	r2, r3
 8005024:	d00d      	beq.n	8005042 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	441a      	add	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	601a      	str	r2, [r3, #0]
 8005040:	e008      	b.n	8005054 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005042:	4b0c      	ldr	r3, [pc, #48]	@ (8005074 <prvInsertBlockIntoFreeList+0xb0>)
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	601a      	str	r2, [r3, #0]
 800504a:	e003      	b.n	8005054 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	429a      	cmp	r2, r3
 800505a:	d002      	beq.n	8005062 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005062:	bf00      	nop
 8005064:	3714      	adds	r7, #20
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	20004ae4 	.word	0x20004ae4
 8005074:	20004aec 	.word	0x20004aec

08005078 <memset>:
 8005078:	4402      	add	r2, r0
 800507a:	4603      	mov	r3, r0
 800507c:	4293      	cmp	r3, r2
 800507e:	d100      	bne.n	8005082 <memset+0xa>
 8005080:	4770      	bx	lr
 8005082:	f803 1b01 	strb.w	r1, [r3], #1
 8005086:	e7f9      	b.n	800507c <memset+0x4>

08005088 <_reclaim_reent>:
 8005088:	4b29      	ldr	r3, [pc, #164]	@ (8005130 <_reclaim_reent+0xa8>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4283      	cmp	r3, r0
 800508e:	b570      	push	{r4, r5, r6, lr}
 8005090:	4604      	mov	r4, r0
 8005092:	d04b      	beq.n	800512c <_reclaim_reent+0xa4>
 8005094:	69c3      	ldr	r3, [r0, #28]
 8005096:	b1ab      	cbz	r3, 80050c4 <_reclaim_reent+0x3c>
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	b16b      	cbz	r3, 80050b8 <_reclaim_reent+0x30>
 800509c:	2500      	movs	r5, #0
 800509e:	69e3      	ldr	r3, [r4, #28]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	5959      	ldr	r1, [r3, r5]
 80050a4:	2900      	cmp	r1, #0
 80050a6:	d13b      	bne.n	8005120 <_reclaim_reent+0x98>
 80050a8:	3504      	adds	r5, #4
 80050aa:	2d80      	cmp	r5, #128	@ 0x80
 80050ac:	d1f7      	bne.n	800509e <_reclaim_reent+0x16>
 80050ae:	69e3      	ldr	r3, [r4, #28]
 80050b0:	4620      	mov	r0, r4
 80050b2:	68d9      	ldr	r1, [r3, #12]
 80050b4:	f000 f872 	bl	800519c <_free_r>
 80050b8:	69e3      	ldr	r3, [r4, #28]
 80050ba:	6819      	ldr	r1, [r3, #0]
 80050bc:	b111      	cbz	r1, 80050c4 <_reclaim_reent+0x3c>
 80050be:	4620      	mov	r0, r4
 80050c0:	f000 f86c 	bl	800519c <_free_r>
 80050c4:	6961      	ldr	r1, [r4, #20]
 80050c6:	b111      	cbz	r1, 80050ce <_reclaim_reent+0x46>
 80050c8:	4620      	mov	r0, r4
 80050ca:	f000 f867 	bl	800519c <_free_r>
 80050ce:	69e1      	ldr	r1, [r4, #28]
 80050d0:	b111      	cbz	r1, 80050d8 <_reclaim_reent+0x50>
 80050d2:	4620      	mov	r0, r4
 80050d4:	f000 f862 	bl	800519c <_free_r>
 80050d8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80050da:	b111      	cbz	r1, 80050e2 <_reclaim_reent+0x5a>
 80050dc:	4620      	mov	r0, r4
 80050de:	f000 f85d 	bl	800519c <_free_r>
 80050e2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80050e4:	b111      	cbz	r1, 80050ec <_reclaim_reent+0x64>
 80050e6:	4620      	mov	r0, r4
 80050e8:	f000 f858 	bl	800519c <_free_r>
 80050ec:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80050ee:	b111      	cbz	r1, 80050f6 <_reclaim_reent+0x6e>
 80050f0:	4620      	mov	r0, r4
 80050f2:	f000 f853 	bl	800519c <_free_r>
 80050f6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80050f8:	b111      	cbz	r1, 8005100 <_reclaim_reent+0x78>
 80050fa:	4620      	mov	r0, r4
 80050fc:	f000 f84e 	bl	800519c <_free_r>
 8005100:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005102:	b111      	cbz	r1, 800510a <_reclaim_reent+0x82>
 8005104:	4620      	mov	r0, r4
 8005106:	f000 f849 	bl	800519c <_free_r>
 800510a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800510c:	b111      	cbz	r1, 8005114 <_reclaim_reent+0x8c>
 800510e:	4620      	mov	r0, r4
 8005110:	f000 f844 	bl	800519c <_free_r>
 8005114:	6a23      	ldr	r3, [r4, #32]
 8005116:	b14b      	cbz	r3, 800512c <_reclaim_reent+0xa4>
 8005118:	4620      	mov	r0, r4
 800511a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800511e:	4718      	bx	r3
 8005120:	680e      	ldr	r6, [r1, #0]
 8005122:	4620      	mov	r0, r4
 8005124:	f000 f83a 	bl	800519c <_free_r>
 8005128:	4631      	mov	r1, r6
 800512a:	e7bb      	b.n	80050a4 <_reclaim_reent+0x1c>
 800512c:	bd70      	pop	{r4, r5, r6, pc}
 800512e:	bf00      	nop
 8005130:	20000010 	.word	0x20000010

08005134 <__libc_init_array>:
 8005134:	b570      	push	{r4, r5, r6, lr}
 8005136:	4d0d      	ldr	r5, [pc, #52]	@ (800516c <__libc_init_array+0x38>)
 8005138:	4c0d      	ldr	r4, [pc, #52]	@ (8005170 <__libc_init_array+0x3c>)
 800513a:	1b64      	subs	r4, r4, r5
 800513c:	10a4      	asrs	r4, r4, #2
 800513e:	2600      	movs	r6, #0
 8005140:	42a6      	cmp	r6, r4
 8005142:	d109      	bne.n	8005158 <__libc_init_array+0x24>
 8005144:	4d0b      	ldr	r5, [pc, #44]	@ (8005174 <__libc_init_array+0x40>)
 8005146:	4c0c      	ldr	r4, [pc, #48]	@ (8005178 <__libc_init_array+0x44>)
 8005148:	f000 f87e 	bl	8005248 <_init>
 800514c:	1b64      	subs	r4, r4, r5
 800514e:	10a4      	asrs	r4, r4, #2
 8005150:	2600      	movs	r6, #0
 8005152:	42a6      	cmp	r6, r4
 8005154:	d105      	bne.n	8005162 <__libc_init_array+0x2e>
 8005156:	bd70      	pop	{r4, r5, r6, pc}
 8005158:	f855 3b04 	ldr.w	r3, [r5], #4
 800515c:	4798      	blx	r3
 800515e:	3601      	adds	r6, #1
 8005160:	e7ee      	b.n	8005140 <__libc_init_array+0xc>
 8005162:	f855 3b04 	ldr.w	r3, [r5], #4
 8005166:	4798      	blx	r3
 8005168:	3601      	adds	r6, #1
 800516a:	e7f2      	b.n	8005152 <__libc_init_array+0x1e>
 800516c:	08005324 	.word	0x08005324
 8005170:	08005324 	.word	0x08005324
 8005174:	08005324 	.word	0x08005324
 8005178:	08005328 	.word	0x08005328

0800517c <__retarget_lock_acquire_recursive>:
 800517c:	4770      	bx	lr

0800517e <__retarget_lock_release_recursive>:
 800517e:	4770      	bx	lr

08005180 <memcpy>:
 8005180:	440a      	add	r2, r1
 8005182:	4291      	cmp	r1, r2
 8005184:	f100 33ff 	add.w	r3, r0, #4294967295
 8005188:	d100      	bne.n	800518c <memcpy+0xc>
 800518a:	4770      	bx	lr
 800518c:	b510      	push	{r4, lr}
 800518e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005192:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005196:	4291      	cmp	r1, r2
 8005198:	d1f9      	bne.n	800518e <memcpy+0xe>
 800519a:	bd10      	pop	{r4, pc}

0800519c <_free_r>:
 800519c:	b538      	push	{r3, r4, r5, lr}
 800519e:	4605      	mov	r5, r0
 80051a0:	2900      	cmp	r1, #0
 80051a2:	d041      	beq.n	8005228 <_free_r+0x8c>
 80051a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051a8:	1f0c      	subs	r4, r1, #4
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	bfb8      	it	lt
 80051ae:	18e4      	addlt	r4, r4, r3
 80051b0:	f000 f83e 	bl	8005230 <__malloc_lock>
 80051b4:	4a1d      	ldr	r2, [pc, #116]	@ (800522c <_free_r+0x90>)
 80051b6:	6813      	ldr	r3, [r2, #0]
 80051b8:	b933      	cbnz	r3, 80051c8 <_free_r+0x2c>
 80051ba:	6063      	str	r3, [r4, #4]
 80051bc:	6014      	str	r4, [r2, #0]
 80051be:	4628      	mov	r0, r5
 80051c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051c4:	f000 b83a 	b.w	800523c <__malloc_unlock>
 80051c8:	42a3      	cmp	r3, r4
 80051ca:	d908      	bls.n	80051de <_free_r+0x42>
 80051cc:	6820      	ldr	r0, [r4, #0]
 80051ce:	1821      	adds	r1, r4, r0
 80051d0:	428b      	cmp	r3, r1
 80051d2:	bf01      	itttt	eq
 80051d4:	6819      	ldreq	r1, [r3, #0]
 80051d6:	685b      	ldreq	r3, [r3, #4]
 80051d8:	1809      	addeq	r1, r1, r0
 80051da:	6021      	streq	r1, [r4, #0]
 80051dc:	e7ed      	b.n	80051ba <_free_r+0x1e>
 80051de:	461a      	mov	r2, r3
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	b10b      	cbz	r3, 80051e8 <_free_r+0x4c>
 80051e4:	42a3      	cmp	r3, r4
 80051e6:	d9fa      	bls.n	80051de <_free_r+0x42>
 80051e8:	6811      	ldr	r1, [r2, #0]
 80051ea:	1850      	adds	r0, r2, r1
 80051ec:	42a0      	cmp	r0, r4
 80051ee:	d10b      	bne.n	8005208 <_free_r+0x6c>
 80051f0:	6820      	ldr	r0, [r4, #0]
 80051f2:	4401      	add	r1, r0
 80051f4:	1850      	adds	r0, r2, r1
 80051f6:	4283      	cmp	r3, r0
 80051f8:	6011      	str	r1, [r2, #0]
 80051fa:	d1e0      	bne.n	80051be <_free_r+0x22>
 80051fc:	6818      	ldr	r0, [r3, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	6053      	str	r3, [r2, #4]
 8005202:	4408      	add	r0, r1
 8005204:	6010      	str	r0, [r2, #0]
 8005206:	e7da      	b.n	80051be <_free_r+0x22>
 8005208:	d902      	bls.n	8005210 <_free_r+0x74>
 800520a:	230c      	movs	r3, #12
 800520c:	602b      	str	r3, [r5, #0]
 800520e:	e7d6      	b.n	80051be <_free_r+0x22>
 8005210:	6820      	ldr	r0, [r4, #0]
 8005212:	1821      	adds	r1, r4, r0
 8005214:	428b      	cmp	r3, r1
 8005216:	bf04      	itt	eq
 8005218:	6819      	ldreq	r1, [r3, #0]
 800521a:	685b      	ldreq	r3, [r3, #4]
 800521c:	6063      	str	r3, [r4, #4]
 800521e:	bf04      	itt	eq
 8005220:	1809      	addeq	r1, r1, r0
 8005222:	6021      	streq	r1, [r4, #0]
 8005224:	6054      	str	r4, [r2, #4]
 8005226:	e7ca      	b.n	80051be <_free_r+0x22>
 8005228:	bd38      	pop	{r3, r4, r5, pc}
 800522a:	bf00      	nop
 800522c:	20004c40 	.word	0x20004c40

08005230 <__malloc_lock>:
 8005230:	4801      	ldr	r0, [pc, #4]	@ (8005238 <__malloc_lock+0x8>)
 8005232:	f7ff bfa3 	b.w	800517c <__retarget_lock_acquire_recursive>
 8005236:	bf00      	nop
 8005238:	20004c3c 	.word	0x20004c3c

0800523c <__malloc_unlock>:
 800523c:	4801      	ldr	r0, [pc, #4]	@ (8005244 <__malloc_unlock+0x8>)
 800523e:	f7ff bf9e 	b.w	800517e <__retarget_lock_release_recursive>
 8005242:	bf00      	nop
 8005244:	20004c3c 	.word	0x20004c3c

08005248 <_init>:
 8005248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800524a:	bf00      	nop
 800524c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800524e:	bc08      	pop	{r3}
 8005250:	469e      	mov	lr, r3
 8005252:	4770      	bx	lr

08005254 <_fini>:
 8005254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005256:	bf00      	nop
 8005258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800525a:	bc08      	pop	{r3}
 800525c:	469e      	mov	lr, r3
 800525e:	4770      	bx	lr
